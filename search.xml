<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[弹性布局]]></title>
      <url>weison.org/2017/02/19/flex/</url>
      <content type="html"><![CDATA[<h1 id="版本兼容过程"><a href="#版本兼容过程" class="headerlink" title="版本兼容过程"></a>版本兼容过程</h1><h2 id="flex布局"><a href="#flex布局" class="headerlink" title="flex布局"></a>flex布局</h2><ul>
<li>旧版本<code>dispaly: box</code>;</li>
<li>过渡版本<code>dispaly: flexbox</code>;</li>
<li>以及现在的标准版本<code>display: flex</code>;</li>
</ul>
<h2 id="Android"><a href="#Android" class="headerlink" title="Android"></a>Android</h2><ul>
<li>2.3 开始就支持旧版本 <code>display:-webkit-box</code>;</li>
<li>4.4 开始支持标准版本 <code>display: flex</code>;</li>
</ul>
<h2 id="IOS"><a href="#IOS" class="headerlink" title="IOS"></a>IOS</h2><ul>
<li>6.1 开始支持旧版本 <code>display:-webkit-box</code>;</li>
<li>7.1 开始支持标准版本 <code>display: flex</code>;</li>
</ul>
<ul>
<li>设为Flex布局以后，子元素的<code>float</code>、<code>clear</code>和<code>vertical-align</code>属性将失效。</li>
</ul>
<h1 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h1><h2 id="容器及项目"><a href="#容器及项目" class="headerlink" title="容器及项目"></a>容器及项目</h2><p>采用flex布局的元素，称为Flex容器,简称”容器”，它所有子元素自动成为容器成员，称为Flex项目（flex item）,简称”项目”</p>
<h2 id="主轴main-axis及交叉轴cros-axis"><a href="#主轴main-axis及交叉轴cros-axis" class="headerlink" title="主轴main axis及交叉轴cros axis"></a>主轴<code>main axis</code>及交叉轴<code>cros axis</code></h2><ul>
<li>容器中默认存在两个轴，水平的轴（main axis）与交叉轴(cross axis)。</li>
<li>主轴开始的位置（与边框的交叉点）叫做<code>main start</code>,结束的位置叫做<code>main end</code></li>
<li>主轴开始的位置（与边框的交叉点）叫做<code>cross start</code>,结束的位置叫做<code>cross end</code></li>
<li>项目默认沿主轴排列。单个项目占据主轴的空间叫<code>main size</code>。占据交叉轴的空间叫<code>cross size</code></li>
</ul>
<h1 id="容器的属性"><a href="#容器的属性" class="headerlink" title="容器的属性"></a>容器的属性</h1><h2 id="flex-direction"><a href="#flex-direction" class="headerlink" title="flex-direction"></a><code>flex-direction</code></h2><p>决定主轴的方向</p>
<ul>
<li><code>row</code> 默认值，主轴为水平方向，起点在左端</li>
<li><code>row-reverse</code> 主轴为水平方向，起点在右端</li>
<li><code>column</code> 主轴为垂直方向，起点在顶端</li>
</ul>
<h2 id="flex-wrap"><a href="#flex-wrap" class="headerlink" title="flex-wrap"></a><code>flex-wrap</code></h2><p>项目都排在一条线（又称”轴线”）上。flex-wrap属性定义，如果一条轴线排不下，如何换行</p>
<ul>
<li><code>nowrap</code>默认值，代表不换先</li>
<li><code>wrap</code>  换行，第一行在上方</li>
<li><code>wrap-reverse</code> 换行，第一行在下方</li>
</ul>
<h2 id="flex-flow"><a href="#flex-flow" class="headerlink" title="flex-flow"></a><code>flex-flow</code></h2><p>flex-direction属性和flex-wrap属性</p>
<h2 id="justify-content"><a href="#justify-content" class="headerlink" title="justify-content"></a><code>justify-content</code></h2><p>主轴上的对齐方式</p>
<h2 id="align-items"><a href="#align-items" class="headerlink" title="align-items"></a><code>align-items</code></h2><p>交叉轴上的对齐方式</p>
<h2 id="align-content"><a href="#align-content" class="headerlink" title="align-content"></a><code>align-content</code></h2><p>定义了多根轴线的对齐方式。如果项目只有一根轴线，该属性不起作用</p>
<h1 id="项目的属性"><a href="#项目的属性" class="headerlink" title="项目的属性"></a>项目的属性</h1><h2 id="order"><a href="#order" class="headerlink" title="order"></a><code>order</code></h2><p>项目的排列顺序,数值越小，排列越前</p>
<h2 id="flex-grow"><a href="#flex-grow" class="headerlink" title="flex-grow"></a><code>flex-grow</code></h2><p>项目放大比例，默认为0，即存在剩余空间也不放大</p>
<h2 id="flex-shrink"><a href="#flex-shrink" class="headerlink" title="flex-shrink"></a><code>flex-shrink</code></h2><p>项目缩小比例，默认为1，即空间不足时缩小项目</p>
<h2 id="flex-basis"><a href="#flex-basis" class="headerlink" title="flex-basis"></a><code>flex-basis</code></h2><p>在分配多余空间之前，项目占据的主轴空间</p>
<h2 id="flex"><a href="#flex" class="headerlink" title="flex"></a><code>flex</code></h2><p>是<code>flex-grow</code>,<code>flex-shrink</code>,<code>flex-basis</code>的缩写，默认为<code>0 1 auto</code>。后两个属性可选</p>
<h2 id="align-self"><a href="#align-self" class="headerlink" title="align-self"></a><code>align-self</code></h2><p>单独定义项目的交叉轴对齐方式</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line">  </div><div class="line"><span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></div></pre></td></tr></table></figure>
<h1 id="常用布局"><a href="#常用布局" class="headerlink" title="常用布局"></a>常用布局</h1><h2 id="垂直居中对齐"><a href="#垂直居中对齐" class="headerlink" title="垂直居中对齐"></a>垂直居中对齐</h2><p>参考连接</p>
<ul>
<li><a href="http://www.ruanyifeng.com/blog/2015/07/flex-grammar.html?utm_source=tuicool" target="_blank" rel="external">Flex 布局教程：语法篇</a></li>
<li><a href="http://www.ruanyifeng.com/blog/2015/07/flex-examples.html" target="_blank" rel="external">Flex 布局教程：实例篇</a></li>
<li><a href="http://www.imooc.com/video/9573" target="_blank" rel="external">3-2 Flexbox弹性盒子布局</a></li>
<li><a href="http://www.imooc.com/video/9574" target="_blank" rel="external">3-3 Flex弹性盒模型</a></li>
<li><a href="https://github.com/lzxb/flex.css/blob/master/docs/zh-ch.md" target="_blank" rel="external">lzxb/flex.css</a></li>
<li><a href="http://caniuse.com/#feat=flexbox" target="_blank" rel="external">flex caniuse</a></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[函数柯里化]]></title>
      <url>weison.org/2017/02/18/currying/</url>
      <content type="html"><![CDATA[<p>参考连接</p>
<ul>
<li><a href="https://gold.xitu.io/post/58a5879e1b69e6006d1e8748" target="_blank" rel="external">简单理解JavaScript中的柯里化和反柯里化</a></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[react]]></title>
      <url>weison.org/2017/02/13/react/</url>
      <content type="html"><![CDATA[<p>参考连接</p>
<ul>
<li><a href="http://www.imooc.com/learn/504" target="_blank" rel="external">React入门开始学习</a></li>
<li><a href="http://www.imooc.com/learn/744" target="_blank" rel="external">在React中使用Redux数据流开始学习</a></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[hello weison.org]]></title>
      <url>weison.org/2017/02/11/success/</url>
      <content type="html"><![CDATA[<ol>
<li>成功在<a href="https://www.godaddy.com/" target="_blank" rel="external">godaddy</a>购买了域名；</li>
<li>在<a href="https://www.dnspod.cn/" target="_blank" rel="external">dnspod</a>配置DNS解释；</li>
<li><a href="http://blog.csdn.net/poem_of_sunshine/article/details/29369785/" target="_blank" rel="external">hex0+gitHub</a></li>
<li><a href="https://help.github.com/articles/adding-a-cname-file-to-your-repository/" target="_blank" rel="external">学习配置cname</a></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[字符串操作]]></title>
      <url>weison.org/2017/02/11/str/</url>
      <content type="html"><![CDATA[<p>javascript中的对象是一个泛指，所有的东西都是对象，类是指把对象具体细分Number、String、Function、Object、Date、RegExp，实例是类中的一个具体东西，如{},[],’123’;</p>
<h1 id="length获取长度-空格也会计算"><a href="#length获取长度-空格也会计算" class="headerlink" title="length获取长度(空格也会计算)"></a><code>length</code>获取长度(空格也会计算)</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> str = <span class="string">"  hello word!"</span></div><div class="line">str.length =&gt; <span class="number">13</span>;</div></pre></td></tr></table></figure>
<h1 id="charAt根据索引值获取对应字符"><a href="#charAt根据索引值获取对应字符" class="headerlink" title="charAt根据索引值获取对应字符"></a><code>charAt</code>根据索引值获取对应字符</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> str=<span class="string">"hello"</span>;</div><div class="line">str.charAt(); <span class="comment">// =&gt; "h" 不填写任何数字时，为第一个字符</span></div><div class="line">str.charAt(<span class="number">12</span>) <span class="comment">// =&gt; "" 当超过字符长度时为空</span></div><div class="line">str.charAt(<span class="number">-1</span>) <span class="comment">// =&gt; "" 为负数时也为空</span></div></pre></td></tr></table></figure>
<h1 id="charCodeAt获取字符对应的unicode编码"><a href="#charCodeAt获取字符对应的unicode编码" class="headerlink" title="charCodeAt获取字符对应的unicode编码"></a><code>charCodeAt</code>获取字符对应的unicode编码</h1><p>每一个字母、汉字、特殊字符，都有它对应的unicode码值</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line">	<span class="keyword">var</span> str = <span class="string">"hello"</span>;</div><div class="line">	str.charCodeAt(); <span class="comment">// =&gt; 104 相当于获取"h"的unicode编码 </span></div><div class="line">	<span class="comment">//常见字符对应编码</span></div><div class="line">	<span class="comment">//0~9  =&gt; 48~57		数字0到9</span></div><div class="line">	<span class="comment">//a~z  =&gt; 97~122	小字英文字母a到z</span></div><div class="line">	<span class="comment">//A~Z  =&gt; 65~90		大字英文字母A到Z</span></div><div class="line">&lt;<span class="regexp">/script&gt;</span></div></pre></td></tr></table></figure>
<h1 id="String-formCharCode-根据unicode编码，返回对应字符"><a href="#String-formCharCode-根据unicode编码，返回对应字符" class="headerlink" title="String.formCharCode 根据unicode编码，返回对应字符"></a><code>String.formCharCode</code> 根据unicode编码，返回对应字符</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">String</span>.fromCharCode(<span class="number">104</span>); <span class="comment">// =&gt; "h"	注意String首字母大写的</span></div></pre></td></tr></table></figure>
<h1 id="indexOf从左到右查到字串第一次出现的索引值"><a href="#indexOf从左到右查到字串第一次出现的索引值" class="headerlink" title="indexOf从左到右查到字串第一次出现的索引值"></a><code>indexOf</code>从左到右查到字串第一次出现的索引值</h1><p><code>str.indexOf(searchValue[, fromIndex])</code></p>
<ul>
<li><code>searchValue</code> 一个字符串表示被查找的值。</li>
<li><code>fromIndex</code> 表示调用该方法的字符串中开始查找的位置。可以是任意整数。默认值为 0。如果 fromIndex &lt; 0 则查找整个字符串（如同传进了 0）。如果 fromIndex &gt;= str.length，则该方法返回 -1，除非被查找的字符串是一个空字符串，此时返回 str.length。</li>
</ul>
<ul>
<li>区分大小写的</li>
<li>假如没有查找到内容，会返回-1</li>
<li>fromIndex &lt; 0 则查找整个字符串（如同传进了 0）<br><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/indexOf" target="_blank" rel="external">String.prototype.indexOf()</a><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line">	<span class="keyword">var</span> str = <span class="string">"weison.org/online"</span>;</div><div class="line">	str.indexOf(<span class="string">"o"</span>); <span class="comment">// =&gt; 4 从左到右查找字母o第一次现在的索引值</span></div><div class="line">	str.indexOf(<span class="string">"o"</span>,<span class="number">5</span>); <span class="comment">// =&gt;7 如果后面带一个数字，则从这个索引值开始查找符合条件的内容</span></div><div class="line">	str.indexOf(<span class="string">"a"</span>); str.indexOf(<span class="string">"a"</span>，<span class="number">90</span>); <span class="comment">// =&gt; -1 如果查找一个不存在的字符或查找开始点超过索引值，则会返回-1，,表示不存在</span></div><div class="line">	str.indexOf(<span class="string">"on"</span>) <span class="comment">// =&gt;4 假如填入的是多个字符，那么会把这串字符当作一个单位去查找，并返回该串字符首个字符的索引值</span></div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 利用indexOf查找出条件内所有符合条件的字符出现的位置</div><div class="line">	 * @param  &#123;[type]&#125; str         [查找的源文本]</div><div class="line">	 * @param  &#123;[type]&#125; checkString [查找的内容]</div><div class="line">	 * @return &#123;[type]&#125;             [description]</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">function</span> <span class="title">checkStr</span>(<span class="params">str,checkString</span>)</span>&#123;		 </div><div class="line">		<span class="keyword">var</span> checkResult = <span class="string">""</span>;  <span class="comment">//输出结果</span></div><div class="line">		<span class="comment">//假如indexOf不等于-1，则证明条件符合，可以加入到输出结果</span></div><div class="line">		<span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;str.indexOf(checkString,i) != <span class="number">-1</span>;)&#123;</div><div class="line">			<span class="comment">//将符合条件的串联起来</span></div><div class="line">			checkResult = checkResult +<span class="string">","</span> +  str.indexOf(checkString,i);</div><div class="line">			<span class="comment">//将i的值变成符合条件的索引值加上这个检测字符的长度，继续运算</span></div><div class="line">			i += str.indexOf(checkString,i) + checkString.length;</div><div class="line">			&#125;</div><div class="line">			<span class="built_in">console</span>.log(checkString+<span class="string">"出现的位置是:"</span>+checkResult);</div><div class="line">		&#125;</div><div class="line">&lt;<span class="regexp">/script&gt;</span></div></pre></td></tr></table></figure>
</li>
</ul>
<h1 id="search-搜索字符串，并返回子字符的索引值"><a href="#search-搜索字符串，并返回子字符的索引值" class="headerlink" title="search()搜索字符串，并返回子字符的索引值"></a><code>search()</code>搜索字符串，并返回子字符的索引值</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line">	<span class="keyword">var</span> str = <span class="string">'weison.org'</span>;</div><div class="line">	<span class="built_in">console</span>.log(str.search(<span class="string">'e'</span>)); <span class="comment">// =&gt; 1</span></div><div class="line">	<span class="built_in">console</span>.log(str.search(<span class="string">'a'</span>)); <span class="comment">// =&gt; -1 假如没找到该子字符，则返回-1</span></div><div class="line">&lt;<span class="regexp">/script&gt;</span></div></pre></td></tr></table></figure>
<h1 id="lastIndexOf-从右往左查找符合要求的字符索引值"><a href="#lastIndexOf-从右往左查找符合要求的字符索引值" class="headerlink" title="lastIndexOf() 从右往左查找符合要求的字符索引值"></a><code>lastIndexOf()</code> 从右往左查找符合要求的字符索引值</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line">	<span class="keyword">var</span> str = <span class="string">"weison.org"</span>;</div><div class="line">	str.lastIndexOf(<span class="string">"o"</span>,<span class="number">-1</span>);</div><div class="line">	str.lastIndexOf(<span class="string">"o"</span>); <span class="comment">// =&gt;7 </span></div><div class="line">	str.lastIndexOf(<span class="string">"on"</span>,<span class="number">7</span>); <span class="comment">// =&gt;4 //虽然是从左往右走，但索引值还是从左边为0开始算</span></div><div class="line">	??假若为负数的问题 str.lastIndexOf(<span class="string">"o"</span>,<span class="number">-1</span>);</div><div class="line"><span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></div></pre></td></tr></table></figure>
<h1 id="字符串对比（相当于字符unicode编码对比）"><a href="#字符串对比（相当于字符unicode编码对比）" class="headerlink" title="字符串对比（相当于字符unicode编码对比）"></a>字符串对比（相当于字符unicode编码对比）</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line">	alert(<span class="string">"ac"</span> &gt; <span class="string">"b"</span>); <span class="comment">// =&gt; false 字符串对比时，会对比第一个字符的unicode编码，因为“a”的unicode编码</span></div><div class="line">	<span class="comment">//是97，而b的unicode编码是98，所以会是fasle</span></div><div class="line">	alert(<span class="string">"1000"</span> &gt; <span class="number">2</span>); <span class="comment">// =&gt; true 当是字符串与数字对比时，会触发隐式转换机制，将字符串类型"1000"先转换为数字类型的10000，再跟2比较，所以是true</span></div><div class="line">	alert(<span class="string">"1000"</span> &gt; <span class="string">"2"</span>); <span class="comment">// =&gt; false 当数字同时是字符串的形式时，不会触发转换，所以会比较1和2的unicode编码</span></div><div class="line">	alert(<span class="string">"ac"</span>&gt;<span class="string">"a1"</span>); <span class="comment">// =&gt; true 当第一个字符相同时，会对比第2个字符的unicode编码</span></div><div class="line">&lt;<span class="regexp">/script&gt;</span></div></pre></td></tr></table></figure>
<h1 id="str-substr-start-length-截取"><a href="#str-substr-start-length-截取" class="headerlink" title="str.substr(start[, length])截取"></a><code>str.substr(start[, length])</code>截取</h1><p>返回字符串中从指定位置开始到指定长度的子字符串。</p>
<ul>
<li>start<br>开始提取字符的位置。如果为负值，则被看作 strLength + start，其中 strLength 为字符串的长度（例如，如果 start 为 -3，则被看作 strLength-3）。</li>
<li>length<br>可选。提取的字符数。<br>假如start为负数，且abs(start)的长度大于str.length,则截取会从0开始<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line">   <span class="keyword">var</span> str = <span class="string">"abcdefghij"</span>;</div><div class="line">   <span class="built_in">console</span>.log(str.substr(<span class="number">-20</span>,<span class="number">2</span>)); <span class="comment">// =&gt; ab</span></div><div class="line"> &lt;<span class="regexp">/script&gt;</span></div></pre></td></tr></table></figure>
</li>
</ul>
<p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/substr" target="_blank" rel="external">String.prototype.substr()</a></p>
<h1 id="str-substring-indexStart-indexEnd"><a href="#str-substring-indexStart-indexEnd" class="headerlink" title="str.substring(indexStart[, indexEnd])"></a><code>str.substring(indexStart[, indexEnd])</code></h1><p>返回字符串两个索引之间（或到字符串末尾）的子串。<br><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/substring" target="_blank" rel="external">String.prototype.substring()</a></p>
<ul>
<li>如果任一参数小于 0 或为 NaN，则被当作 0。<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line">	<span class="keyword">var</span> str = <span class="string">"一张网页，要经历怎样的过程，才能抵达用户面前？"</span>;</div><div class="line">	<span class="built_in">console</span>.log(str.substring(<span class="number">3</span>));</div><div class="line">	<span class="comment">//=&gt;"页，要经历怎样的过程，才能抵达用户面前？" 当只有一个参数时，表示从这个索引值开始保留字符;</span></div><div class="line">	<span class="built_in">console</span>.log(str.substring(<span class="number">3</span>,<span class="number">10</span>)); </div><div class="line">	<span class="comment">// =&gt; "页，要经历怎样"  当有两个参数时，代表从较小那个索引值开始截取，到较大的那个数字的索引值（即，str.substring(3,9),会保留索引值从3到8的字符，不包含到9）;</span></div><div class="line">	<span class="built_in">console</span>.log(str.substring(<span class="number">-3</span>));</div><div class="line">	<span class="built_in">console</span>.log(str.substring(<span class="number">0</span>));</div><div class="line">	<span class="built_in">console</span>.log(str.substring());</div><div class="line">	<span class="comment">// =&gt;"一张网页，要经历怎样的过程，才能抵达用户面前？",当使用负数，0，或者空值时，代表不截取</span></div><div class="line">	<span class="built_in">console</span>.log(str.substring(<span class="number">2</span>,<span class="number">0</span>)); =&gt; <span class="string">"一张"</span>,</div><div class="line">	<span class="comment">//当后面的数字0比前面的数字2小的时候，会将后面的数字调前，即当使用//substring截取字符时，会先比较两个数值的的小，然后会将小的排在前面，所以str.substring(2,0) = str.substring(0,2)</span></div><div class="line">&lt;<span class="regexp">/script&gt;</span></div></pre></td></tr></table></figure>
</li>
</ul>
<h1 id="slice截取"><a href="#slice截取" class="headerlink" title="slice截取"></a><code>slice</code>截取</h1><p><code>str.slice(beginSlice[, endSlice])</code>提取字符的一部分，并返回新的字符串<br><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/slice" target="_blank" rel="external">String.prototype.slice()</a></p>
<ul>
<li>slice 不修改原字符串，只会返回一个包含了原字符串中部分字符的新字符串</li>
<li>slice() 提取新字符串不包括 endSlice。</li>
</ul>
<p>跟substring有两点不同：</p>
<ol>
<li><p>不同根据两个数字的不同而调换位置</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line">	<span class="keyword">var</span> str = <span class="string">"一张网页，要经历怎样的过程，才能抵达用户面前？"</span>;</div><div class="line">	str.slice(<span class="number">3</span>,<span class="number">0</span>); <span class="comment">// =&gt; "" 因为不会调换位置，所以相当于从索引值为3开始从右找到索引值为0的东西，所以没有内容</span></div><div class="line">&lt;<span class="regexp">/script&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>当索引值是负数时，计算方式为str.length + 索引 </p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line">	<span class="keyword">var</span> str = <span class="string">"一张网页，要经历怎样的过程，才能抵达用户面前？"</span>;</div><div class="line">	str.slice(<span class="number">-3</span>); <span class="comment">// =&gt; "面前？" 相当于截取从倒数第3个字符到最后一个</span></div><div class="line">	str.slice(<span class="number">-5</span>,<span class="number">-1</span>); <span class="comment">// =&gt; "用户面前"相当于从左向右截取到数第5个到倒数第1个，但不包含倒数第1个</span></div><div class="line">&lt;<span class="regexp">/script&gt;</span></div></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="通过截取来隐藏部分内容并添加省略号"><a href="#通过截取来隐藏部分内容并添加省略号" class="headerlink" title="通过截取来隐藏部分内容并添加省略号"></a>通过截取来隐藏部分内容并添加省略号</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 添加省略号</div><div class="line"> * @param  &#123;[type]&#125; ele [截取的元素]</div><div class="line"> * @param  &#123;[type]&#125; len [保留的长度]</div><div class="line"> * @return &#123;[type]&#125;     [description]</div><div class="line"> * 用例 ellipsis("story",30);</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">ellipsis</span>(<span class="params">ele,len</span>)</span>&#123;</div><div class="line">	<span class="keyword">var</span> obj = <span class="built_in">document</span>.getElementById(ele);</div><div class="line">	<span class="keyword">var</span> str = obj.innerHTML;</div><div class="line">	obj.innerHTML = str.substring(<span class="number">0</span>,len) + <span class="string">"..."</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="toUpperCase和toLowerCase-英文大小写转换"><a href="#toUpperCase和toLowerCase-英文大小写转换" class="headerlink" title="toUpperCase和toLowerCase 英文大小写转换"></a><code>toUpperCase</code>和<code>toLowerCase</code> 英文大小写转换</h1><ol>
<li>toUpperCase() 小写英文转换成大写</li>
<li>toLowerCase() 大写英文转换成小写<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> str = <span class="string">"weiSon.org"</span>;</div><div class="line">str.toUpperCase(); =&gt; <span class="string">"weison.org"</span></div><div class="line">str.toLowerCase(); =&gt; <span class="string">"WEISON.ORG"</span></div></pre></td></tr></table></figure>
</li>
</ol>
<h1 id="replace-旧字符，新字符"><a href="#replace-旧字符，新字符" class="headerlink" title="replace(旧字符，新字符)"></a><code>replace(旧字符，新字符)</code></h1><ul>
<li>在不使用正则的情况下，每次执行，只会替换一个</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line">   <span class="keyword">var</span> str = <span class="string">"hello men"</span>;</div><div class="line">   str.replace(<span class="string">'e'</span>,<span class="string">'a'</span>); <span class="comment">// =&gt; "hallo men"</span></div><div class="line">   str.replace(<span class="regexp">/e/g</span>,<span class="string">'a'</span>); <span class="comment">// =&gt; "hallo man"</span></div><div class="line"> &lt;<span class="regexp">/script&gt;</span></div></pre></td></tr></table></figure>
<h1 id="split-将字符折分成数组"><a href="#split-将字符折分成数组" class="headerlink" title="split 将字符折分成数组"></a><code>split</code> 将字符折分成数组</h1><p><code>str.split([separator][, limit])</code>通过把字符串分割成子字符串来把一个 String 对象分割成一个字符串数组。<br><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/split" target="_blank" rel="external">String.prototype.split()</a></p>
<ul>
<li>不写任何参数，表示不进行拆分，直接将整个字符串转换为数组；</li>
<li>填写””即将每个字符将分成一个数组；</li>
<li>假如带参数，则将参数当划分线，划分后，被当作分割符的内容不保留</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> str = <span class="string">"www.weison.org"</span>;</div><div class="line">str.split(); =&gt; [<span class="string">"www.weison.org"</span>]; 不写任何参数，表示不进行拆分，直接将整个字符串转换为数组；</div><div class="line"><span class="keyword">var</span> str2 = <span class="string">"weison"</span>;</div><div class="line">str2.split(<span class="string">""</span>); =&gt; [<span class="string">"w"</span>, <span class="string">"e"</span>, <span class="string">"i"</span>, <span class="string">"s"</span>, <span class="string">"o"</span>, <span class="string">"n"</span>]; 填写<span class="string">""</span>即将每个字符将分成一个数组；</div><div class="line"><span class="keyword">var</span> str3 = str;</div><div class="line">str3.split(<span class="string">"."</span>) =&gt; [<span class="string">"www"</span>, <span class="string">"weison"</span>, <span class="string">"org"</span>];假如带参数，则将参数当划分线，划分后，被当作分割符的内容不保留</div><div class="line"><span class="keyword">var</span> str4 = <span class="string">"/3/"</span>;</div><div class="line">str4.split(<span class="string">"/"</span>); =&gt; [<span class="string">""</span>,<span class="string">"3"</span>,<span class="string">""</span>]; 假如分割号前后没有内容，那也会创建空的数组</div><div class="line"><span class="keyword">var</span> str5 = <span class="string">"www.weison.org"</span>;</div><div class="line">str5.split(<span class="string">"."</span>,<span class="number">2</span>); =&gt; [<span class="string">"www"</span>, <span class="string">"weison"</span>]; 如果后面带一个参数，则表示保留多少个截取的数组，如上例，意思是利用<span class="string">"."</span>分割字符串后，保留前两个数组</div></pre></td></tr></table></figure>
<h1 id="join-将数组转换成一个字符串"><a href="#join-将数组转换成一个字符串" class="headerlink" title="join 将数组转换成一个字符串"></a><code>join</code> 将数组转换成一个字符串</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arr = [<span class="string">"www"</span>, <span class="string">"weison"</span>, <span class="string">"org"</span>];</div><div class="line">arr.join(); =&gt; <span class="string">"www,weison,org"</span>; 当括号内没写内容时，相当于逗号链接字符 <span class="string">"www"</span>+<span class="string">","</span>+<span class="string">"weison"</span>+<span class="string">","</span>+<span class="string">"org"</span>;</div><div class="line">arr.join(<span class="string">""</span>); =&gt; <span class="string">"wwwweisonorg"</span> 当只填引号时，相当于<span class="string">"www"</span>+<span class="string">""</span>+<span class="string">"weison"</span>+<span class="string">""</span>+<span class="string">"org"</span>;</div><div class="line">arr.join(<span class="string">"-"</span>) =&gt; <span class="string">"www-weison-org"</span> 当括号内有字符于，相当于把这个字符当成连接符</div></pre></td></tr></table></figure>
<h1 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h1><ol>
<li>时间格式转换</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line"><span class="comment">//时间格式</span></div><div class="line"><span class="keyword">var</span> timeStr = <span class="string">"2016-10-3 15:43:2"</span>; <span class="comment">// 2016年10月03日 15点43分02秒</span></div><div class="line"><span class="comment">//拆分日期和钟点</span></div><div class="line"><span class="keyword">var</span> timeArr = timeStr.split(<span class="string">" "</span>);</div><div class="line"><span class="comment">//日期</span></div><div class="line"><span class="keyword">var</span> dataArr = timeArr[<span class="number">0</span>].split(<span class="string">'-'</span>);</div><div class="line"><span class="keyword">var</span> dataUnit = [<span class="string">'年'</span>,<span class="string">'月'</span>,<span class="string">'日'</span>];</div><div class="line"><span class="keyword">var</span> dataStr = <span class="string">''</span>;</div><div class="line"><span class="comment">//钟点</span></div><div class="line"><span class="keyword">var</span> timeArr2 = timeArr[<span class="number">1</span>].split(<span class="string">':'</span>);</div><div class="line"><span class="keyword">var</span> timeUnit =[<span class="string">'时'</span>,<span class="string">'分'</span>,<span class="string">'秒'</span>];</div><div class="line"><span class="keyword">var</span> timeStr2 = <span class="string">''</span>;</div><div class="line"><span class="comment">//转换为两位数</span></div><div class="line"><span class="keyword">var</span> toDouble = <span class="function"><span class="keyword">function</span>(<span class="params">n</span>)</span>&#123;</div><div class="line">  <span class="keyword">if</span>(n&lt;<span class="number">10</span>)&#123;</div><div class="line">    n = <span class="number">0</span> + n;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> n</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;dataArr.length;i++)&#123;</div><div class="line">  dataStr += toDouble(dataArr[i]) + dataUnit [i];</div><div class="line">&#125;</div><div class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;timeArr2.length;i++)&#123;</div><div class="line">  timeStr2 += toDouble(timeArr2[i]) + timeUnit [i];</div><div class="line">&#125;</div><div class="line"><span class="built_in">console</span>.log(dataStr+ <span class="string">' '</span>+ timeStr2);</div><div class="line"><span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></div></pre></td></tr></table></figure>
<ol>
<li>生成随机验证码</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line"><span class="comment">//定义范围</span></div><div class="line"><span class="keyword">var</span> rendCode = <span class="function"><span class="keyword">function</span>(<span class="params">len</span>)</span>&#123;</div><div class="line">  <span class="keyword">var</span> number = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>],</div><div class="line">      lowper = [<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'d'</span>,<span class="string">'e'</span>,<span class="string">'f'</span>,<span class="string">'g'</span>,<span class="string">'h'</span>,<span class="string">'j'</span>,<span class="string">'k'</span>,<span class="string">'m'</span>,<span class="string">'n'</span>,<span class="string">'p'</span>,<span class="string">'q'</span>,<span class="string">'r'</span>,<span class="string">'s'</span>,<span class="string">'t'</span>,<span class="string">'u'</span>,<span class="string">'v'</span>,<span class="string">'w'</span>,<span class="string">'x'</span>,<span class="string">'y'</span>,<span class="string">'z'</span>];</div><div class="line">      upper = lowper.toString().toUpperCase().split(<span class="string">","</span>),</div><div class="line">      round  = number.concat(lowper,upper);</div><div class="line">  <span class="keyword">var</span> str = <span class="string">''</span>;</div><div class="line">  <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;len;i++)&#123;</div><div class="line">    str +=    round[<span class="built_in">Math</span>.round(<span class="built_in">Math</span>.random()*(round.length<span class="number">-1</span>))];</div><div class="line">  &#125;</div><div class="line">  <span class="built_in">console</span>.log(str);</div><div class="line">  <span class="keyword">return</span> str;</div><div class="line">&#125;</div><div class="line">rendCode(<span class="number">5</span>)</div><div class="line">&lt;<span class="regexp">/script&gt;</span></div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[学习公钥]]></title>
      <url>weison.org/2017/02/11/publicKey/</url>
      <content type="html"><![CDATA[<p><a href="https://help.github.com/articles/generating-ssh-keys/" target="_blank" rel="external">github</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[javascript引号嵌套]]></title>
      <url>weison.org/2017/02/11/javascriptQuto/</url>
      <content type="html"><![CDATA[<ol>
<li>javascript中单双号是可以互相嵌套的，即<code>&#39;&quot;&quot;&#39;</code>或<code>&quot;&#39;&#39;&quot;</code>都是可以的，但单引号开始，就要保持单引号结束</li>
<li><p>若连续使用双引号，要使用\当转义字符;</p>
 <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">alert(<span class="string">"\"ok\""</span>); <span class="comment">// =&gt; "ok"</span></div></pre></td></tr></table></figure>
</li>
<li><p>要注意使用场景问题</p>
</li>
</ol>
<ul>
<li>写在html中的</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Hello World]]></title>
      <url>weison.org/2017/02/11/hello-world/</url>
      <content type="html"><![CDATA[<p>Welcome to <a href="http://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="http://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="http://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[利用git进行版本控制]]></title>
      <url>weison.org/2017/02/11/git/</url>
      <content type="html"><![CDATA[<h2 id="git作用"><a href="#git作用" class="headerlink" title="git作用"></a>git作用</h2><ul>
<li>可以回溯到之前的任意版本</li>
<li>解决多人协作时的冲突问题</li>
</ul>
<h2 id="github"><a href="#github" class="headerlink" title="github"></a><a href="https://github.com/" target="_blank" rel="external">github</a></h2><ul>
<li>geek平台，可以找到开源项目以及作远程仓库之用</li>
<li>可视化工具<a href="https://desktop.github.com/" target="_blank" rel="external">github desktop</a></li>
</ul>
<h2 id="svn与git的区别"><a href="#svn与git的区别" class="headerlink" title="svn与git的区别"></a>svn与git的区别</h2><ul>
<li>svn采用的是集中式的管理方式,所有代码都存放在中 </li>
<li>git采用的是分布式的管理方式</li>
</ul>
<h2 id="使用git"><a href="#使用git" class="headerlink" title="使用git"></a>使用git</h2><ul>
<li>复制仓库 git clone [url]</li>
<li>设置贡献者,用于在多人协作时识别coder身份</li>
</ul>
<ol>
<li>git config –global user.name “名字” </li>
<li>git config –global user.email “邮箱地址”</li>
<li>查看开发者名称 git config –global user.name</li>
<li>查看开发者邮箱 git config –global user.email</li>
<li>查看所有git的项目配置文件 git config –list</li>
</ol>
<ul>
<li>分支</li>
</ul>
<ol>
<li>为了保证新增功能不影响主项目的开发，而创建一个与主分支一样的副本文件，当这个副本开发相对完善后再合并到主分支，形成一个新的稳定版本</li>
<li>默认分支 master</li>
</ol>
<ul>
<li>git的三个区</li>
</ul>
<ol>
<li>工作区，正在编写代码的开发环境</li>
<li>暂存区<ul>
<li>作为工作区与版本库的桥梁，减少误操作的风险</li>
<li>当工作区的文件在误操作时可以通过暂存区复原，也保证未编写完整的代码提示到版本库上</li>
<li>分支处理，当要临时切换到另外的分支进行开发工作时，可以把正在编写的文件提交到暂存区，然后再切换到另一个分支，当有需要时再切换回来，从暂存区取出代码</li>
</ul>
</li>
<li>版本库</li>
</ol>
<ul>
<li>git 命令</li>
</ul>
<ol>
<li>git status 查看工作区和暂存区的状态，是否有经过编辑<ul>
<li>Changes not staged for commit  说明已跟踪文件的内容发生了变化，但还没有放到暂存区</li>
</ul>
</li>
<li>git add 文件名 =&gt; git add index.html 将工作区文件添加到暂存区</li>
<li>git add . 将工作区所有文件添加到暂存区</li>
<li>git commit -m “修改的内容” =&gt; git commit -m “change on file” 将文件从暂存区添加到版本库</li>
<li>git commit -a -m “修改内容” =&gt; git commit -a -m “hello” 将文件同步保存到暂存区并添加到版本库,-a就是简写的add</li>
<li>git log 查看提示记录,当提交记录过多时，不会一下全部打印出来，不过可以按回车来查看，然后按“q”键即可退出</li>
<li>git diff 对比命令</li>
<li>git diff 直接使用对比工作区与暂存区的内容</li>
<li>git diff –cached 或 git diff –staged 暂存区与版本库内容对比</li>
<li>git diff master 对比本地与版本库<br>1.撤消</li>
<li>git reset HEAD 文件名 =&gt; git reset HEAD drag.js 将你出去到暂存区的drag.js文件取回到暂存区，相当于取消提交</li>
<li>git checkout – 文件名 =&gt; git checkout – drag.js 将文件回复到版本库上的内容</li>
<li>git commit –amend =&gt; git commit -a -m “修正上一版本错误” –amend 覆盖上一次提交到版本库的文件，再重新上传一次<br>1.删除</li>
<li>git rm 文件名 =&gt; git rm test.txt ，当工作区的文件删除后，使用git rm test.txt 删除暂存区的文件</li>
<li>git rm -f 文件名 =&gt; git rm -f test.txt 同时删除本地及暂存区的文件</li>
<li>git rm –cached =&gt; git rm -cached test.txt 只删除暂存区的文件<br>1.恢复</li>
<li>git checkout commitId 文件名 =&gt; git checkout 50e7b8e0610 drag.js 使用git log 查看提交的id,然后恢复具体的文件</li>
<li>git reset –hard commitID =&gt; git reset –hard 50e7b8e061 恢复到某个特定版本<ul>
<li>git reset –hard head^ 返回上一个版本</li>
<li>git reset –hard head~3 返回前3个版本</li>
</ul>
</li>
<li>git reflog 查看所有操作，当切换到旧版本后git log没有了新的记录，可以通过git reflog查看所有操作，然后然后git reset –hard commit 来回来新版本 <img src="" alt=""><br>1.提交代码</li>
<li>git remote 远端名称 </li>
<li>git remote -v 远程地址</li>
<li>git push 名字 分支名</li>
<li>haha</li>
</ol>
<p>创建并切换到该分支 <code>git checkout -b [分支名称]</code><br>合并分支 <code>git merge [分支名称]</code><br>删除分支 <code>git branch -d [分支名称]</code></p>
<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><ol>
<li><a href="https://git-for-windows.github.io/" target="_blank" rel="external">mysysgit</a></li>
<li><p><a href="http://www.beyondcompare.cc/xiazai.html" target="_blank" rel="external">beyondcompare 文档比较软件</a></p>
<h1 id="生成钥匙"><a href="#生成钥匙" class="headerlink" title="生成钥匙"></a>生成钥匙</h1></li>
<li><code>ssh-keygen -t rsa -c &quot;email地址&quot;</code></li>
<li><code>cat ~/.ssh/id_rsa.pub</code></li>
<li>把它粘贴到github的ssh key上</li>
</ol>
<h1 id="创建仓库"><a href="#创建仓库" class="headerlink" title="创建仓库"></a>创建仓库</h1><ol>
<li><code>touch readme.md</code>创建描述文件</li>
<li><code>git init</code> 初始化本地目录</li>
<li><code>git add [fileName]</code>让本地文件提交到暂存区</li>
<li><code>git commit -am &#39;[更新描述]&#39;</code>  -am的意思，-a代表修改的文件,m代表删除的文件,所以这句话的意思是把所有添加、修改、删除都提交</li>
<li><code>git remote add [远程地址名称] [远程地址路径]</code>如<code>git remote add origin abc.git</code>就相当于把<code>abc.git</code>起了个名字叫<code>origin</code>,下次提交的时候写<code>git push origin master</code>就相当于推送内容到远端<code>origin</code>下的<code>master</code>分支</li>
<li><code>git pull</code>更新同步一下远端的代码，</li>
</ol>
<h1 id="分支操作"><a href="#分支操作" class="headerlink" title="分支操作"></a>分支操作</h1><ol>
<li><code>git branch -a</code>查看当前本地的所有分支，红色的不加星号的就是远程分支</li>
<li><code>git branch dev</code>创建一个dev分支</li>
<li><code>git checkout dev</code>切换到dev分支</li>
<li><code>git push -u origin dev</code>把本地的分支推送到远程</li>
</ol>
<h1 id="代码合并"><a href="#代码合并" class="headerlink" title="代码合并"></a>代码合并</h1><ol>
<li><code>git add .</code>把最新的修改添加到更新列</li>
<li><code>git commit -am [更新描述]</code></li>
<li><code>git pull [远端地址] [分支名称]</code></li>
<li><code>git push  [远端地址] [分支名称]</code>把内容更新到远端</li>
<li><code>git merge [分支名称]</code></li>
<li><code>git merge master</code>把主干<code>master</code>上的所有代码合并到当前分支</li>
<li>假如冲突(CONFLCT)，要先解决冲突</li>
</ol>
<h1 id="代码回溯"><a href="#代码回溯" class="headerlink" title="代码回溯"></a>代码回溯</h1><ol>
<li><code>git log -l 3</code>查看最近3次的提交</li>
<li>找到SHA码</li>
<li><code>git reset --hard [SHA码]</code>将本地的代码强制回到了[SHA]对应的文件(但复原后直接拒绝，会被拒绝),可以使用<br><code>git reset -f --hard [SHA码]</code>来强行提交，不过这样会把在这个版本后的记录都会清除（不建议使用）,为了避免<br>这种情况，可以使用<code>git revert [SHA码]</code>来返回指定的版本，github会把这次回滚理解成一次新的修改，这样会保留记录安全了很多。</li>
</ol>
<h1 id="多代码库共享"><a href="#多代码库共享" class="headerlink" title="多代码库共享"></a>多代码库共享</h1><p>参考资料<br><a href="https://git-scm.com/book/zh/v2/Git-%E5%88%86%E6%94%AF-%E5%88%86%E6%94%AF%E7%9A%84%E6%96%B0%E5%BB%BA%E4%B8%8E%E5%90%88%E5%B9%B6" target="_blank" rel="external">3.2 Git 分支 - 分支的新建与合并</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[yarn]]></title>
      <url>weison.org/2017/02/07/yarn/</url>
      <content type="html"><![CDATA[<p>参考连接</p>
<ul>
<li><a href="http://www.imooc.com/learn/766" target="_blank" rel="external">Yarn构建工具入门基础</a></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[vue]]></title>
      <url>weison.org/2017/01/24/vue/</url>
      <content type="html"><![CDATA[<h1 id="bower"><a href="#bower" class="headerlink" title="bower"></a>bower</h1><p>相对于npm来说，bower更偏向是一个前端的包管理工具</p>
<ol>
<li><code>npm install bower -g</code> 安装bower</li>
<li><code>bower install &lt;package&gt;</code>下载指定的包</li>
<li><code>bower uninstall &lt;package&gt;</code>删除指定的包</li>
<li><code>bower info &lt;package&gt;</code> 查看指定的包版本信息</li>
<li><code>bower</code> ..</li>
</ol>
<h1 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h1><h1 id="功能接口"><a href="#功能接口" class="headerlink" title="功能接口"></a>功能接口</h1><h2 id="标签属性和条件渲染"><a href="#标签属性和条件渲染" class="headerlink" title="标签属性和条件渲染"></a><code>标签属性和条件渲染</code></h2><h3 id="绑定标签属性-v-bind"><a href="#绑定标签属性-v-bind" class="headerlink" title="绑定标签属性 v-bind"></a>绑定标签属性 <code>v-bind</code></h3><p>通过<code>v-bind</code>来绑定的标签属性是动态绑定的，当这个属性的数据被修改时，页面也会动态地更新这个属性</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">ng-bind:name</span>=<span class="string">"属性标签"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line"><span class="comment">&lt;!-- 也可以直接通过 `:`来简写 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">:name</span>=<span class="string">"属性标签"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></div></pre></td></tr></table></figure>
<h4 id="常用的功能是用来绑定class"><a href="#常用的功能是用来绑定class" class="headerlink" title="常用的功能是用来绑定class"></a>常用的功能是用来绑定class</h4><ul>
<li>可以是直接的字符串</li>
</ul>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></div><div class="line">  .fs12&#123;</div><div class="line">    font-size: 12px;</div><div class="line">  &#125;</div><div class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"div1"</span> <span class="attr">:class</span>=<span class="string">"myClass"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></div><div class="line">  new Vue(&#123;</div><div class="line">    el: '#div1',</div><div class="line">    data () &#123;</div><div class="line">      return &#123;</div><div class="line">        myClass: 'fs12'</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;)</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<ul>
<li><p>可以是对象，当class为对象时，class的生效由value是否为<code>true</code>来决定</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></div><div class="line">  .fs12&#123;</div><div class="line">    font-size: 12px;</div><div class="line">  &#125;</div><div class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"div1"</span> <span class="attr">:class</span>=<span class="string">"myClass"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></div><div class="line">  new Vue(&#123;</div><div class="line">    el: '#div1',</div><div class="line">    data () &#123;</div><div class="line">      return &#123;</div><div class="line">        myClass: &#123;</div><div class="line">          fs12 : true,</div><div class="line">          red: false,</div><div class="line">          bold: true</div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;)</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>可以是数组，那么这些，class的名称指向了data里面的属性</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></div><div class="line">  .fs12&#123;</div><div class="line">    font-size: 12px;</div><div class="line">  &#125;</div><div class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"div1"</span> <span class="attr">:class</span>=<span class="string">"[class1,class2]"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="comment">&lt;!-- 编译会变成</span></div><div class="line">    &lt;div id="div1" class="arrayClass1 arrayClass2"&gt;&lt;/div&gt;</div><div class="line"> --&gt;</div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></div><div class="line">  new Vue(&#123;</div><div class="line">    el: '#div1',</div><div class="line">    data () &#123;</div><div class="line">      return &#123;</div><div class="line">        class1: 'arrayClass1',</div><div class="line">        class2: 'arrayClass2',</div><div class="line">        myClass: &#123;</div><div class="line">          fs12 : true,</div><div class="line">          red: false,</div><div class="line">          bold: true</div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;)</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>可以混合一起用,数组加对象</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></div><div class="line">  .fs12&#123;</div><div class="line">    font-size: 12px;</div><div class="line">  &#125;</div><div class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"div1"</span> <span class="attr">:class</span>=<span class="string">"[class1,&#123;'error':hasError&#125;]"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="comment">&lt;!-- 编译会变成</span></div><div class="line">    &lt;div id="div1" class="arrayClass1 error"&gt;&lt;/div&gt;</div><div class="line"> --&gt;</div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></div><div class="line">  new Vue(&#123;</div><div class="line">    el: 'div1',</div><div class="line">    data () &#123;</div><div class="line">      return &#123;</div><div class="line">        class1: 'arrayClass1',</div><div class="line">        class2: 'arrayClass2',</div><div class="line">        hasError: true,</div><div class="line">        myClass: &#123;</div><div class="line">          fs12 : true,</div><div class="line">          red: false,</div><div class="line">          bold: true</div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;)</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="也可以用变量的方式来渲染内联样式"><a href="#也可以用变量的方式来渲染内联样式" class="headerlink" title="也可以用变量的方式来渲染内联样式"></a>也可以用变量的方式来渲染内联样式</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"div1"</span> <span class="attr">:style</span>=<span class="string">"myStyle"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="comment">&lt;!-- 编译会变成</span></div><div class="line">    &lt;div id="div1" style="color: red; font-weight: 700;"&gt;&lt;/div&gt;</div><div class="line"> --&gt;</div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></div><div class="line">  new Vue(&#123;</div><div class="line">    el: '#div1',</div><div class="line">    data () &#123;</div><div class="line">      return &#123;</div><div class="line">        class1: 'arrayClass1',</div><div class="line">        class2: 'arrayClass2',</div><div class="line">        myClass: &#123;</div><div class="line">          fs12 : true,</div><div class="line">          red: false,</div><div class="line">          bold: true</div><div class="line">        &#125;,</div><div class="line">        myStyle: &#123;</div><div class="line">          color: 'red',</div><div class="line">          'font-weight': 700</div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;)</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="条件渲染"><a href="#条件渲染" class="headerlink" title="条件渲染"></a>条件渲染</h3><h4 id="v-if-v-else及v-show"><a href="#v-if-v-else及v-show" class="headerlink" title="v-if,v-else及v-show"></a><code>v-if</code>,<code>v-else</code>及<code>v-show</code></h4><p>两者的区别是<code>v-if</code>是直接把DOM删除，而<code>v-show</code>是控制元素的<code>display</code>属性<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-if</span>=<span class="string">"bShow"</span>&gt;</span>测试v-if<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-else</span>&gt;</span>测试v-else<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"toggleIf"</span>&gt;</span>v-if toggle<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></div><div class="line">  </div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h2 id="事件绑定v-on"><a href="#事件绑定v-on" class="headerlink" title="事件绑定v-on || @"></a>事件绑定v-on || @</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"dvi1"</span> <span class="attr">v-on:click</span>=<span class="string">"show()"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="comment">&lt;!-- 等价于 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"dvi1"</span> @ <span class="attr">click</span>=<span class="string">"show()"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="事件修饰符"><a href="#事件修饰符" class="headerlink" title="事件修饰符"></a>事件修饰符</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 阻止单击事件冒泡 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">v-on:click.stop</span>=<span class="string">"doThis"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line"><span class="comment">&lt;!-- 提交事件不再重载页面 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">v-on:submit.prevent</span>=<span class="string">"onSubmit"</span>&gt;</span><span class="tag">&lt;/<span class="name">form</span>&gt;</span></div><div class="line"><span class="comment">&lt;!-- 修饰符可以串联  --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">v-on:click.stop.prevent</span>=<span class="string">"doThat"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line"><span class="comment">&lt;!-- 只有修饰符 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">v-on:submit.prevent</span>&gt;</span><span class="tag">&lt;/<span class="name">form</span>&gt;</span></div><div class="line"><span class="comment">&lt;!-- 添加事件侦听器时使用事件捕获模式 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-on:click.capture</span>=<span class="string">"doThis"</span>&gt;</span>...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="comment">&lt;!-- 只当事件在该元素本身（而不是子元素）触发时触发回调 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-on:click.self</span>=<span class="string">"doThat"</span>&gt;</span>...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="comment">&lt;!-- 点击事件将只会触发一次 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">v-on:click.once</span>=<span class="string">"doThis"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="按键修饰符"><a href="#按键修饰符" class="headerlink" title="按键修饰符"></a>按键修饰符</h3><p><code>.enter</code><br><code>.tab</code><br><code>.delete</code> (捕获 “删除” 和 “退格” 键)<br><code>.esc</code><br><code>.space</code><br><code>.up</code><br><code>.down</code><br><code>.left</code><br><code>.right</code><br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 只有在 keyCode 是 13 时调用 vm.submit() --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">v-on:keyup.13</span>=<span class="string">"submit"</span>&gt;</span></div><div class="line"><span class="comment">&lt;!-- 缩写语法 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">input</span> @<span class="attr">keyup.enter</span>=<span class="string">"submit"</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h3 id="自定义事件"><a href="#自定义事件" class="headerlink" title="自定义事件"></a>自定义事件</h3><p>针对子元素触发的向外传播的自定义事件<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 父组件,表示当子组件通过`$emit`触发了`my-event`事件后，父组件会触发show的方法 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">componentA</span> @<span class="attr">my-evnet</span>=<span class="string">"show"</span>&gt;</span><span class="tag">&lt;/<span class="name">componentA</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></div><div class="line">  // 子组件的事件</div><div class="line">  new Vue(&#123;</div><div class="line">    methods: &#123;</div><div class="line">      clickEvent () &#123;</div><div class="line">        //代表出发了`my-event`事件，并把当前子组件data属性下的hello传给了父组件</div><div class="line">        this.$emit('my-event',this.hello);</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;)</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h1 id="组件之间通信Vuex"><a href="#组件之间通信Vuex" class="headerlink" title="组件之间通信Vuex"></a>组件之间通信<code>Vuex</code></h1><h2 id="是什么"><a href="#是什么" class="headerlink" title="是什么"></a>是什么</h2><blockquote><p>Vuex 是一个专为 Vue.js 应用程序开发的状态管理模式。它采用集中式存储管理应用的所有组件的状态，并以相应的规则保证状态以一种可预测的方式发生变化。</p>
</blockquote>
<h2 id="State"><a href="#State" class="headerlink" title="State"></a><code>State</code></h2><blockquote><p>Vuex 使用 单一状态树 —— 是的，用一个对象就包含了全部的应用层级状态。至此它便作为一个『唯一数据源(SSOT)』而存在。这也意味着，每个应用将仅仅包含一个 store 实例。单一状态树让我们能够直接地定位任一特定的状态片段，在调试的过程中也能轻易地取得整个当前应用状态的快照。</p>
</blockquote>
<h3 id="获取状态"><a href="#获取状态" class="headerlink" title="获取状态"></a>获取状态</h3><h2 id="Getters"><a href="#Getters" class="headerlink" title="Getters"></a><code>Getters</code></h2><p>当需要从<code>State</code>中派生出一些属性时，可以使用<code>Getters</code>,可以理解为<code>Vuex</code>中的<code>computer</code>方法 </p>
<h2 id="Mutations"><a href="#Mutations" class="headerlink" title="Mutations"></a><code>Mutations</code></h2><h2 id="Actions"><a href="#Actions" class="headerlink" title="Actions"></a><code>Actions</code></h2><h2 id="Modules"><a href="#Modules" class="headerlink" title="Modules"></a><code>Modules</code></h2><h1 id="路由设置Vue-router"><a href="#路由设置Vue-router" class="headerlink" title="路由设置Vue-router"></a>路由设置Vue-router</h1><h1 id="网络请求Axios"><a href="#网络请求Axios" class="headerlink" title="网络请求Axios"></a>网络请求Axios</h1><h1 id="使用第三方库"><a href="#使用第三方库" class="headerlink" title="使用第三方库"></a>使用第三方库</h1><h1 id="服务端渲染"><a href="#服务端渲染" class="headerlink" title="服务端渲染"></a>服务端渲染</h1><h1 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h1><h1 id="参考连接"><a href="#参考连接" class="headerlink" title="参考连接"></a>参考连接</h1><ul>
<li><a href="http://cn.vuejs.org/" target="_blank" rel="external">官方中文网站</a></li>
<li><a href="https://github.com/vuejs/vue-devtools" target="_blank" rel="external">debugger工具</a></li>
<li><a href="http://cn.vuejs.org/v2/api/#devtools" target="_blank" rel="external">使用debugger工具时，需开启devtools</a></li>
<li><a href="http://element.eleme.io/#/zh-CN" target="_blank" rel="external">element -Vue 2.0 的组件库</a></li>
<li><a href="https://www.zhihu.com/question/38213423" target="_blank" rel="external">国内有哪些公司在用Vue.js，有什么心得</a></li>
<li><a href="http://www.imooc.com/learn/796" target="_blank" rel="external">使用vue2.0实现购物车和地址选配功能</a></li>
<li><a href="https://www.iviewui.com/" target="_blank" rel="external">ivew一套基于 Vue.js 的高质量 UI 组件库</a></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[代码片段收集]]></title>
      <url>weison.org/2017/01/01/codeSnippets/</url>
      <content type="html"><![CDATA[<h1 id="性能优化类函数"><a href="#性能优化类函数" class="headerlink" title="性能优化类函数"></a>性能优化类函数</h1><ul>
<li>函数节流<br>在函数的调用不是由用户直接控制的情况下（如:<code>window.onresize</code>,<code>onmouseover</code>），函数有可以被频繁地调用而造成性能的消耗。<br>throttle 函数的原理是，将即将被执行的函数用setTimeout 延迟一段时间执行。如果该次延迟执行还没有完成，则忽略接下来调用该函数的请求。<br>throttle 函数接受 2 个参数，第一个参数为需要被延迟执行的函数，第二个参数为延迟执行的时<br>间。</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line">    <span class="keyword">var</span> throttle = <span class="function"><span class="keyword">function</span>(<span class="params">fn, interval</span>) </span>&#123;</div><div class="line"></div><div class="line">      <span class="keyword">var</span> __self = fn, <span class="comment">// 保存需要被延迟执行的函数引用</span></div><div class="line">          timer, <span class="comment">// 定时器         </span></div><div class="line">          firstTime = <span class="literal">true</span>; <span class="comment">// 是否是第一次调用  </span></div><div class="line"></div><div class="line">      <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">var</span> args = <span class="built_in">arguments</span>,</div><div class="line">          __me = <span class="keyword">this</span>;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (firstTime) &#123; <span class="comment">// 如果是第一次调用，不需延迟执行             </span></div><div class="line">          __self.apply(__me, args);</div><div class="line">          <span class="keyword">return</span> firstTime = <span class="literal">false</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (timer) &#123; <span class="comment">// 如果定时器还在，说明前一次延迟执行还没有完成</span></div><div class="line">          <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        timer = setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; <span class="comment">// 延迟一段时间执行             </span></div><div class="line">          clearTimeout(timer);</div><div class="line">          timer = <span class="literal">null</span>;</div><div class="line">          __self.apply(__me, args);</div><div class="line">        &#125;, interval || <span class="number">500</span>);</div><div class="line">      &#125;;</div><div class="line">    &#125;;</div><div class="line">    <span class="built_in">window</span>.onresize = throttle(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">      <span class="built_in">console</span>.log(<span class="number">1</span>);</div><div class="line">    &#125;, <span class="number">500</span>);</div><div class="line"></div><div class="line">  <span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></div></pre></td></tr></table></figure>
<p>参考连接</p>
<ul>
<li><a href="##">JavaScript设计模式与开发实践</a></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[左右滑动的导航栏]]></title>
      <url>weison.org/2016/12/25/scrollNav/</url>
      <content type="html"><![CDATA[<p>参考连接</p>
<ul>
<li><a href="http://m.vip.com/index.html" target="_blank" rel="external">唯品会导航</a></li>
<li><a href="https://jhs.m.taobao.com/m/list.html?_loc=JU_WAP_ALL&amp;spm=a2147.7632989.Topbar.dall" target="_blank" rel="external">聚划算</a></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[HTML5开发WebApp阅读器]]></title>
      <url>weison.org/2016/12/18/webAPPReader/</url>
      <content type="html"><![CDATA[<h1 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h1><h2 id="base64"><a href="#base64" class="headerlink" title="base64"></a>base64</h2><ul>
<li>减少请求，提高加载速度<br>格式: <code>url(data/image/png;base 64,{img_data})</code><br>缺点： </li>
<li>因为它是未经压缩的字符串，所以它会比原图更大</li>
<li>维护不太方便</li>
</ul>
<h2 id="利用css3制作图标"><a href="#利用css3制作图标" class="headerlink" title="利用css3制作图标"></a>利用css3制作图标</h2><ul>
<li>相比上base64制作图片，因为它只是通过简单的几行代码来实现，所以体积会更小</li>
<li>适应于制作一些规则的图片</li>
</ul>
<h2 id="html5新增的api"><a href="#html5新增的api" class="headerlink" title="html5新增的api"></a>html5新增的api</h2><h3 id="DOM操作"><a href="#DOM操作" class="headerlink" title="DOM操作"></a>DOM操作</h3><pre><code>`querySelector`
</code></pre><h3 id="本地数据缓存"><a href="#本地数据缓存" class="headerlink" title="本地数据缓存"></a>本地数据缓存</h3><pre><code>`localStroage`
`localStroage.getItme()`
`localStroage.setItme()`

`postMessage`跨域通信
</code></pre><h3 id="XHR2"><a href="#XHR2" class="headerlink" title="XHR2"></a>XHR2</h3><p><code>Access-Control-Allow-Origin:*</code></p>
<h3 id="contenteidtable"><a href="#contenteidtable" class="headerlink" title="contenteidtable"></a><code>contenteidtable</code></h3><h3 id="webWorker-后台计算线程"><a href="#webWorker-后台计算线程" class="headerlink" title="webWorker 后台计算线程"></a>webWorker 后台计算线程</h3><p>不能放ui相关的代码</p>
<h3 id="与硬件进行交互"><a href="#与硬件进行交互" class="headerlink" title="与硬件进行交互"></a>与硬件进行交互</h3><ul>
<li>定位服务</li>
<li><code>window.performance</code>页面性能监控<br><code>window.performace.timing</code>监控页面加载速度</li>
</ul>
<h2 id="触摸事件"><a href="#触摸事件" class="headerlink" title="触摸事件"></a>触摸事件</h2><p><code>touchstart</code> 触摸开始<br><code>touchmove</code>  触摸移动中<br><code>touchend</code>   触摸结束<br>假如在移动端同时定义了触摸事件和点击事件它们的顺序是<br>touchstart -&gt; click -&gt; touchmove - touchend,而不会触发mousedown,mousemove<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line">  <span class="comment">/**</span></div><div class="line">   * addEventLister中的false  https://developer.mozilla.org/zh-CN/docs/Web/API/EventTarget/addEventListener</div><div class="line">   * 是指在DOM树中，注册了该listener的元素，是否会先于它下方的任何事件目标，接收到该事件。沿着DOM树向上冒泡的事件不会触发被指定为use capture（也就是设为true）的listener。当一个元素嵌套了另一个元素，两个元素都对同一个事件注册了一个处理函数时，所发生的事件冒泡和事件捕获是两种不同的事件传播方式。事件传播模式决定了元素以哪个顺序接收事件。进一步的解释可以查看 事件流 及 JavaScript Event order 文档。 如果没有指定， useCapture 默认为 false 。 </div><div class="line">   */</div><div class="line">  body.addEventListener(<span class="string">'touchstart'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; <span class="built_in">console</span>.log(<span class="string">'touchStart'</span>) &#125;,<span class="literal">false</span>);</div><div class="line">  body.addEventListener(<span class="string">'touchmove'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; <span class="built_in">console</span>.log(<span class="string">'touchsMove'</span>) &#125;,<span class="literal">false</span>);</div><div class="line">  body.addEventListener(<span class="string">'touchend'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; <span class="built_in">console</span>.log(<span class="string">'touchend'</span>) &#125;,<span class="literal">false</span>);</div><div class="line"><span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></div></pre></td></tr></table></figure></p>
<h1 id="性能陷阱"><a href="#性能陷阱" class="headerlink" title="性能陷阱"></a>性能陷阱</h1><ol>
<li>减少或避免repaint（重绘）,reflow（回流） </li>
<li>尽量缓存所有可以缓存的数据</li>
<li>使用css3 transform代替DOM的动画和位移</li>
<li>不要给非static的定位元素增加css动画，因为增加后，性能消耗会成倍的增加</li>
<li>适合使用硬件加速，使用GUP进行层的渲染，如用canvas来画图或给元素添加<code>transform</code>属性(如:transform:translate3D(0,0,0))</li>
</ol>
<p>不把长串数字识别成字符串<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"format-detection"</span> <span class="attr">content</span>=<span class="string">"telephone=no"</span>/&gt;</span></div></pre></td></tr></table></figure></p>
<p>参考连接</p>
<ul>
<li><a href="http://coding.imooc.com/class/13.html" target="_blank" rel="external">HTML5开发WebApp阅读器</a></li>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/Guide/HTML/HTML5" target="_blank" rel="external">HTML5 新增内容</a></li>
<li><a href="http://blog.sina.com.cn/s/blog_51048da70101cgea.html" target="_blank" rel="external">Meta标签中的format-detection属性及含义</a></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[interviewQuestions]]></title>
      <url>weison.org/2016/12/11/interviewQuestions/</url>
      <content type="html"><![CDATA[<h1 id="原型与继承"><a href="#原型与继承" class="headerlink" title="原型与继承"></a>原型与继承</h1><ol>
<li>在String对象上定义一个<code>repeatify</code>函数。这个函数接受一个整数参数，来明确字符串需要重复几次。这个函数要求字符串重复指定的次数。举个例子：<code>console.log(&#39;hello&#39;.repeatify(3));</code>应该打印出<code>hellohellohello.</code></li>
</ol>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line">  <span class="built_in">String</span>.prototype.repeatify = <span class="built_in">String</span>.prototype.repeatify || <span class="function"><span class="keyword">function</span>(<span class="params">times</span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> str = <span class="string">''</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;times;i++)&#123;</div><div class="line">      <span class="comment">//这里的this指的是当前的字符串对象，当字符串对象与''相加会，会调用toString方法，</span></div><div class="line">      <span class="comment">//转换成普通字符串，再进行相关变会进行字符串拼接</span></div><div class="line">      str += <span class="keyword">this</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> str;</div><div class="line">  &#125;    </div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'hello'</span>.repeatify(<span class="number">3</span>)); <span class="comment">//hellohellohello</span></div><div class="line">&lt;<span class="regexp">/script&gt;</span></div></pre></td></tr></table></figure>
<p>这个问题测试了开发人员对于javascript中继承的掌握，以及prototype这个属性。这也验证了开发人员是否有能力扩展原生数据类型的功能（虽然不应该这么做）。<br>这个问题的另一个重点是验证你是否意识到并知道如何避免覆盖已经存在的函数。这可以通过在自定义函数之前判断该函数是否存在来做到。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line">  <span class="built_in">String</span>.prototype.repeatify = <span class="built_in">String</span>.prototype.repeatify || <span class="function"><span class="keyword">function</span>(<span class="params">times</span>) </span>&#123;<span class="comment">/* code here */</span>&#125;;</div><div class="line"><span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></div></pre></td></tr></table></figure></p>
<p>当你需要为旧浏览器实现向后兼容的函数时，这一技巧十分有用。</p>
<p>参考连接</p>
<ul>
<li><a href="http://www.zcfy.cc/article/5-typical-javascript-interview-exercises-1960.html" target="_blank" rel="external">五个典型的JavaScript面试题</a></li>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Strict_mode" target="_blank" rel="external">mdn - 严格模式</a></li>
<li><a href="http://www.ruanyifeng.com/blog/2013/01/javascript_strict_mode.html" target="_blank" rel="external"> 阮一峰 - Javascript 严格模式详解</a></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[prototype]]></title>
      <url>weison.org/2016/12/04/prototype/</url>
      <content type="html"><![CDATA[<h1 id="对象与函数自带的属性与方法"><a href="#对象与函数自带的属性与方法" class="headerlink" title="对象与函数自带的属性与方法"></a>对象与函数自带的属性与方法</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line">  Person = <span class="function"><span class="keyword">function</span>(<span class="params">name,age</span>)</span>&#123;</div><div class="line">    <span class="keyword">this</span>.name = name;</div><div class="line">    <span class="keyword">this</span>.age = age;</div><div class="line">  &#125;</div><div class="line">  Person.prototype.hi = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"hi my name is"</span> + <span class="keyword">this</span>.name+<span class="string">"I am"</span> + <span class="keyword">this</span>.age + <span class="string">"years old now"</span>);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">Student</span>(<span class="params">name,age,className</span>)</span>&#123;</div><div class="line">    <span class="comment">//调用Person方法，让studnet可以有this.name,this.age,但没有Person prototype属性上的方法</span></div><div class="line">    Person.call(<span class="keyword">this</span>,name,age);</div><div class="line">    <span class="keyword">this</span>.className = className;</div><div class="line">  &#125;</div><div class="line">  <span class="comment">//实现Person的继承，Object.create会创建一个空对象，并且这个对象的__proto__属性指向了Person.prototype</span></div><div class="line">  <span class="comment">//创建后Studnet.protoype.__proto__会指向Person.prototype</span></div><div class="line">  <span class="comment">//之所以不直接使用Stundent.prototype = Person.prototype是因为避免方法上的互相影响，</span></div><div class="line">  <span class="comment">//比如说在studnet上定义的方法变得在Person上也会有了</span></div><div class="line">  Student.prototype = <span class="built_in">Object</span>.create(Person.prototype);</div><div class="line">  Student.prototype.hi = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">     <span class="built_in">console</span>.log(<span class="string">"hi my name is"</span> + <span class="keyword">this</span>.name+<span class="string">"I am "</span> + <span class="keyword">this</span>.age + <span class="string">" years old now and from"</span>+ <span class="keyword">this</span>.className);</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">var</span> lilei = <span class="keyword">new</span> Student(<span class="string">'lilei'</span>,<span class="number">10</span>,<span class="string">"Class 1 Grade 5"</span>);</div><div class="line">  <span class="keyword">var</span> zhang = <span class="keyword">new</span> Person(<span class="string">'zhang'</span>,<span class="number">30</span>);</div><div class="line">  <span class="built_in">console</span>.log(lilei.hi);</div><div class="line">  <span class="built_in">console</span>.log(zhang.hi)</div><div class="line">&lt;<span class="regexp">/script&gt;</span></div></pre></td></tr></table></figure>
<h1 id="那些没有prototype的情况"><a href="#那些没有prototype的情况" class="headerlink" title="那些没有prototype的情况"></a>那些没有prototype的情况</h1><h1 id="prototype内容的修改"><a href="#prototype内容的修改" class="headerlink" title="prototype内容的修改"></a>prototype内容的修改</h1><p>当我们动态的修改prototype上的属性的时候，是会影响所有已经实例化的对象<br>但如果直接把prototype复制给一个新的对象，那么旧的实例不会受到影响，但接下来生成的对象会使用新的prototype<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line">  <span class="keyword">var</span> Person = <span class="function"><span class="keyword">function</span>(<span class="params">name</span>)</span>&#123;<span class="keyword">this</span>.name = name;&#125;</div><div class="line">  Person.prototype.hi = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; <span class="built_in">console</span>.log(<span class="string">'hi my name is '</span> + <span class="keyword">this</span>.name); &#125;</div><div class="line">  <span class="keyword">var</span> liang = <span class="keyword">new</span> Person(<span class="string">'liang'</span>);</div><div class="line">  liang.hi();<span class="comment">//hi my name is liang</span></div><div class="line"></div><div class="line">  <span class="comment">//可以对prototype进行新增或修改属性</span></div><div class="line">  Person.prototype.homes= <span class="string">'earth'</span>;</div><div class="line">  <span class="built_in">console</span>.log(liang.homes);<span class="comment">//earth</span></div><div class="line"></div><div class="line">  <span class="comment">//直接覆盖prototype对已实例化的对象不影响</span></div><div class="line">  Person.prototype = &#123;<span class="attr">x</span> : <span class="number">1</span>&#125;;</div><div class="line">  <span class="built_in">console</span>.log(liang.x);<span class="comment">//undefined</span></div><div class="line">  <span class="built_in">console</span>.log(liang.homes);<span class="comment">////earth</span></div><div class="line"></div><div class="line">  <span class="comment">//但是会影响接下来生成的实例</span></div><div class="line">  <span class="keyword">var</span> zhang = <span class="keyword">new</span> Person(<span class="string">'zhang'</span>); </div><div class="line">  <span class="built_in">console</span>.log(zhang.x) <span class="comment">// =&gt; 1</span></div><div class="line">  <span class="built_in">console</span>.log(zhang.hi()); <span class="comment">// =&gt; Uncaught TypeError: zhang.hi is not a function(…)</span></div><div class="line">&lt;<span class="regexp">/script&gt;</span></div></pre></td></tr></table></figure></p>
<h1 id="内置的构造函数也会有prototype属性"><a href="#内置的构造函数也会有prototype属性" class="headerlink" title="内置的构造函数也会有prototype属性"></a>内置的构造函数也会有<code>prototype</code>属性</h1><p>如<code>Object</code>,<code>Boolean</code>,<code>Numer</code></p>
<p>参考链接</p>
<ul>
<li><a href="http://www.imooc.com/learn/277" target="_blank" rel="external">JavaScript深入浅出</a></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[promise]]></title>
      <url>weison.org/2016/10/30/promise/</url>
      <content type="html"><![CDATA[<p><code>promise</code>是commonJs的一种规范，它是JS中异步操作方式,<code>Jquery</code>的<code>deferred</code>就是使用了该规范，而在新版本的<code>ecmaScript 6</code>中已经加入了原生的promise。<br><code>promise</code>允许异步是可以按一步顺序出现的</p>
<h1 id="ecmaScript"><a href="#ecmaScript" class="headerlink" title="ecmaScript"></a>ecmaScript</h1><h2 id="状态"><a href="#状态" class="headerlink" title="状态"></a>状态</h2><p>pending(等待)-&gt;resolve(成功)-&gt;reject(失败)<br>成功的状态会调用成功对应的函数，失败的状态会调失败的函数</p>
<h2 id="then"><a href="#then" class="headerlink" title="then"></a><code>then</code></h2><p>它是属于<code>promise</code>构造函数原型链上的一个方法<code>Promise.prototype.then=funciton(){}</code>,所以如果希望在外部调用的话，只要在函数执行完成后<code>return</code>这个<code>promise</code>对象即可<br>调用<code>resolve</code>和<code>reject</code>状态所对应的回调函数<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line"> <span class="function"><span class="keyword">function</span> <span class="title">show</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="keyword">var</span> promise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve,reject</span>)</span>&#123;</div><div class="line">    setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">      resolve(); <span class="comment">// 注意这里的resolve和reject都是函数</span></div><div class="line">    &#125;,<span class="number">1000</span>);</div><div class="line">  &#125;);</div><div class="line">  <span class="keyword">return</span> promise;</div><div class="line"> &#125;</div><div class="line"> show().then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="comment">//成功状态的回调</span></div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'成功了'</span>);</div><div class="line"> &#125;,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">   <span class="comment">//失败状态的回调</span></div><div class="line">   <span class="built_in">console</span>.log(<span class="string">'失败了'</span>);</div><div class="line"> &#125;)</div><div class="line">&lt;<span class="regexp">/script&gt;</span></div></pre></td></tr></table></figure></p>
<p>利用promise利用链式操作，实现任务队列式执行<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line"> <span class="function"><span class="keyword">function</span> <span class="title">show</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="keyword">var</span> promise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve,reject</span>)</span>&#123;</div><div class="line">    setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">      resolve();</div><div class="line">    &#125;,<span class="number">1000</span>);</div><div class="line">  &#125;);</div><div class="line">  <span class="keyword">return</span> promise;</div><div class="line"> &#125;</div><div class="line"></div><div class="line"> <span class="comment">//利用promise利用链式操作，实现任务队列式执行</span></div><div class="line"> show().then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">      <span class="built_in">console</span>.log(<span class="string">'成功1'</span>);</div><div class="line">      <span class="keyword">return</span> show(); <span class="comment">//返回show函数的执行结果，因为show函数return了promise的实例，因此实现了链式操作</span></div><div class="line"> &#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">     <span class="built_in">console</span>.log(<span class="string">'成功2'</span>);</div><div class="line">     <span class="keyword">return</span> show()</div><div class="line"> &#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">      <span class="built_in">console</span>.log(<span class="string">'成功3'</span>);</div><div class="line">      <span class="keyword">return</span> show()</div><div class="line"> &#125;)</div><div class="line"></div><div class="line">&lt;<span class="regexp">/script&gt;</span></div></pre></td></tr></table></figure></p>
<h2 id="catch"><a href="#catch" class="headerlink" title="catch"></a><code>catch</code></h2><p>用于接受失败的回调，或者充当<code>then</code>的第二个回调函数(reject)<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">show</span>(<span class="params"></span>)</span>&#123;</div><div class="line">   <span class="keyword">var</span> promise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve,reject</span>)</span>&#123;</div><div class="line">     setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">       reject();</div><div class="line">     &#125;,<span class="number">1000</span>)</div><div class="line">   &#125;)</div><div class="line">   <span class="keyword">return</span> promise;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  show().then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">       <span class="built_in">console</span>.log(<span class="string">'成功1'</span>);</div><div class="line">  &#125;).catch(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">       <span class="built_in">console</span>.log(<span class="string">'失败'</span>);</div><div class="line">       <span class="keyword">return</span> show()</div><div class="line">  &#125;)</div><div class="line">   <span class="comment">//因为then方法的resolve是必填的，所以如果只想接收失败的情况，可以写成</span></div><div class="line">   show().catch(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'失败'</span>);</div><div class="line">        <span class="keyword">return</span> show()</div><div class="line">   &#125;)</div><div class="line"></div><div class="line">&lt;<span class="regexp">/script&gt;</span></div></pre></td></tr></table></figure></p>
<h2 id="all"><a href="#all" class="headerlink" title="all"></a><code>all</code></h2><p>多个异步操作的函数都返回正确之后再执行回调函数<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">show1</span>(<span class="params"></span>)</span>&#123;</div><div class="line">   <span class="keyword">var</span> promise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve,reject</span>)</span>&#123;</div><div class="line">     setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">       resolve();</div><div class="line">       <span class="built_in">console</span>.log(<span class="string">'show1执行完成'</span>);</div><div class="line">     &#125;,<span class="number">1000</span>)</div><div class="line">   &#125;)</div><div class="line">   <span class="keyword">return</span> promise;</div><div class="line">  &#125;</div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">show2</span>(<span class="params"></span>)</span>&#123;</div><div class="line">   <span class="keyword">var</span> promise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve,reject</span>)</span>&#123;</div><div class="line">     setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">       resolve();</div><div class="line">       <span class="built_in">console</span>.log(<span class="string">'show2执行完成'</span>);</div><div class="line">     &#125;,<span class="number">2000</span>)</div><div class="line">   &#125;)</div><div class="line">   <span class="keyword">return</span> promise;</div><div class="line">  &#125;</div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">show3</span>(<span class="params"></span>)</span>&#123;</div><div class="line">   <span class="keyword">var</span> promise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve,reject</span>)</span>&#123;</div><div class="line">     setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">       resolve();</div><div class="line">       <span class="built_in">console</span>.log(<span class="string">'show3执行完成'</span>);</div><div class="line">     &#125;,<span class="number">3000</span>)</div><div class="line">   &#125;)</div><div class="line">   <span class="keyword">return</span> promise;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">var</span> all = <span class="built_in">Promise</span>.all([show1(),show2(),show3()]);</div><div class="line">  all.then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">   <span class="built_in">console</span>.log(<span class="string">'全部执行完毕'</span>);</div><div class="line">  &#125;)</div><div class="line">&lt;<span class="regexp">/script&gt;</span></div></pre></td></tr></table></figure></p>
<h2 id="race只要有其中的回调状态是成功的，那就会执行race里的方法"><a href="#race只要有其中的回调状态是成功的，那就会执行race里的方法" class="headerlink" title="race只要有其中的回调状态是成功的，那就会执行race里的方法"></a><code>race</code>只要有其中的回调状态是成功的，那就会执行<code>race</code>里的方法</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">show1</span>(<span class="params"></span>)</span>&#123;</div><div class="line">   <span class="keyword">var</span> promise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve,reject</span>)</span>&#123;</div><div class="line">     setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">       resolve();</div><div class="line">       <span class="built_in">console</span>.log(<span class="string">'show1执行完成'</span>);</div><div class="line">     &#125;,<span class="number">1000</span>)</div><div class="line">   &#125;)</div><div class="line">   <span class="keyword">return</span> promise;</div><div class="line">  &#125;</div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">show2</span>(<span class="params"></span>)</span>&#123;</div><div class="line">   <span class="keyword">var</span> promise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve,reject</span>)</span>&#123;</div><div class="line">     setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">       reject(); <span class="comment">//失败状态</span></div><div class="line">       <span class="built_in">console</span>.log(<span class="string">'show2执行完成'</span>);</div><div class="line">     &#125;,<span class="number">2000</span>)</div><div class="line">   &#125;)</div><div class="line">   <span class="keyword">return</span> promise;</div><div class="line">  &#125;</div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">show3</span>(<span class="params"></span>)</span>&#123;</div><div class="line">   <span class="keyword">var</span> promise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve,reject</span>)</span>&#123;</div><div class="line">     setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">       resolve();</div><div class="line">       <span class="built_in">console</span>.log(<span class="string">'show3执行完成'</span>);</div><div class="line">     &#125;,<span class="number">3000</span>)</div><div class="line">   &#125;)</div><div class="line">   <span class="keyword">return</span> promise;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">var</span> all = <span class="built_in">Promise</span>.race([show1(),show2(),show3()]);</div><div class="line">  all.then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">   <span class="built_in">console</span>.log(<span class="string">'全部执行完毕'</span>);</div><div class="line">  &#125;)</div><div class="line">&lt;<span class="regexp">/script&gt;</span></div></pre></td></tr></table></figure>
<h1 id="Jquery下Deferred"><a href="#Jquery下Deferred" class="headerlink" title="Jquery下Deferred"></a>Jquery下<code>Deferred</code></h1><h2 id="then-1"><a href="#then-1" class="headerlink" title="then"></a><code>then</code></h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line">   <span class="function"><span class="keyword">function</span> <span class="title">show</span>(<span class="params"></span>)</span>&#123;</div><div class="line">     <span class="keyword">var</span> def = $.Deferred(); <span class="comment">//声明延时对象</span></div><div class="line">     setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">       <span class="built_in">console</span>.log(<span class="string">'show执行完成'</span>);</div><div class="line">       def.resolve(); <span class="comment">//改变状态</span></div><div class="line">     &#125;,<span class="number">1000</span>);</div><div class="line">     <span class="keyword">return</span> def; <span class="comment">//返回promise对象</span></div><div class="line">   &#125;</div><div class="line">   show().then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">     <span class="built_in">console</span>.log(<span class="string">'resolve成功'</span>)</div><div class="line">   &#125;)</div><div class="line"> &lt;<span class="regexp">/script&gt;</span></div></pre></td></tr></table></figure>
<h2 id="done成功状态与fail失败状态"><a href="#done成功状态与fail失败状态" class="headerlink" title="done成功状态与fail失败状态"></a><code>done</code>成功状态与<code>fail</code>失败状态</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">show</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> def = $.Deferred();</div><div class="line">    setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">      <span class="built_in">console</span>.log(<span class="string">'show执行完成'</span>);</div><div class="line">      def.reject()</div><div class="line">    &#125;,<span class="number">1000</span>);</div><div class="line">    <span class="keyword">return</span> def;</div><div class="line">  &#125;</div><div class="line">  show().done(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'成功'</span>)</div><div class="line">  &#125;).fail(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'失败'</span>)</div><div class="line">  &#125;)</div><div class="line">&lt;<span class="regexp">/script&gt;</span></div></pre></td></tr></table></figure>
<h2 id="when-函数1-，函数2-then-对应all方法"><a href="#when-函数1-，函数2-then-对应all方法" class="headerlink" title="when(函数1()，函数2()).then()对应all方法"></a><code>when(函数1()，函数2()).then()</code>对应<code>all</code>方法</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">f1</span>(<span class="params"></span>)</span>&#123;</div><div class="line">   <span class="keyword">var</span> def = $.Deferred();</div><div class="line">   setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">     <span class="built_in">console</span>.log(<span class="string">'f1'</span>);</div><div class="line">     def.resolve();</div><div class="line">   &#125;,<span class="number">1000</span>);</div><div class="line">   <span class="keyword">return</span> def;</div><div class="line">  &#125;</div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">f2</span>(<span class="params"></span>)</span>&#123;</div><div class="line">   <span class="keyword">var</span> def = $.Deferred();</div><div class="line">   setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">     <span class="built_in">console</span>.log(<span class="string">'f2'</span>);</div><div class="line">     def.resolve();</div><div class="line">   &#125;,<span class="number">2000</span>);</div><div class="line">   <span class="keyword">return</span> def;</div><div class="line">  &#125;</div><div class="line">  $.when(f1(),f2()).then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">   <span class="built_in">console</span>.log(<span class="string">'全部执行成功'</span>);</div><div class="line">  &#125;)</div><div class="line">&lt;<span class="regexp">/script&gt;</span></div></pre></td></tr></table></figure>
<h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><ol>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Promise#概述" target="_blank" rel="external">mdn promise</a></li>
<li><a href="http://es6.ruanyifeng.com/#docs/promise" target="_blank" rel="external">阮一峰 - Promise对象</a></li>
<li><a href="http://www.ruanyifeng.com/blog/2011/08/a_detailed_explanation_of_jquery_deferred_object.html" target="_blank" rel="external">jQuery的deferred对象详解</a></li>
<li><a href="http://www.ruanyifeng.com/blog/2012/12/asynchronous%EF%BC%BFjavascript.html" target="_blank" rel="external">Javascript异步编程的4种方法</a></li>
<li>妙味课堂-2015年7月30日论坛问题解答（2）</li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[实例]]></title>
      <url>weison.org/2016/10/29/explames/</url>
      <content type="html"><![CDATA[<ul>
<li><p>获取选中的文字内容并分享到微博<br>在ie下使用<code>document.getSelection.createRange().text</code>，在标准浏览器下使用<code>window.getSelection().toString()</code>来获取选中的文字内容</p>
<iframe scrolling="no" width="100%" height="300" src="http://jsfiddle.net/cq1bqL91/embedded/js,resources,html,css,result/light" frameborder="0" allowfullscreen></iframe>
</li>
<li><p>联动日历</p>
</li>
</ul>
<ol>
<li>table在ie下，如果使用innerHTML来创建内部的子元素，如<code>thead</code>等，是不行的</li>
<li>判断闰年的方法</li>
<li><code>setDate()</code> 设置时间对象的当前日期</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line">  <span class="keyword">var</span> time = <span class="keyword">new</span> <span class="built_in">Date</span>();</div><div class="line">  <span class="built_in">console</span>.log(time.getDay());</div><div class="line">  time.setDate(<span class="number">1</span>);</div><div class="line">  <span class="built_in">console</span>.log(time.getDay());    </div><div class="line"><span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></div></pre></td></tr></table></figure>
<p>参考链接<br><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Date/setDate" target="_blank" rel="external">Date.prototype.setDate()</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[fullpage]]></title>
      <url>weison.org/2016/10/07/fullpage/</url>
      <content type="html"><![CDATA[<h1 id="引入资源文件"><a href="#引入资源文件" class="headerlink" title="引入资源文件"></a>引入资源文件</h1><h1 id="api"><a href="#api" class="headerlink" title="api"></a>api</h1><h2 id="onLeave"><a href="#onLeave" class="headerlink" title="onLeave"></a><code>onLeave</code></h2><p>离开页面时触发</p>
<h2 id="afterLoad"><a href="#afterLoad" class="headerlink" title="afterLoad"></a><code>afterLoad</code></h2><p>当下一个页面载入完成后触发</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[定时器的原理与应用]]></title>
      <url>weison.org/2016/10/04/timers/</url>
      <content type="html"><![CDATA[<p>设定一个时间，当时间到达后执行指定的操作，就叫定时器<br><a id="more"></a></p>
<h1 id="setInterval"><a href="#setInterval" class="headerlink" title="setInterval"></a><code>setInterval</code></h1><p>周期性地调用一个函数(function)或者执行一段代码。</p>
<h1 id="setTimeout"><a href="#setTimeout" class="headerlink" title="setTimeout"></a><code>setTimeout</code></h1><p>在指定的延迟时间之后调用一个函数或执行一个代码片段.</p>
<p>定时器的返回值是一个数字，代表是第几个定时器.<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line">  <span class="keyword">var</span> timer1 = setInterval(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;,<span class="number">1000</span>);</div><div class="line">  <span class="keyword">var</span> timer2 = setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;,<span class="number">1000</span>);</div><div class="line">  <span class="built_in">console</span>.log(timer1,timer2); <span class="comment">// =&gt;  1 2</span></div><div class="line">&lt;<span class="regexp">/script&gt;</span></div></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Math]]></title>
      <url>weison.org/2016/10/02/Math/</url>
      <content type="html"><![CDATA[<h3 id="Math-abs-绝对值"><a href="#Math-abs-绝对值" class="headerlink" title="Math.abs() 绝对值"></a><code>Math.abs()</code> 绝对值</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line">  <span class="built_in">Math</span>.abs(<span class="number">-2</span>); <span class="comment">// =&gt; 2    </span></div><div class="line">  <span class="built_in">Math</span>.abs(<span class="number">2</span>); <span class="comment">// =&gt; 2    </span></div><div class="line">&lt;<span class="regexp">/script&gt;</span></div></pre></td></tr></table></figure>
<h3 id="Math-ceil-向上取整"><a href="#Math-ceil-向上取整" class="headerlink" title="Math.ceil()向上取整"></a><code>Math.ceil()</code>向上取整</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line"><span class="built_in">Math</span>.ceil(<span class="number">1.00001</span>); <span class="comment">// =&gt; 2    </span></div><div class="line"><span class="built_in">Math</span>.ceil(<span class="number">5.5</span>); <span class="comment">// =&gt; 6    </span></div><div class="line"><span class="built_in">Math</span>.ceil(<span class="number">-5.5</span>); <span class="comment">// =&gt; -5 </span></div><div class="line"><span class="built_in">Math</span>.ceil(<span class="number">-5.7</span>); <span class="comment">// =&gt; -5</span></div><div class="line">&lt;<span class="regexp">/script&gt;</span></div></pre></td></tr></table></figure>
<h3 id="Math-floor-向下取整"><a href="#Math-floor-向下取整" class="headerlink" title="Math.floor()向下取整"></a><code>Math.floor()</code>向下取整</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line">  <span class="built_in">Math</span>.floor(<span class="number">5.5</span>); <span class="comment">//=&gt; 5</span></div><div class="line">  <span class="built_in">Math</span>.floor(<span class="number">-5.5</span>); <span class="comment">// =&gt; -6</span></div><div class="line">&lt;<span class="regexp">/script&gt;</span></div></pre></td></tr></table></figure>
<h3 id="Math-max-val1-val2-求最大值"><a href="#Math-max-val1-val2-求最大值" class="headerlink" title="Math.max(val1,val2...)求最大值"></a><code>Math.max(val1,val2...)</code>求最大值</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line">  <span class="built_in">Math</span>.max(<span class="number">10</span>,<span class="number">20</span>,<span class="number">99</span>,<span class="number">-10</span>); <span class="comment">// =&gt; 99    </span></div><div class="line">&lt;<span class="regexp">/script&gt;</span></div></pre></td></tr></table></figure>
<h3 id="Math-min-val1-val2-求最小值"><a href="#Math-min-val1-val2-求最小值" class="headerlink" title="Math.min(val1,val2...) 求最小值"></a><code>Math.min(val1,val2...)</code> 求最小值</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line">  <span class="built_in">Math</span>.min(<span class="number">10</span>,<span class="number">20</span>,<span class="number">99</span>,<span class="number">-10</span>); <span class="comment">// =&gt; -10  </span></div><div class="line">&lt;<span class="regexp">/script&gt;</span></div></pre></td></tr></table></figure>
<h3 id="Math-round-四舍五入"><a href="#Math-round-四舍五入" class="headerlink" title="Math.round() 四舍五入"></a><code>Math.round()</code> 四舍五入</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line">  <span class="built_in">Math</span>.round(<span class="number">-5.5</span>); <span class="comment">// =&gt; -5</span></div><div class="line">  <span class="built_in">Math</span>.round(<span class="number">-5.4</span>); <span class="comment">// =&gt; -5</span></div><div class="line">  <span class="built_in">Math</span>.round(<span class="number">-5.6</span>); <span class="comment">// =&gt; -6</span></div><div class="line">  <span class="built_in">Math</span>.round(<span class="number">5.5</span>); <span class="comment">// =&gt; 6</span></div><div class="line">&lt;<span class="regexp">/script&gt;</span></div></pre></td></tr></table></figure>
<h3 id="Math-random-生成-0-1-的小数（包含0，不包含1）"><a href="#Math-random-生成-0-1-的小数（包含0，不包含1）" class="headerlink" title="Math.random()生成[0,1)的小数（包含0，不包含1）"></a><code>Math.random()</code>生成[0,1)的小数（包含0，不包含1）</h3><p>生成范围数[m,n]的方法<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line">  <span class="keyword">var</span> getRandom = <span class="function"><span class="keyword">function</span>(<span class="params">m,n</span>)</span>&#123;</div><div class="line">    <span class="comment">//判断传入的数值是否为数字，如果不是，则返回一个随机数</span></div><div class="line">    <span class="keyword">var</span> m1 = <span class="built_in">Number</span>(m),</div><div class="line">        n1 = <span class="built_in">Number</span>(n);</div><div class="line">    <span class="keyword">if</span>(<span class="built_in">isNaN</span>(m1) || <span class="built_in">isNaN</span>(n1) )&#123;</div><div class="line">      <span class="keyword">return</span> <span class="built_in">Math</span>.random();</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//默认n要比m大，否则要交换位置</span></div><div class="line">    <span class="keyword">if</span>(m&gt;n)&#123;</div><div class="line">      <span class="keyword">var</span> tmp = m;</div><div class="line">      m = n;</div><div class="line">      n = tmp;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="built_in">Math</span>.round(<span class="built_in">Math</span>.random()*(m-n) + n );</div><div class="line">  &#125;</div><div class="line">&lt;<span class="regexp">/script&gt;</span></div></pre></td></tr></table></figure></p>
<h3 id="生成不重复的N个数"><a href="#生成不重复的N个数" class="headerlink" title="生成不重复的N个数"></a>生成不重复的N个数</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line">   <span class="keyword">var</span> getRandom = <span class="function"><span class="keyword">function</span>(<span class="params">m,n</span>)</span>&#123;</div><div class="line">    <span class="comment">//判断传入的数值是否为数字，如果不是，则返回一个随机数</span></div><div class="line">    <span class="keyword">var</span> m1 = <span class="built_in">Number</span>(m),</div><div class="line">        n1 = <span class="built_in">Number</span>(n);</div><div class="line">    <span class="keyword">if</span>(<span class="built_in">isNaN</span>(m1) || <span class="built_in">isNaN</span>(n1) )&#123;</div><div class="line">      <span class="keyword">return</span> <span class="built_in">Math</span>.random();</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//默认n要比m大，否则要交换位置</span></div><div class="line">    <span class="keyword">if</span>(m&gt;n)&#123;</div><div class="line">      <span class="keyword">var</span> tmp = m;</div><div class="line">      m = n;</div><div class="line">      n = tmp;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="built_in">Math</span>.round(<span class="built_in">Math</span>.random()*(m-n) + n );</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">var</span> getRandomArr = <span class="function"><span class="keyword">function</span>(<span class="params">len,m,n</span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> arr = [],</div><div class="line">        obj = &#123;&#125;;</div><div class="line">    <span class="keyword">if</span>( (n-m) &lt; len)&#123;</div><div class="line">      <span class="built_in">console</span>.log(<span class="string">'数据范围小于需生成的数字个数'</span>);</div><div class="line">      <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">while</span>(arr.length&lt;len)&#123;</div><div class="line">        cur = getRandom(m,n);</div><div class="line">        <span class="keyword">if</span>(obj[cur])&#123;</div><div class="line">           <span class="keyword">continue</span>;</div><div class="line">        &#125;</div><div class="line">         obj[cur] = cur;</div><div class="line">         arr.push(cur);</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">console</span>.log(arr);</div><div class="line">    obj = <span class="literal">null</span>;</div><div class="line">    <span class="keyword">return</span> arr;</div><div class="line">  &#125;</div><div class="line">  getRandomArr(<span class="number">5</span>,<span class="number">1</span>,<span class="number">4</span>);</div><div class="line"><span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[数据类型]]></title>
      <url>weison.org/2016/09/15/dataType/</url>
      <content type="html"><![CDATA[<h2 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h2><h3 id="Number数字类型"><a href="#Number数字类型" class="headerlink" title="Number数字类型"></a><code>Number</code>数字类型</h3><p>包含了正数、负数、0，小数，<code>NAN</code>(not a number)不是一个有效的数字，但他还是属于<code>number</code>数据类型的，而且<code>NAN == NAN</code>是<code>fasle</code></p>
<h4 id="Number-强制转换为数字类型"><a href="#Number-强制转换为数字类型" class="headerlink" title="Number()强制转换为数字类型"></a><code>Number()</code>强制转换为数字类型</h4><p>要求待转换的数据一定都是都是数字，否则会返回<code>NaN</code><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line">  <span class="built_in">Number</span>(<span class="string">'123131'</span>); <span class="comment">// =&gt; 123131 </span></div><div class="line">  <span class="built_in">Number</span>(<span class="string">'20A'</span>); <span class="comment">// =&gt; `NaN` </span></div><div class="line">&lt;<span class="regexp">/script&gt;</span></div></pre></td></tr></table></figure></p>
<h4 id="paerInt-parseFloat-非强制性数据转换"><a href="#paerInt-parseFloat-非强制性数据转换" class="headerlink" title="paerInt()/parseFloat()非强制性数据转换"></a><code>paerInt()/parseFloat()</code>非强制性数据转换</h4><p>从左到右，逐个查找字符串，中途遇到非有效数字，就不再继续查找<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line">  <span class="built_in">parseInt</span>(<span class="string">'13.1a'</span>); <span class="comment">// =&gt; 13</span></div><div class="line">  <span class="built_in">parseFloat</span>(<span class="string">'13.1a'</span>); <span class="comment">// =&gt; 13.1</span></div><div class="line">  <span class="built_in">parseFloat</span>(<span class="string">'a13.1'</span>); <span class="comment">// =&gt; NaN</span></div><div class="line">&lt;<span class="regexp">/script&gt;</span></div></pre></td></tr></table></figure></p>
<h4 id="isNaN"><a href="#isNaN" class="headerlink" title="isNaN()"></a><code>isNaN()</code></h4><p>检测一个数字是否有效数据</p>
<ul>
<li><code>true</code> 不是有效数字</li>
<li><code>false</code> 是有效数字<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line">  <span class="built_in">isNaN</span>(<span class="number">1</span>); <span class="comment">// =&gt; false</span></div><div class="line">  <span class="built_in">isNaN</span>(<span class="string">'1a'</span>); <span class="comment">// =&gt; true</span></div><div class="line">&lt;<span class="regexp">/script&gt;</span></div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="Boolean-布尔类型"><a href="#Boolean-布尔类型" class="headerlink" title="Boolean 布尔类型"></a><code>Boolean</code> 布尔类型</h3><p><code>!</code> 取反，首先将类型转换成Boolean类型的，然后再取反<br><code>!!</code> 将其它数据类型转换成Boolean类型，相当于<code>Boolean()</code></p>
<h4 id="一个值-val1-进行判断时为false的情况"><a href="#一个值-val1-进行判断时为false的情况" class="headerlink" title="一个值(!val1)进行判断时为false的情况"></a>一个值(!val1)进行判断时为<code>false</code>的情况</h4><ul>
<li>0</li>
<li>“” 空字符串</li>
<li>null </li>
<li>undefined</li>
<li>NaN</li>
</ul>
<h4 id="两个值-val1-val2-进行-比较时"><a href="#两个值-val1-val2-进行-比较时" class="headerlink" title="两个值( val1 == val2 )进行 == 比较时"></a>两个值( val1 == val2 )进行 == 比较时</h4><p>假如数据类型不一样，默认会进行数据类型转换</p>
<h5 id="对象对比时，永远不相等-因为是声明了两个不同的数组，会存放在不同的内存位置上"><a href="#对象对比时，永远不相等-因为是声明了两个不同的数组，会存放在不同的内存位置上" class="headerlink" title="对象对比时，永远不相等(因为是声明了两个不同的数组，会存放在不同的内存位置上)"></a>对象对比时，永远不相等(因为是声明了两个不同的数组，会存放在不同的内存位置上)</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line">  [] == [] <span class="comment">// =》 false </span></div><div class="line">  &#123;&#125; == &#123;&#125; <span class="comment">// =》 false</span></div><div class="line">  (<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125; == <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;) <span class="comment">// =&gt; false</span></div><div class="line">&lt;<span class="regexp">/script&gt;</span></div></pre></td></tr></table></figure>
<h5 id="对象与字符串进行比较，先调用对象的toString-转换成字符串，再进行比较"><a href="#对象与字符串进行比较，先调用对象的toString-转换成字符串，再进行比较" class="headerlink" title="对象与字符串进行比较，先调用对象的toString()转换成字符串，再进行比较"></a>对象与字符串进行比较，先调用对象的<code>toString()</code>转换成字符串，再进行比较</h5><ol>
<li><code>([].toString()) =&gt; &quot;&quot;</code>  空数组转换成字符串，会变成空字符串</li>
<li><code>({}.toString()) =&gt; &quot;[object Object]&quot;</code> 空对象转换成字符串，会变成 <code>&quot;[object Object]&quot;</code></li>
</ol>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line">  [<span class="number">1</span>,[<span class="number">2</span>,&#123;<span class="attr">name</span> : <span class="string">'weison'</span>&#125;],<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;].toString(); <span class="comment">// =&gt; "1,2,[object Object],function ()&#123;&#125;"</span></div><div class="line">&lt;<span class="regexp">/script&gt;</span></div></pre></td></tr></table></figure>
<h5 id="对象与布尔值进行比较"><a href="#对象与布尔值进行比较" class="headerlink" title="对象与布尔值进行比较"></a>对象与布尔值进行比较</h5><ol>
<li>先调用对象的<code>toString()</code>方法，把对象转换成字符({} =&gt; “[object Object]” ,[] =&gt; “” )</li>
<li>再把字符串调用<code>Number()</code>方法，转换成数字(空字符串转换成数字，结果为0,<code>Number(&quot;&quot;); //=&gt; 0</code>)</li>
<li>然后再布尔值转换成数字，<code>true</code>转换成<code>1</code>，<code>false</code>转换成<code>0</code></li>
<li>最后再进行比较</li>
</ol>
<h5 id="对象与数字进行比较"><a href="#对象与数字进行比较" class="headerlink" title="对象与数字进行比较"></a>对象与数字进行比较</h5><ol>
<li>先调用对象的<code>toString()</code>方法，把对象转换成字符</li>
<li>再把字符串调用<code>Number()</code>方法，转换成数字(空字符串转换成数字，结果为0,<code>Number(&quot;&quot;); //=&gt; 0</code>)</li>
<li>最后再进行比较</li>
</ol>
<h5 id="数字与布尔值进行比较"><a href="#数字与布尔值进行比较" class="headerlink" title="数字与布尔值进行比较"></a>数字与布尔值进行比较</h5><ol>
<li>布尔值转换成数字，<code>true</code>转换成<code>1</code>，<code>false</code>转换成<code>0</code></li>
<li>进行比较</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line">   <span class="number">2</span> == <span class="literal">true</span>; <span class="comment">// =&gt; false</span></div><div class="line">&lt;<span class="regexp">/script&gt;</span></div></pre></td></tr></table></figure>
<h5 id="数字与字符串进行比较"><a href="#数字与字符串进行比较" class="headerlink" title="数字与字符串进行比较"></a>数字与字符串进行比较</h5><ol>
<li>字符串转换为数字（<code>Number()</code>）</li>
<li>进行比较</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line">   <span class="number">2</span> == <span class="string">"2"</span>; <span class="comment">// =&gt; true</span></div><div class="line">&lt;<span class="regexp">/script&gt;</span></div></pre></td></tr></table></figure>
<h5 id="布尔值与字符串进行比较"><a href="#布尔值与字符串进行比较" class="headerlink" title="布尔值与字符串进行比较"></a>布尔值与字符串进行比较</h5><ol>
<li>都转换成数字再进行比较</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line">   <span class="literal">true</span> == <span class="string">"1"</span>; <span class="comment">// =&gt; true</span></div><div class="line">&lt;<span class="regexp">/script&gt;</span></div></pre></td></tr></table></figure>
<h5 id="null与-undefined进行比较为true"><a href="#null与-undefined进行比较为true" class="headerlink" title="null与 undefined进行比较为true"></a><code>null</code>与 <code>undefined</code>进行比较为<code>true</code></h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line">  <span class="literal">null</span> == <span class="literal">undefined</span> ; <span class="comment">//=&gt; true</span></div><div class="line">&lt;<span class="regexp">/script&gt;</span></div></pre></td></tr></table></figure>
<h5 id="null或-undefined与其它数据进行比较，都为false"><a href="#null或-undefined与其它数据进行比较，都为false" class="headerlink" title="null或 undefined与其它数据进行比较，都为false"></a><code>null</code>或 <code>undefined</code>与其它数据进行比较，都为<code>false</code></h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line">  <span class="literal">null</span> == <span class="literal">false</span> ; <span class="comment">//=&gt; false</span></div><div class="line">  <span class="literal">null</span> == <span class="literal">true</span> ; <span class="comment">//=&gt; false</span></div><div class="line">  <span class="literal">undefined</span> == <span class="literal">true</span> ; <span class="comment">//=&gt; false</span></div><div class="line">  <span class="literal">undefined</span> == <span class="literal">false</span> ; <span class="comment">//=&gt; false</span></div><div class="line">&lt;<span class="regexp">/script&gt;</span></div></pre></td></tr></table></figure>
<h4 id="两个值-val1-val2-进行-比较时-会进行绝对比较"><a href="#两个值-val1-val2-进行-比较时-会进行绝对比较" class="headerlink" title="两个值( val1 === val2 )进行 === 比较时,会进行绝对比较"></a>两个值( val1 === val2 )进行 === 比较时,会进行绝对比较</h4><p>只有是类型不相等都为<code>false</code>,它不会进行数据类型转换</p>
<h2 id="引用数据类型"><a href="#引用数据类型" class="headerlink" title="引用数据类型"></a>引用数据类型</h2><h3 id="对象数据类型"><a href="#对象数据类型" class="headerlink" title="对象数据类型"></a>对象数据类型</h3><p>由多个键值对构成，用于描述这个对象的特征<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line">  <span class="keyword">var</span> person = &#123;</div><div class="line">    <span class="attr">name</span> : <span class="string">'weison'</span>,</div><div class="line">    <span class="attr">age</span> : <span class="number">20</span>,</div><div class="line">    <span class="attr">country</span> : <span class="string">'china'</span></div><div class="line">  &#125;</div><div class="line">&lt;<span class="regexp">/script&gt;</span></div></pre></td></tr></table></figure></p>
<h4 id="创建方式"><a href="#创建方式" class="headerlink" title="创建方式"></a>创建方式</h4><ol>
<li>字面量（从字面上看，就知道是创建）</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line">  <span class="keyword">var</span> obj = &#123;&#125; </div><div class="line">&lt;<span class="regexp">/script&gt;</span></div></pre></td></tr></table></figure>
<ol>
<li>实例化创建</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line">  <span class="keyword">var</span> obj = <span class="keyword">new</span> <span class="built_in">Object</span>(); </div><div class="line"><span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></div></pre></td></tr></table></figure>
<h4 id="赋值"><a href="#赋值" class="headerlink" title="赋值"></a>赋值</h4><ol>
<li><code>obj.key</code></li>
<li><code>obj[&#39;key&#39;]</code>，如果括号内不加引用，那个会解释为变量key</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line">  <span class="keyword">var</span> obj = &#123;&#125;;</div><div class="line">  obj.name = <span class="string">'weison'</span>;</div><div class="line">  obj[<span class="string">'age'</span>] = <span class="number">20</span>;  </div><div class="line"><span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></div></pre></td></tr></table></figure>
<h4 id="删除属性"><a href="#删除属性" class="headerlink" title="删除属性"></a>删除属性</h4><ol>
<li>赋值为<code>null</code></li>
<li><code>delete</code></li>
</ol>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line">  <span class="keyword">var</span> person = &#123;</div><div class="line">       <span class="attr">name</span> : <span class="string">'weison'</span>,</div><div class="line">       <span class="attr">age</span> : <span class="number">20</span>,</div><div class="line">       <span class="attr">country</span> : <span class="string">'china'</span></div><div class="line">     &#125;</div><div class="line">  person.age = <span class="literal">null</span>;</div><div class="line">  <span class="keyword">delete</span> person.name;</div><div class="line">  <span class="built_in">console</span>.log(person); <span class="comment">// =&gt; Object &#123;age: null, country: "china"&#125;</span></div><div class="line">&lt;<span class="regexp">/script&gt;</span></div></pre></td></tr></table></figure>
<p>js中，对象（不是指object）、类、实例的区别 </p>
<ul>
<li>对象就泛指，js中一切皆对象</li>
<li>类，是对象下的一个细分</li>
<li>实例，是类中一个具体事物</li>
</ul>
<h4 id="基本数据类型与引用数据类型的区别"><a href="#基本数据类型与引用数据类型的区别" class="headerlink" title="基本数据类型与引用数据类型的区别"></a>基本数据类型与引用数据类型的区别</h4><p>基本数据类型操作的是值，数据类型操作的是内存地址引用 </p>
<ul>
<li><p>基本数据类型是值的传递，值的修改不 会影响到其它变量</p>
</li>
<li><p>引用数据类型是值的引用（可相当把内存地址标识赋给了它），值修改会影响引用这个地址的所有变量</p>
</li>
</ul>
<ol>
<li>定义一个变量</li>
<li>开辟一个新的空间，然后把属性名和属性值保存在这个空间中，并且有一个空间地址</li>
<li>把空间地址给了这个变量，变量并没有储存这些数据，而且储存了这个空间引用地址</li>
<li>如果过程中把这个地址也给了这个变量，另一个变量也是存储这个地址，此时两个变量操作的是同一个空间地址</li>
<li>其中一个改变了，另外一个也跟着改变 </li>
</ol>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line"> <span class="keyword">var</span> num1 =<span class="number">10</span>;</div><div class="line"> <span class="keyword">var</span> num2 = num1;</div><div class="line"> num2 ++;</div><div class="line"> <span class="built_in">console</span>.log(num1,num2); <span class="comment">// =&gt; 10 11</span></div><div class="line"></div><div class="line"> <span class="keyword">var</span> obj1 = &#123; <span class="attr">age</span> : <span class="number">20</span>&#125;;</div><div class="line"> <span class="keyword">var</span> obj2 = obj1;</div><div class="line"> obj2.age = <span class="number">22</span>;</div><div class="line"> <span class="built_in">console</span>.log(obj1,obj2); <span class="comment">// =&gt; Object &#123;age: 22&#125; Object &#123;age: 22&#125;</span></div><div class="line">&lt;<span class="regexp">/script&gt;</span></div></pre></td></tr></table></figure>
<h3 id="函数funciton"><a href="#函数funciton" class="headerlink" title="函数funciton"></a>函数<code>funciton</code></h3><p>定义一个函数的步骤</p>
<ol>
<li>开辟一个新的空间地址</li>
<li>把字符串的js代码当作是字符串存到了空间里面（一个函数如果只是定义了没有执行的话，这个函数没有任何意义）</li>
<li>把函数地址给函数名<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line">  <span class="keyword">var</span> fn1 = <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="comment">//函数体</span></div><div class="line">    <span class="comment">//一个功能或一个方法实现的步骤</span></div><div class="line">    alert(<span class="number">1</span>);</div><div class="line">  &#125;</div><div class="line">&lt;<span class="regexp">/script&gt;</span></div></pre></td></tr></table></figure>
</li>
</ol>
<p>执行一个函数</p>
<ol>
<li>首先会形成自己的一个独立作用域</li>
<li>把定义时候当成字符串的代码当js代码来执行</li>
</ol>
<h4 id="形参"><a href="#形参" class="headerlink" title="形参"></a>形参</h4><ul>
<li>可以理解成是一个变量，它的作用是，在我们定义函数时，无法知道参数的实际内容是什么，因此采用形参的方式来代表需要处理的数据内容，当执行这个方法时，只要把实际数据代表形参即可</li>
<li>定义一个形参，假如没有传值，那个这个形参的默认值为<code>undefined</code></li>
</ul>
<h4 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h4><p>一个功能的多种形态，通过参数的不同实现不同的功能</p>
<h4 id="arguments是函数内置的接收参数的机制"><a href="#arguments是函数内置的接收参数的机制" class="headerlink" title="arguments是函数内置的接收参数的机制"></a><code>arguments</code>是函数内置的接收参数的机制</h4><ul>
<li>系统自带的，不管是否传递过参数，也不管有没有定义的形参，arguments一直存在</li>
<li>这是一个类数组的形式，索引值从0开始代表第几个传递的参数 </li>
<li><code>arguments.length</code>代表传递参数的个数</li>
</ul>
<h4 id="arguments-callee-代表当前函数本身"><a href="#arguments-callee-代表当前函数本身" class="headerlink" title="arguments.callee 代表当前函数本身"></a><code>arguments.callee</code> 代表当前函数本身</h4><h4 id="return"><a href="#return" class="headerlink" title="return"></a><code>return</code></h4><ul>
<li>如果想获取函数内部的值，可能采用return的方法来把结果返回出去。</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line">  <span class="keyword">var</span> fn1 = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="number">1</span>+<span class="number">2</span>;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">var</span> result = fn1();</div><div class="line">  <span class="built_in">console</span>.log(result); <span class="comment">// =&gt; 3</span></div><div class="line">&lt;<span class="regexp">/script&gt;</span></div></pre></td></tr></table></figure>
<ul>
<li>如果函数没有写<code>return</code>内容，或者直接写<code>return</code>,那么系统默认返回<code>undefined</code></li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line"> <span class="function"><span class="keyword">function</span> <span class="title">fn1</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="keyword">return</span>;</div><div class="line"> &#125;   </div><div class="line"> fn1(); <span class="comment">// =&gt; 返回 undefined</span></div><div class="line">&lt;<span class="regexp">/script&gt;</span></div></pre></td></tr></table></figure>
<ul>
<li>在函数体内，<code>return</code>后面的语句不会被执行，利用这个特征，可以控制函数体在哪个中止执行</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">fn1</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="number">1</span>);</div><div class="line">    <span class="keyword">return</span>;</div><div class="line">    <span class="built_in">console</span>.log(<span class="number">2</span>);</div><div class="line">  &#125;</div><div class="line">  fn1(); <span class="comment">// =&gt; 只打印出 1</span></div><div class="line">&lt;<span class="regexp">/script&gt;</span></div></pre></td></tr></table></figure>
<h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><p>数据是由多个项组成的，每一组之间用逗号隔开，并且每一项可以是任务类型的数据。它也是对象的一种，对象数据类型是由属性名：属性值组成的。数据的属性名是它的索引值</p>
<h4 id="创建方法"><a href="#创建方法" class="headerlink" title="创建方法"></a>创建方法</h4><ol>
<li>字面量</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line"> <span class="keyword">var</span> arry = [];</div><div class="line"><span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></div></pre></td></tr></table></figure>
<ol>
<li>实例方式创建</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line">  <span class="keyword">var</span> arry = <span class="keyword">new</span> <span class="built_in">Array</span>();    </div><div class="line"><span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></div></pre></td></tr></table></figure>
<h4 id="数组的常用方法"><a href="#数组的常用方法" class="headerlink" title="数组的常用方法"></a>数组的常用方法</h4><h5 id="数组的增删改"><a href="#数组的增删改" class="headerlink" title="数组的增删改"></a>数组的增删改</h5><h6 id="push"><a href="#push" class="headerlink" title="push"></a><code>push</code></h6><p>在数组的后面增加内容<br>返回的是新数据的长度<br>原来的数组内容改变了</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line">  <span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</div><div class="line">  <span class="keyword">var</span> add = arr.push(<span class="number">4</span>);</div><div class="line">  <span class="built_in">console</span>.log(add);<span class="comment">// =&gt; 4  </span></div><div class="line">  <span class="built_in">console</span>.log(arr);<span class="comment">// =&gt; [1, 2, 3,4]   </span></div><div class="line">&lt;<span class="regexp">/script&gt;</span></div></pre></td></tr></table></figure>
<h6 id="unshift"><a href="#unshift" class="headerlink" title="unshift"></a><code>unshift</code></h6><p>在数组的前面增加内容<br>返回的是新数据的长度<br>原来的数组内容改变了</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line">  <span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</div><div class="line">  <span class="keyword">var</span> add = arr.unshift(<span class="number">0</span>);</div><div class="line">  <span class="built_in">console</span>.log(add);<span class="comment">// =&gt; 4  </span></div><div class="line">  <span class="built_in">console</span>.log(arr);<span class="comment">// =&gt; [0, 1, 2, 3]   </span></div><div class="line">&lt;<span class="regexp">/script&gt;</span></div></pre></td></tr></table></figure>
<h6 id="splice"><a href="#splice" class="headerlink" title="splice"></a>splice</h6><ol>
<li><code>splice(n,0,x)</code>向数组中的某个位置添加内容，从索引值n开始，删除0个内容，把新增加的内容放在索引n的前面,返回的是一个空数组<br>原来的数组改变了  </li>
</ol>
<ul>
<li><code>n</code> 开始的索引值，添加到哪个索引值前面</li>
<li><code>x</code> 增加的内容</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line">  <span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>];</div><div class="line">  <span class="keyword">var</span> result = arr.splice(<span class="number">2</span>,<span class="number">0</span>,<span class="string">'新增加splice'</span>);</div><div class="line">  <span class="built_in">console</span>.log(arr); <span class="comment">// =&gt; [1, 2, "新增加splice", 3, 4]</span></div><div class="line">  <span class="built_in">console</span>.log(result); <span class="comment">// =&gt; []</span></div><div class="line">&lt;<span class="regexp">/script&gt;</span></div></pre></td></tr></table></figure>
<ol>
<li><code>splice(n,m)</code>从索引值n（包含n）开始，删除m个元素，把删除的内容当做一个新的数组返回，原有数组改变</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line">  <span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>];</div><div class="line">  <span class="keyword">var</span> result = arr.splice(<span class="number">2</span>,<span class="number">3</span>);</div><div class="line">  <span class="built_in">console</span>.log(arr); <span class="comment">// =&gt; [1,2,6,7,8]</span></div><div class="line">  <span class="built_in">console</span>.log(result); <span class="comment">// =&gt; [3,4,5]</span></div><div class="line">&lt;<span class="regexp">/script&gt;</span></div></pre></td></tr></table></figure>
<ol>
<li><code>splice(n,m,x)</code>替换数据中的内容，先删除再添加（从n开始，删除m个元素，然后插入X）</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line">  <span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>];</div><div class="line">  <span class="keyword">var</span> result = arr.splice(<span class="number">2</span>,<span class="number">3</span>,<span class="number">10</span>);</div><div class="line">  <span class="built_in">console</span>.log(arr); <span class="comment">// =&gt; [1,2,10,6,7,8]</span></div><div class="line">  <span class="built_in">console</span>.log(result); <span class="comment">// =&gt; [3,4,5]</span></div><div class="line">&lt;<span class="regexp">/script&gt;</span></div></pre></td></tr></table></figure>
<h6 id="pop"><a href="#pop" class="headerlink" title="pop()"></a><code>pop()</code></h6><p>删除数组的最后一项，返回被删除的元素<br>原数组会被改变<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line">   &lt;script&gt;</div><div class="line">     var arr = [1,2,3,4];</div><div class="line">     var result = arr.pop();</div><div class="line">     console.log(arr); // =&gt; [1, 2, 3]</div><div class="line">     console.log(result); // =&gt; 4</div><div class="line">   &lt;/script&gt;</div><div class="line"> ```` </div><div class="line">###### `shift()`</div><div class="line">删除数组的第一项，返回被删除的元素</div><div class="line"> 原数组会被改变</div><div class="line"> ````javascript</div><div class="line">    &lt;script&gt;</div><div class="line">      var arr = [1,2,3,4];</div><div class="line">      var result = arr.shift();</div><div class="line">      console.log(arr); // =&gt; [2, 3，4]</div><div class="line">      console.log(result); // =&gt; 1</div><div class="line">    &lt;/script&gt;</div><div class="line">  ```` </div><div class="line"></div><div class="line">规律</div><div class="line">1. `arr.splice(0,0,x)`相当于`arr.unshift(x)`</div><div class="line">1. `arr.splice(arr.length,0,x)`相当于`arr.push(x)`</div><div class="line"></div><div class="line">##### 数组的查询和复制</div><div class="line">###### `slice`</div><div class="line">1. `slice(m,n)`从索引m（包含m）开始，查询到n(不包含n)，把查询到的结果以新数组的形式返回，原有数组不改变</div><div class="line">1. `slice(m)`从索引m（包含m）开始，查询到数组末尾，把查询到的结果以新数组的形式返回，原有数组不改变</div><div class="line">1. `slice()`或`slice(0)`将原来的数组原封不动的复制一份</div><div class="line"></div><div class="line">````javascript</div><div class="line">  &lt;script&gt;</div><div class="line">    var arr = [1,2,3,4,5];</div><div class="line">    var res = arr.slice(2,4);</div><div class="line">    console.log(arr); // =&gt; 1,2,3,4,5</div><div class="line">    console.log(res); // =&gt; 3,4 </div><div class="line">  &lt;/script&gt;</div></pre></td></tr></table></figure></p>
<h6 id="concat-x"><a href="#concat-x" class="headerlink" title="concat(x)"></a><code>concat(x)</code></h6><p>实现数组的拼接,原有数组不变,假如不填写x,就会变成数组的复制</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line">  <span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</div><div class="line">  <span class="keyword">var</span> arr2 = [<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>];</div><div class="line">  <span class="keyword">var</span> res = arr.concat(arr2);</div><div class="line">  <span class="built_in">console</span>.log(arr); <span class="comment">// =&gt; [1,2,3,4,5]</span></div><div class="line">  <span class="built_in">console</span>.log(res); <span class="comment">// =&gt; [1, 2, 3, 4, 5, 6, 7, 8]</span></div><div class="line">  <span class="keyword">var</span> arr3 = [<span class="number">1</span>,<span class="number">2</span>];</div><div class="line">  <span class="keyword">var</span> res2 = arr3.concat();</div><div class="line">  <span class="built_in">console</span>.log(res2); <span class="comment">//[1, 2]</span></div><div class="line">&lt;<span class="regexp">/script&gt;</span></div></pre></td></tr></table></figure>
<h5 id="数组的转换成字符串"><a href="#数组的转换成字符串" class="headerlink" title="数组的转换成字符串"></a>数组的转换成字符串</h5><h6 id="toString-NaN"><a href="#toString-NaN" class="headerlink" title="toString()"></a><code>toString()</code></h6><p>把数组的每一项拿出来用逗号隔开，原有数组不变</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line">  <span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="string">'haha'</span>];</div><div class="line">  <span class="keyword">var</span> res = arr.toString();</div><div class="line">  <span class="built_in">console</span>.log(res); <span class="comment">// =&gt; 1,2,haha</span></div><div class="line">  <span class="built_in">console</span>.log(arr); <span class="comment">// =&gt; [1, 2, "haha"]</span></div><div class="line">&lt;<span class="regexp">/script&gt;</span></div></pre></td></tr></table></figure>
<h6 id="join-分隔符"><a href="#join-分隔符" class="headerlink" title="join(分隔符)"></a><code>join(分隔符)</code></h6><p>把数组的每一项拿出来用分隔符隔开，原有数组不变</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line">  <span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="string">'haha'</span>];</div><div class="line">  <span class="keyword">var</span> res = arr.join(<span class="string">"-"</span>);</div><div class="line">  <span class="built_in">console</span>.log(res); <span class="comment">// =&gt; 1-2-haha</span></div><div class="line">  <span class="built_in">console</span>.log(arr); <span class="comment">// =&gt; [1, 2, "haha"]</span></div><div class="line">&lt;<span class="regexp">/script&gt;</span></div></pre></td></tr></table></figure>
<p>也可以利用它和<code>eval</code>来进行纯数字数组的运算,<code>eval</code>的作用是把字符串转换为可执行的表达式<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line">  <span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</div><div class="line">  <span class="keyword">var</span> res = <span class="built_in">eval</span>(arr.join(<span class="string">"+"</span>)); </div><div class="line">  <span class="built_in">console</span>.log(res); <span class="comment">// =&gt; 15</span></div><div class="line">  <span class="built_in">console</span>.log(<span class="built_in">eval</span>(arr.join(<span class="string">"*"</span>))); <span class="comment">// =&gt; 120</span></div><div class="line">&lt;<span class="regexp">/script&gt;</span></div></pre></td></tr></table></figure></p>
<h5 id="数组的排列和排序"><a href="#数组的排列和排序" class="headerlink" title="数组的排列和排序"></a>数组的排列和排序</h5><h6 id="reverse-数组倒过来排列-原来的数组也变"><a href="#reverse-数组倒过来排列-原来的数组也变" class="headerlink" title="reverse()数组倒过来排列,原来的数组也变"></a><code>reverse()</code>数组倒过来排列,原来的数组也变</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line">  <span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">9</span>,<span class="number">2</span>,<span class="number">4</span>];</div><div class="line">  <span class="keyword">var</span> res = arr.reverse();</div><div class="line">  <span class="built_in">console</span>.log(arr); <span class="comment">// =&gt; [4, 2, 9, 1]</span></div><div class="line">  <span class="built_in">console</span>.log(res); <span class="comment">// =&gt; [4, 2, 9, 1]</span></div><div class="line">&lt;<span class="regexp">/script&gt;</span></div></pre></td></tr></table></figure>
<h6 id="sort-数组的排序"><a href="#sort-数组的排序" class="headerlink" title="sort() 数组的排序"></a><code>sort()</code> 数组的排序</h6><p>可以由小到大或由大到小，原有的数组也改变，直接写<code>sort()</code>只能处理10以内的数字排序，处理10才上的，需要传递一个函数</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line">  <span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,,<span class="number">30</span>,<span class="number">9</span>,<span class="number">80</span>];    </div><div class="line">  arr.sort();</div><div class="line">  <span class="built_in">console</span>.log(arr); <span class="comment">//[1, 2, 30, 80, 9] 这是因为直接写时，它只会判断第一位的数字</span></div><div class="line"></div><div class="line">  <span class="comment">//10以上从小到大的排列</span></div><div class="line">  arr.sort(<span class="function"><span class="keyword">function</span>(<span class="params">a,b</span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span> a-b;</div><div class="line">  &#125;)</div><div class="line">   <span class="built_in">console</span>.log(arr); <span class="comment">// =&gt;  [1, 2, 9, 30, 80]</span></div><div class="line"></div><div class="line">  <span class="comment">//10以上从大到小的排列</span></div><div class="line">  arr.sort(<span class="function"><span class="keyword">function</span>(<span class="params">a,b</span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span> b-a;</div><div class="line">  &#125;)</div><div class="line">   <span class="built_in">console</span>.log(arr); <span class="comment">// =&gt;  [80, 30, 9, 2, 1]</span></div><div class="line"></div><div class="line">   <span class="comment">//sort方法是利用冒泡排序的方式，用当前项减去后一项目，如果大于0的话，代表前面大于后面，这样的话就交换位置</span></div><div class="line">   <span class="keyword">var</span> arr2 = [<span class="number">88</span>,<span class="number">6</span>,<span class="number">10</span>,<span class="number">12</span>,<span class="number">23</span>,<span class="number">19</span>,<span class="number">17</span>];</div><div class="line">   arr2.sort(<span class="function"><span class="keyword">function</span>(<span class="params">a,b</span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(a+<span class="string">"&lt;=====&gt;"</span>+b);</div><div class="line">    <span class="keyword">return</span> a-b;</div><div class="line">   &#125;)</div><div class="line">   <span class="built_in">console</span>.log(arr2); <span class="comment">// [6, 10, 12, 17, 19, 23, 88]</span></div><div class="line"></div><div class="line">&lt;<span class="regexp">/script&gt;</span></div></pre></td></tr></table></figure>
<h4 id="数组的排序方法"><a href="#数组的排序方法" class="headerlink" title="数组的排序方法"></a>数组的排序方法</h4><h5 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h5><p>冒泡排序的思想是当前项与后一项进行比较，假如当前项比后一项大，那就交换位置</p>
<ol>
<li>轮数 = arr.length - 1</li>
<li>每一轮的次数 = arr.lenght -1 - 当前轮数</li>
<li>交换位置的方法是建立一个临时变量储存当前值<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line">  <span class="keyword">var</span> a = <span class="number">1</span>,</div><div class="line">      b = <span class="number">2</span>,</div><div class="line">      c = <span class="literal">null</span>;</div><div class="line">  c = a; <span class="comment">//把a的值储存起来</span></div><div class="line">  a = b; <span class="comment">//把b的值赋予了a</span></div><div class="line">  b = c; <span class="comment">//最后把储存在c里面的a值赋予b</span></div><div class="line">  <span class="built_in">console</span>.log(a,b); <span class="comment">//2 1</span></div><div class="line"></div><div class="line">&lt;<span class="regexp">/script&gt;</span></div></pre></td></tr></table></figure>
</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line">  <span class="keyword">var</span> sortArray = <span class="function"><span class="keyword">function</span>(<span class="params">arr,dir</span>)</span>&#123;</div><div class="line">    <span class="comment">//数组长度</span></div><div class="line">    <span class="keyword">var</span> len = arr.length;</div><div class="line">    <span class="comment">//轮数 = 数组长度 - 1</span></div><div class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;len <span class="number">-1</span> ;i++)&#123;</div><div class="line">      <span class="comment">//每轮次数 = 数组长度 -1 - 当前的轮次（因为每轮结束后都会把最大值放后面，所以不用再循环这个数）</span></div><div class="line">      <span class="keyword">for</span>(<span class="keyword">var</span> j=<span class="number">0</span>;j&lt;len<span class="number">-1</span>-i;j++)&#123;</div><div class="line">       <span class="keyword">var</span> cur = arr[j],next = arr[j+<span class="number">1</span>],tmp;</div><div class="line">       <span class="comment">//当前值大于后一项值时，交换位置</span></div><div class="line">        <span class="keyword">if</span>(cur &gt; next)&#123;</div><div class="line">          <span class="keyword">var</span> tmp = cur;</div><div class="line">           arr[j] = arr[j+<span class="number">1</span>];</div><div class="line">           arr[j+<span class="number">1</span>] = tmp;</div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//默认为从小到大排，假如dir为1时，变成从大到小排</span></div><div class="line">    <span class="keyword">if</span>(dir == <span class="number">1</span>)&#123;</div><div class="line">      arr.reverse();</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">9</span>,<span class="number">20</span>,<span class="number">5</span>,<span class="number">30</span>];</div><div class="line">  sortArray(arr)</div><div class="line">  <span class="built_in">console</span>.log(arr);</div><div class="line"><span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></div></pre></td></tr></table></figure>
<h5 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h5><h5 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h5><h4 id="数组去重"><a href="#数组去重" class="headerlink" title="数组去重"></a>数组去重</h4><h5 id="双重for循环"><a href="#双重for循环" class="headerlink" title="双重for循环"></a>双重for循环</h5><h5 id="利用obj赋值的方法"><a href="#利用obj赋值的方法" class="headerlink" title="利用obj赋值的方法"></a>利用obj赋值的方法</h5><p>将数组的值同时充当对象的键名和键值，然后在for循环中判断obj的值是否与当前for循环中的值相等，如果相等，则证明数值重复了，需利用<code>splice</code>删去，因为删去了，会造成数据塌陷，所以要将索引值减1，让for循环重新遍历当前索引位置的值<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line">  <span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">8</span>,<span class="number">5</span>,<span class="number">23</span>,<span class="number">89</span>,<span class="number">76</span>,<span class="number">46</span>,<span class="number">23</span>];</div><div class="line">  <span class="keyword">var</span> unique = <span class="function"><span class="keyword">function</span>(<span class="params">arr</span>)</span>&#123;</div><div class="line">      <span class="keyword">var</span> obj = &#123;&#125;,cur;</div><div class="line">      <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;arr.length;i++)&#123;</div><div class="line">        cur = arr[i];</div><div class="line">        <span class="keyword">if</span>(obj[cur] == cur)&#123;</div><div class="line">          arr.splice(i,<span class="number">1</span>);</div><div class="line">          i--;</div><div class="line">          <span class="keyword">continue</span></div><div class="line">        &#125;</div><div class="line">        obj[cur] = cur;</div><div class="line">      &#125;</div><div class="line">      obj = <span class="literal">null</span>;</div><div class="line">      <span class="built_in">console</span>.log(arr);</div><div class="line">  &#125;</div><div class="line">  unique(arr);</div><div class="line">  </div><div class="line"><span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></div></pre></td></tr></table></figure></p>
<h4 id="函数表达式"><a href="#函数表达式" class="headerlink" title="函数表达式"></a>函数表达式</h4><p>把一个匿名函数的定义部分赋给了一个变量或者一个元素的事件<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line">  <span class="comment">// 赋给一个变量 </span></div><div class="line">  <span class="keyword">var</span> fn1 = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;</div><div class="line">  <span class="comment">//赋给一个元素的事件</span></div><div class="line">  <span class="keyword">var</span> btn = <span class="built_in">document</span>.getElementById(<span class="string">'btn1'</span>);</div><div class="line">  btn.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line"></div><div class="line">  &#125;</div><div class="line">&lt;<span class="regexp">/script&gt;</span></div></pre></td></tr></table></figure></p>
<h4 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h4><ul>
<li>函数执行的时候会形成一个新的私有作用域，来保护里面的变量不受外界的干扰，这个保护机制称为闭包</li>
</ul>
<h4 id="自执行函数"><a href="#自执行函数" class="headerlink" title="自执行函数"></a>自执行函数</h4><p>定义与执行一起完成的函数<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line">  <span class="comment">//写法1</span></div><div class="line">  (<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;)();</div><div class="line">  <span class="comment">//写法2</span></div><div class="line">  +funciton()&#123;&#125;();</div><div class="line">  -funciton()&#123;&#125;();</div><div class="line">  !funciton()&#123;&#125;();</div><div class="line">  ~funciton()&#123;&#125;();</div><div class="line"><span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></div></pre></td></tr></table></figure></p>
<h2 id="检测数据类型的方式"><a href="#检测数据类型的方式" class="headerlink" title="检测数据类型的方式"></a>检测数据类型的方式</h2><h3 id="typeof"><a href="#typeof" class="headerlink" title="typeof"></a><code>typeof</code></h3><p>返回一个字符串的数据类型结果,要注意的是<code>null</code>的<code>typeof</code>就object</p>
<ol>
<li><code>&quot;number&quot;</code></li>
<li><code>&quot;string&quot;</code></li>
<li><code>&quot;boolean&quot;</code></li>
<li><code>&quot;undefined&quot;</code></li>
<li><code>&quot;object&quot;</code></li>
<li><code>&quot;function&quot;</code><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line"> <span class="built_in">console</span>.log(<span class="keyword">typeof</span> <span class="number">1</span>); <span class="comment">// =&gt; "number"</span></div><div class="line"> <span class="built_in">console</span>.log(<span class="keyword">typeof</span> <span class="string">'1'</span>);<span class="comment">// =&gt; "string"</span></div><div class="line"> <span class="built_in">console</span>.log(<span class="keyword">typeof</span> <span class="literal">true</span>);<span class="comment">// =&gt; "boolean"</span></div><div class="line"> <span class="built_in">console</span>.log(<span class="keyword">typeof</span> <span class="literal">undefined</span>);<span class="comment">// =&gt; "undefined"</span></div><div class="line"> <span class="built_in">console</span>.log(<span class="keyword">typeof</span> &#123;&#125;);<span class="comment">// =&gt; "object"</span></div><div class="line"> <span class="built_in">console</span>.log(<span class="keyword">typeof</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;);<span class="comment">// =&gt; "function"</span></div><div class="line"></div><div class="line"> <span class="built_in">console</span>.log(<span class="keyword">typeof</span> (<span class="keyword">typeof</span> (<span class="keyword">typeof</span> <span class="number">1</span>)) );</div><div class="line"> <span class="comment">/*</span></div><div class="line">  1. typeof 1 时，返回的是字符串类型的 "number"</div><div class="line">  2. typeof "number",返回 `string`</div><div class="line">  3. typeof "string" 返回的是`string`</div><div class="line">  因为在typeof中，出现两个及以上的typeof，其结果都是string</div><div class="line">  */</div><div class="line">&lt;<span class="regexp">/script&gt;</span></div></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="instanceof"><a href="#instanceof" class="headerlink" title="instanceof"></a><code>instanceof</code></h3><h3 id="constructor-NaN"><a href="#constructor-NaN" class="headerlink" title="constructor"></a><code>constructor</code></h3><h3 id="Object-prototype-toString-call"><a href="#Object-prototype-toString-call" class="headerlink" title="Object.prototype.toString.call()"></a><code>Object.prototype.toString.call()</code></h3>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[页面架构]]></title>
      <url>weison.org/2016/09/07/layout/</url>
      <content type="html"><![CDATA[<h3 id="css-reset"><a href="#css-reset" class="headerlink" title="css reset"></a>css reset</h3><p>全局样式定义，主要作用是为了统一多种浏览器元素的表现样式</p>
<ol>
<li>一定要在项目初始定义好,毕竟后期维护要费大精力要回归检查</li>
</ol>
<h3 id="布局解决方案"><a href="#布局解决方案" class="headerlink" title="布局解决方案"></a>布局解决方案</h3><h4 id="居中布局"><a href="#居中布局" class="headerlink" title="居中布局"></a>居中布局</h4><ol>
<li>水平居中</li>
</ol>
<ul>
<li>inline-block + text-align<br>利用设置了<code>inline-block</code>元素的宽度相当于内容宽度让使布局自适应，使用其父级<code>text-align:center</code>来让元素居中显示</li>
</ul>
<h3 id="可用于布局的属性"><a href="#可用于布局的属性" class="headerlink" title="可用于布局的属性"></a>可用于布局的属性</h3><h4 id="float"><a href="#float" class="headerlink" title="float"></a>float</h4><h4 id="position"><a href="#position" class="headerlink" title="position"></a>position</h4><h4 id="flex"><a href="#flex" class="headerlink" title="flex"></a>flex</h4>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[html5]]></title>
      <url>weison.org/2016/08/08/html5/</url>
      <content type="html"><![CDATA[<h1 id="文档声明"><a href="#文档声明" class="headerlink" title="文档声明"></a>文档声明</h1><h1 id="标签"><a href="#标签" class="headerlink" title="标签"></a>标签</h1><h2 id="用于结构划分"><a href="#用于结构划分" class="headerlink" title="用于结构划分"></a>用于结构划分</h2><ol>
<li><code>&lt;header&gt;&lt;/header&gt;</code> 用于网站或版块头部</li>
<li><code>&lt;footer&gt;&lt;/footer&gt;</code> 用于网站或版块底部</li>
<li><code>&lt;section&gt;&lt;/section&gt;</code> 划分页面区域</li>
<li><code>&lt;article&gt;&lt;/article&gt;</code>相对独立并且完整的一部分内容</li>
<li><code>&lt;aside&gt;&lt;/aside&gt;</code> 和主体相关的附属信息,aside应该与article内容相关</li>
<li><code>&lt;nav&gt;&lt;/nav&gt;</code> 导航</li>
<li><code>&lt;hgroup&gt;&lt;/hgroup&gt;</code>主要用于标题组合</li>
</ol>
<h2 id="语义化的标签"><a href="#语义化的标签" class="headerlink" title="语义化的标签"></a>语义化的标签</h2><ol>
<li><p><code>&lt;figure&gt;&lt;/figure&gt;</code>媒体元素组合,代表里面包含了图片或视频之类媒体元素</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">figure</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"http://www.baidu.com/s?wd=%E4%B8%83%E5%A4%95%E8%8A%82&amp;tn=SE_pshlcjsy_xef5bmh9"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>图片描述文字<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">figure</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p><code>&lt;time&gt;&lt;/time&gt;</code>用于表示时间或日期</p>
</li>
<li><code>&lt;adress&gt;&lt;/adress&gt;</code> 定义作者信息 </li>
<li><code>&lt;mark&gt;&lt;/mark&gt;</code>  标记标签</li>
</ol>
<h2 id="功能性标签"><a href="#功能性标签" class="headerlink" title="功能性标签"></a>功能性标签</h2><ol>
<li><p><code>&lt;datalist&gt;&lt;/datalist&gt;</code> 用于表示input框有可能出现的值</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">list</span>=<span class="string">"data"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">datalist</span> <span class="attr">id</span>=<span class="string">"data"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"javascript"</span>&gt;</span>javascript<span class="tag">&lt;/<span class="name">option</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"html"</span>&gt;</span>html<span class="tag">&lt;/<span class="name">option</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"html"</span>&gt;</span>html<span class="tag">&lt;/<span class="name">option</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"css"</span>&gt;</span>css<span class="tag">&lt;/<span class="name">option</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">datalist</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p><code>&lt;details&gt;&lt;/details&gt;</code>表示缩略信息，一般配合<code>summy</code>使用，假如加上<code>open</code>属性，会默认打开</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">details</span> <span class="attr">open</span>&gt;</span></div><div class="line"> <span class="tag">&lt;<span class="name">summy</span>&gt;</span>标题------------<span class="tag">&lt;/<span class="name">summy</span>&gt;</span></div><div class="line"> <span class="tag">&lt;<span class="name">p</span>&gt;</span>赛后，傅园慧再次展现了自己搞怪的一面，她的表情十分夸张可爱，堪称中国代表团第一逗比，也给观众们带来了欢乐。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">details</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p><code>&lt;progress&gt;&lt;/progress&gt;</code> 进度条<br>属性：</p>
<ul>
<li>‘max’ 是指最大的到达值</li>
<li><code>value</code> 当前的进度</li>
<li>内部的span主要用于当浏览器不兼容时，直接要那个<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">progress</span> <span class="attr">max</span>=<span class="string">"200"</span> <span class="attr">value</span>=<span class="string">"100"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">span</span>&gt;</span>76<span class="tag">&lt;/<span class="name">span</span>&gt;</span>% </div><div class="line"><span class="tag">&lt;/<span class="name">progress</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ol>
<h1 id="新增标签的低版本兼容方案"><a href="#新增标签的低版本兼容方案" class="headerlink" title="新增标签的低版本兼容方案"></a>新增标签的低版本兼容方案</h1><ol>
<li>使用js中的<code>document.createElement()</code>来创建标签</li>
<li>在css中定义创建出来的标签样式即可</li>
</ol>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></div><div class="line">  <span class="selector-tag">header</span>,<span class="selector-tag">article</span>&#123;<span class="attribute">display</span>: block&#125;</div><div class="line">  <span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">header</span>&gt;</span>header<span class="tag">&lt;/<span class="name">header</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">article</span>&gt;</span>article<span class="tag">&lt;/<span class="name">article</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">    <span class="built_in">window</span>.createElement(<span class="string">'header'</span>);</div><div class="line">    <span class="built_in">window</span>.createElement(<span class="string">'article'</span>);</div><div class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="使用现在的插件"><a href="#使用现在的插件" class="headerlink" title="使用现在的插件"></a>使用现在的插件</h2><p><a href="https://github.com/aFarkas/html5shiv" target="_blank" rel="external">html5shiv</a></p>
<h2 id="Form表单"><a href="#Form表单" class="headerlink" title="Form表单"></a>Form表单</h2><h3 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h3><ol>
<li><code>placeholder=&quot;&quot;</code>提示信息</li>
<li><code>autocomplete</code> 是否自动保存用户输入的信息<ul>
<li><code>on</code>为开启,<code>off</code>为关闭</li>
</ul>
</li>
<li><code>autofocus</code> 焦点自动聚焦在输入框</li>
<li><code>require</code> 必填，不能为空</li>
<li><code>pattern</code> 正则校验</li>
</ol>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">""</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">pattern</span>=<span class="string">"/^\d+/$"</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></div></pre></td></tr></table></figure>
<ol>
<li><code>formaction</code> 保存至草稿箱<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"http:www.163.com"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">pattern</span>=<span class="string">"/^\d+/$"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">formaction</span>=<span class="string">"www.baidu.com"</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
</ol>
<h1 id="选择器"><a href="#选择器" class="headerlink" title="选择器"></a>选择器</h1><h1 id="JSON的浅克隆与深克隆"><a href="#JSON的浅克隆与深克隆" class="headerlink" title="JSON的浅克隆与深克隆"></a>JSON的浅克隆与深克隆</h1><h1 id="data数据自定义"><a href="#data数据自定义" class="headerlink" title="data数据自定义"></a>data数据自定义</h1><h1 id="历史事件"><a href="#历史事件" class="headerlink" title="历史事件"></a>历史事件</h1><h1 id="拖放"><a href="#拖放" class="headerlink" title="拖放"></a>拖放</h1><h1 id="canvas"><a href="#canvas" class="headerlink" title="canvas"></a>canvas</h1><h1 id="svg"><a href="#svg" class="headerlink" title="svg"></a>svg</h1><h1 id="跨文档通信"><a href="#跨文档通信" class="headerlink" title="跨文档通信"></a>跨文档通信</h1><h1 id="地理位置"><a href="#地理位置" class="headerlink" title="地理位置"></a>地理位置</h1><h1 id="离线缓存"><a href="#离线缓存" class="headerlink" title="离线缓存"></a>离线缓存</h1><h1 id="webWorkers"><a href="#webWorkers" class="headerlink" title="webWorkers"></a>webWorkers</h1>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[移动开发]]></title>
      <url>weison.org/2016/08/01/mobileDevelop/</url>
      <content type="html"><![CDATA[<h1 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h1><h2 id="像素比"><a href="#像素比" class="headerlink" title="像素比"></a>像素比</h2><h3 id="PPI-每英寸所拥有的像素数目。PPI越高，就越能用高密码来显示图像"><a href="#PPI-每英寸所拥有的像素数目。PPI越高，就越能用高密码来显示图像" class="headerlink" title="PPI 每英寸所拥有的像素数目。PPI越高，就越能用高密码来显示图像"></a><code>PPI</code> 每英寸所拥有的像素数目。PPI越高，就越能用高密码来显示图像</h3><h3 id="meta"><a href="#meta" class="headerlink" title="meta"></a><code>meta</code></h3><ol>
<li><code>name=&quot;viewport&quot;</code> 视口</li>
<li><code>content</code><ul>
<li><code>width=&quot;[pixel_value || device-width ]&quot;</code> 设置屏幕宽度</li>
<li><code>user-scalable = &quot;[yes || no]&quot;</code> 是否允许用户缩放（例如双击或双指放大）</li>
<li><code>initial-scale</code> 初始比例，改变元素的渲染像素，比如一个元素大小为400，那个当<code>initial-scale=2</code>时，它的渲染像素是800</li>
<li><code>minimum-scale</code> 允许缩放的最小比例</li>
<li><code>maximum-scale</code> 允许缩放的最大比例<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0"</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ol>
<h3 id="window-devicePixelRatio获取屏幕像素比例"><a href="#window-devicePixelRatio获取屏幕像素比例" class="headerlink" title="window.devicePixelRatio获取屏幕像素比例"></a><code>window.devicePixelRatio</code>获取屏幕像素比例</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">   <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">      <span class="keyword">var</span> iCalc = <span class="built_in">window</span>.devicePixelRatio; <span class="comment">//获取屏幕像素比</span></div><div class="line">          iCalc = <span class="number">1</span>/iCalc; <span class="comment">//计算出假如在像素比下，一像素等于多于渲染像素</span></div><div class="line">          <span class="keyword">var</span> checkMeta = <span class="built_in">document</span>.createElement(<span class="string">'meta'</span>);</div><div class="line">          checkMeta.name = <span class="string">'viewport'</span>;</div><div class="line">          checkMeta.content = <span class="string">'width=device-width, user-scalable=no, initial-scale='</span>+ iCalc +<span class="string">', maximum-scale='</span>+iCalc+<span class="string">', minimum-scale='</span>+iCalc + <span class="string">''</span>;</div><div class="line">          <span class="built_in">document</span>.getElementsByTagName(<span class="string">'head'</span>)[<span class="number">0</span>].appendChild(checkMeta);</div><div class="line">   &#125;</div><div class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></div><div class="line">  <span class="selector-class">.oBox</span>&#123;</div><div class="line">    <span class="attribute">width</span>: <span class="number">400px</span>;</div><div class="line">    <span class="attribute">height</span>: <span class="number">400px</span>;</div><div class="line">    <span class="attribute">background</span>: <span class="number">#8BC34A</span>;</div><div class="line">  &#125;</div><div class="line">  <span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"oBox"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="动态设置rem的大小"><a href="#动态设置rem的大小" class="headerlink" title="动态设置rem的大小"></a>动态设置rem的大小</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line">  //获取屏幕宽度</div><div class="line">  var iWidth = document.documentElement.clientWidth;</div><div class="line">  //根据屏幕宽度/16计算出1rem是多少 ,16是随意数据，可以随意定</div><div class="line">  var iCalc = iWidth / 16;</div><div class="line">  //设置html的字体大小</div><div class="line">  document.getElementsByTagName(&apos;html&apos;)[0].style.fontSize = iCalc + &apos;px&apos;;</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure>
<ol>
<li>取消点击超链接时的背景颜色</li>
</ol>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></div><div class="line">  <span class="selector-tag">a</span>&#123;<span class="attribute">-webkit-tap-highlight-color</span>:transparent&#125;</div><div class="line">  <span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">  </div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<ol>
<li>取消老版本下input的样式</li>
</ol>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></div><div class="line"><span class="selector-tag">input</span>&#123;<span class="attribute">-webkit-appearance</span>:none&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="屏幕适配"><a href="#屏幕适配" class="headerlink" title="屏幕适配"></a>屏幕适配</h2><h3 id="媒体查询"><a href="#媒体查询" class="headerlink" title="媒体查询"></a>媒体查询</h3><ul>
<li>all 用于所有设备</li>
<li>aural 已废弃。用于语音和声音合成器</li>
<li>braille 已废弃。 应用于盲文触摸式反馈设备</li>
<li>embossed  已废弃。 用于打印的盲人印刷设备</li>
<li>handheld  已废弃。 用于掌上设备或更小的装置，如PDA和小型电话</li>
<li>print 用于打印机和打印预览</li>
<li>projection  已废弃。 用于投影设备</li>
<li>screen  用于电脑屏幕，平板电脑，智能手机等。</li>
<li>speech  应用于屏幕阅读器等发声设备</li>
<li>tty 已废弃。 用于固定的字符网格，如电报、终端设备和对字符有限制的便携设备</li>
<li>tv  已废弃。 用于电视和网络电视</li>
</ul>
<figure class="highlight css"><figcaption><span>css</span><a href="http://www.runoob.com/cssref/css3-pr-mediaquery.html" target="_blank" rel="external">runoob</a></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*当媒体类型是tv时,body背景颜色为红色*/</span></div><div class="line">@<span class="keyword">media</span> tv&#123;</div><div class="line">  <span class="selector-tag">body</span>&#123;</div><div class="line">    <span class="attribute">background</span>:red;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line">@<span class="keyword">media</span> &#123;</div><div class="line">  <span class="selector-tag">body</span> &#123;</div><div class="line">    <span class="comment">/*因为这里写的是所有设备，且样式写在前面的媒体查询后面，所以会覆盖前面的样式*/</span></div><div class="line">    <span class="attribute">background</span>:blue;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="媒体特性"><a href="#媒体特性" class="headerlink" title="媒体特性"></a>媒体特性</h3><p>在写媒体特性时，要用括号包起来</p>
<ol>
<li><code>min-width</code> 当分辨率宽度大于或等于时，启用 </li>
<li><code>max-width</code> 当分辨率宽度小于或等于时，启用 </li>
<li><code>orientation : landscape</code> 横屏</li>
<li><code>orientation : portrait</code> 竖屏 <figure class="highlight css"><figcaption><span>css</span><a href="http://www.runoob.com/cssref/css3-pr-mediaquery.html" target="_blank" rel="external">runoob</a></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*当媒体类型是tv时,body背景颜色为红色*/</span></div><div class="line">@<span class="keyword">media</span> (min-width:<span class="number">960px</span>)&#123;</div><div class="line"> <span class="comment">/*当分辨率大于或者等于960像素时，使用*/</span></div><div class="line"> <span class="selector-tag">body</span>&#123;</div><div class="line">  <span class="attribute">background</span>:red;</div><div class="line"> &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="关键字"><a href="#关键字" class="headerlink" title="关键字"></a>关键字</h3><h4 id="and-并且，和"><a href="#and-并且，和" class="headerlink" title="and 并且，和"></a><code>and</code> 并且，和</h4><figure class="highlight arduino"><figcaption><span>css</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">@media (<span class="built_in">min</span>-<span class="built_in">width</span>:<span class="number">200</span>px) and (<span class="built_in">max</span>-<span class="built_in">width</span>:<span class="number">400</span>px)&#123;</div><div class="line">  body&#123;</div><div class="line">  <span class="comment">/*当宽度大于200px且小于400时使用*/</span></div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="not-排除"><a href="#not-排除" class="headerlink" title="not 排除"></a><code>not</code> 排除</h4><figure class="highlight css"><figcaption><span>css</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*除了tv以外的设备，都使用该样式*/</span></div><div class="line">@<span class="keyword">media</span> not tv&#123;</div><div class="line">  <span class="selector-tag">body</span>&#123;</div><div class="line">  <span class="attribute">background</span>:red;</div><div class="line">&#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="only-指定设备"><a href="#only-指定设备" class="headerlink" title="only 指定设备"></a><code>only</code> 指定设备</h4><p>很多时候是用来对那些不支持媒体特性但却支持媒体类型的设备</p>
<h2 id="离线存储"><a href="#离线存储" class="headerlink" title="离线存储"></a>离线存储</h2><h1 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h1><h1 id="框架"><a href="#框架" class="headerlink" title="框架"></a>框架</h1><ol>
<li><a href="http://m.sui.taobao.org/" target="_blank" rel="external">SUI Mobile 阿里巴巴国际UED前端出品的移动端UI库</a> </li>
<li><a href="https://weui.io/#/" target="_blank" rel="external">Weui 为微信Web服务量身设计</a></li>
<li><a href="http://imweb.io/topic/578392f6ba724c663b83527d" target="_blank" rel="external">腾讯 sheral——一个方便定制及扩展的UI组件库</a></li>
<li><a href="http://ant.design/" target="_blank" rel="external">ANT DESIGN一个 UI 设计语言</a></li>
</ol>
<h1 id="性能优化"><a href="#性能优化" class="headerlink" title="性能优化"></a>性能优化</h1><p>参考链接</p>
<ol>
<li><a href="https://www.iyuxy.com/w/" target="_blank" rel="external">推荐几个精致的web UI框架</a></li>
<li><a href="http://www.imooc.com/activity/planhtml5" target="_blank" rel="external">慕课精选38小时视频</a></li>
<li><a href="http://www.imooc.com/view/125" target="_blank" rel="external">Web App下图片滑动组件的开发</a></li>
<li><a href="http://www.imooc.com/view/140" target="_blank" rel="external">移动端的WEB相册</a></li>
<li><a href="http://www.imooc.com/view/104" target="_blank" rel="external">HTML5存储</a></li>
<li><a href="http://www.w3school.com.cn/html5/html_5_app_cache.asp" target="_blank" rel="external">HTML 5 应用程序缓存-Application Cache</a></li>
<li><a href="http://www.imooc.com/learn/46" target="_blank" rel="external">HTML5离线应用实战演练</a></li>
<li><a href="http://www.shejidaren.com/iphone-resolutions-guide.html" target="_blank" rel="external">iPhone屏幕分辨率终极指南</a></li>
<li><a href="http://www.runoob.com/cssref/css3-pr-mediaquery.html" target="_blank" rel="external">CSS3 @media查询 | 菜鸟教程</a></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[jquery]]></title>
      <url>weison.org/2016/07/21/jquery/</url>
      <content type="html"><![CDATA[<h4 id="元素尺寸"><a href="#元素尺寸" class="headerlink" title="元素尺寸"></a>元素尺寸</h4><h5 id="获取"><a href="#获取" class="headerlink" title="获取"></a>获取</h5><ol>
<li><code>width()</code> 单纯地获取宽度</li>
<li><code>innerWidth()</code> width+padding值</li>
<li><code>outerWidth()</code> width+padding+border</li>
<li><code>outerWidth(true)</code> width+padding+border + margin</li>
</ol>
<h5 id="设置"><a href="#设置" class="headerlink" title="设置"></a>设置</h5><ol>
<li><code>width(200)</code> 单纯地获取宽度</li>
<li><code>innerWidth(200)</code> width=200-padding</li>
<li><code>outerWidth(200)</code> width= 200 - padding-border</li>
<li><code>outerWidth(200,true)</code> width=200-padding-border-margin</li>
</ol>
<h5 id="原生js的差异"><a href="#原生js的差异" class="headerlink" title="原生js的差异"></a>原生js的差异</h5><p>原生js当中是获取隐藏元素的宽度是0，而jq不会<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"div1"</span> <span class="attr">style</span>=<span class="string">"background: red;width:100px;height:30px;display: none;"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"jquery.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	<span class="built_in">console</span>.log($(<span class="string">'#div1'</span>).width()); <span class="comment">// =&gt; 100</span></div><div class="line">	<span class="built_in">console</span>.log($(<span class="string">'#div1'</span>).get(<span class="number">0</span>).offsetWidth); <span class="comment">// =&gt;0</span></div><div class="line">&#125;)</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h5 id="获取浏览器"><a href="#获取浏览器" class="headerlink" title="获取浏览器"></a>获取浏览器</h5><ol>
<li><p>可视图</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$(<span class="built_in">window</span>).width();</div><div class="line">$(<span class="built_in">window</span>).height();</div></pre></td></tr></table></figure>
</li>
<li><p>整个视图</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$(<span class="built_in">document</span>).width();</div><div class="line">$(<span class="built_in">document</span>).height();</div></pre></td></tr></table></figure>
</li>
</ol>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></div><div class="line"><span class="selector-id">#div1</span> &#123;</div><div class="line">    <span class="attribute">width</span>: <span class="number">120px</span>;</div><div class="line">    <span class="attribute">height</span>: <span class="number">150px</span>;</div><div class="line">    <span class="attribute">margin</span>: <span class="number">10px</span>;</div><div class="line">    <span class="attribute">padding</span>: <span class="number">3px</span>;</div><div class="line">    <span class="attribute">margin</span>:<span class="number">6px</span>;</div><div class="line">    <span class="attribute">border</span>: <span class="number">2px</span> solid <span class="number">#8BC34A</span>;</div><div class="line">    <span class="attribute">background</span>: <span class="number">#8BC34A</span>;</div><div class="line">    <span class="attribute">float</span>:left;</div><div class="line">&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"div1"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></div><div class="line">	#div1 &#123;</div><div class="line">	    width: 120px;</div><div class="line">	    height: 150px;</div><div class="line">	    margin: 10px;</div><div class="line">	    padding: 3px;</div><div class="line">	    margin:6px;</div><div class="line">	    border: 2px solid #8BC34A;</div><div class="line">	    background: #8BC34A;</div><div class="line">	&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">"width"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">"innerWidth"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">"outerWidth"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">"outerWidthTrue"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"jquery.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	$(<span class="string">"#width"</span>).text(<span class="string">"width="</span>+$(<span class="string">'#div1'</span>).width());</div><div class="line">	$(<span class="string">"#innerWidth"</span>).text(<span class="string">"innerWidth="</span>+$(<span class="string">'#div1'</span>).innerWidth());</div><div class="line">	$(<span class="string">"#outerWidth"</span>).text(<span class="string">"outerWidt="</span>+$(<span class="string">'#div1'</span>).outerWidth());</div><div class="line">	$(<span class="string">"#outerWidthTrue"</span>).text(<span class="string">"outerWidthTrue="</span>+$(<span class="string">'#div1'</span>).outerWidth(<span class="literal">true</span>));</div><div class="line">&#125;)</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<h5 id="滚动距离"><a href="#滚动距离" class="headerlink" title="滚动距离"></a>滚动距离</h5><ol>
<li><code>scrollTop</code>页面出了可视区的高度</li>
<li><code>scrollLeft</code>页面出了可视区的宽度</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$(<span class="built_in">document</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	alert($(<span class="built_in">document</span>).scrollTop());</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p>当页面滚动到底部时</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$(<span class="built_in">document</span>).height - $(<span class="built_in">window</span>).height() = $(<span class="built_in">document</span>).offsetTop();</div></pre></td></tr></table></figure>
<p>当内部元素滚动到包含框底部时</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"div1"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"div2"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"jquery.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	$(<span class="built_in">document</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">		$(<span class="string">'#div2'</span>).height() - $(<span class="string">'#div1'</span>).height() = $(<span class="string">'#div1'</span>).scrollTop()</div><div class="line">		$(<span class="string">'#div2'</span>).scrollTop(<span class="number">300</span>)</div><div class="line">		<span class="built_in">console</span>.log($(<span class="built_in">document</span>).scrollTop());</div><div class="line">	&#125;);</div><div class="line">&#125;)</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<h5 id="到整个页面的距离offset"><a href="#到整个页面的距离offset" class="headerlink" title="到整个页面的距离offset()"></a>到整个页面的距离<code>offset()</code></h5><ol>
<li>与父级是否定位过postion无关</li>
<li>是相对于整个文档的，跟滚动条无关<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">'#div1'</span>).offset().left;</div><div class="line">$(<span class="string">'#div1'</span>).offset().top;</div></pre></td></tr></table></figure>
</li>
</ol>
<h5 id="到有定位属性的祖先元素的距离position"><a href="#到有定位属性的祖先元素的距离position" class="headerlink" title="到有定位属性的祖先元素的距离position()"></a>到有定位属性的祖先元素的距离<code>position()</code></h5><ol>
<li>与父级是否定位过postion无关</li>
<li>是相对于整个文档的，跟滚动条无关</li>
<li>要注意它会忽略margin值</li>
<li>浮动是支持的<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">'#div1'</span>).offset().left;</div><div class="line">$(<span class="string">'#div1'</span>).offset().top;</div></pre></td></tr></table></figure>
</li>
</ol>
<h5 id="懒加载"><a href="#懒加载" class="headerlink" title="懒加载"></a>懒加载</h5><p>原理：将路径存放在自定义属性当中，当浏览器滚动时，判断图片距离文档顶部的高度是否小于(当前窗口的可视高度+文档移出可视区的值)<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">img</span>  <span class="attr">src</span>=<span class="string">"http://img.zcool.cn/community/01d11d57345ba200000080ed92585f.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">img</span>  <span class="attr">data-src</span>=<span class="string">"http://img.zcool.cn/community/01b47057345ba200000080edd9e6cd.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">img</span>  <span class="attr">data-src</span>=<span class="string">"http://img.zcool.cn/community/01e39c57345ba200000080ed08a335.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"jquery.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	$(<span class="built_in">window</span>).scroll(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">		$(<span class="string">"img"</span>).each(<span class="function"><span class="keyword">function</span>(<span class="params">i,e</span>)</span>&#123;</div><div class="line">			<span class="comment">// 当元素距离文档顶部的距离&lt;(当窗口可视区高度+文档移出可视区的距离时)</span></div><div class="line">			<span class="keyword">if</span>($(e).offset().top&lt; ($(<span class="built_in">window</span>).height()+$(<span class="built_in">document</span>).scrollTop()))&#123;</div><div class="line">				<span class="comment">// 替换图片路径</span></div><div class="line">				$(e).attr(<span class="string">'src'</span>,$(e).data(<span class="string">'src'</span>));</div><div class="line">			&#125;</div><div class="line">		&#125;)</div><div class="line">	&#125;);</div><div class="line">&#125;)</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h4 id="遍历操作"><a href="#遍历操作" class="headerlink" title="遍历操作"></a>遍历操作</h4><h5 id="each-针对元素进行循环遍历的"><a href="#each-针对元素进行循环遍历的" class="headerlink" title="$().each() 针对元素进行循环遍历的"></a><code>$().each()</code> 针对元素进行循环遍历的</h5><h5 id="each-同时可以对元素和原生的数组-对象进行遍历"><a href="#each-同时可以对元素和原生的数组-对象进行遍历" class="headerlink" title="$.each()   同时可以对元素和原生的数组,对象进行遍历"></a><code>$.each()</code>   同时可以对元素和原生的数组,对象进行遍历</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	<span class="keyword">var</span> arr = [<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>];</div><div class="line">	<span class="comment">//记住回调函数的参数顺序是i,e(index,ele);</span></div><div class="line">	$.each(arr,<span class="function"><span class="keyword">function</span>(<span class="params">index,ele</span>)</span>&#123;</div><div class="line">		<span class="built_in">console</span>.log(index,ele);</div><div class="line">		<span class="comment">//0 "a"</span></div><div class="line">		<span class="comment">//1 "b"</span></div><div class="line">		<span class="comment">//2 "c</span></div><div class="line">	&#125;);</div><div class="line"></div><div class="line">	<span class="comment">//针对对象进行遍历</span></div><div class="line">	<span class="keyword">var</span> obj = &#123;<span class="attr">name</span>:<span class="string">'weison'</span>,<span class="attr">age</span>:<span class="number">25</span>&#125;;</div><div class="line">	$.each(obj,<span class="function"><span class="keyword">function</span>(<span class="params">key,val</span>)</span>&#123;</div><div class="line">		<span class="built_in">console</span>.log(key,val);</div><div class="line">		<span class="comment">// name weison</span></div><div class="line">		<span class="comment">// age 25</span></div><div class="line">	&#125;);</div><div class="line">&#125;);</div><div class="line"><span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></div></pre></td></tr></table></figure>
<h4 id="Callbacks-回调对象"><a href="#Callbacks-回调对象" class="headerlink" title="$.Callbacks() 回调对象"></a><code>$.Callbacks()</code> 回调对象</h4><h4 id="fn-extend-extend-插件编写"><a href="#fn-extend-extend-插件编写" class="headerlink" title="$.fn.extend() $.extend()插件编写"></a><code>$.fn.extend()</code> <code>$.extend()</code>插件编写</h4><h4 id="queue-dequeue-队列"><a href="#queue-dequeue-队列" class="headerlink" title="$.queue() $.dequeue() 队列"></a><code>$.queue()</code> <code>$.dequeue()</code> 队列</h4><p>队列是顺序执行的，一个执行完再到下一个，就像买车票一样，只有前一个出队(<code>$.dequeue()</code>)了，后一个人才能入队(<code>$.queue()</code>)<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$.queue(入队元素,队列名称,执行的函数);</div><div class="line">$.dequeue(出队元素,队列名称);</div></pre></td></tr></table></figure></p>
<p>出队的执行其实就相当于找到队伍中的第一个函数，并执行它<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">aa</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	alert(<span class="string">'a'</span>);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">bb</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	alert(<span class="string">'b'</span>);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">cc</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	alert(<span class="string">'c'</span>);</div><div class="line">&#125;</div><div class="line">$.queue(<span class="built_in">document</span>,<span class="string">'t1'</span>,aa);</div><div class="line">$.queue(<span class="built_in">document</span>,<span class="string">'t1'</span>,bb);</div><div class="line">$.queue(<span class="built_in">document</span>,<span class="string">'t1'</span>,cc);</div><div class="line"></div><div class="line">$.dequeue(<span class="built_in">document</span>,<span class="string">'t1'</span>);</div><div class="line">$.dequeue(<span class="built_in">document</span>,<span class="string">'t1'</span>);</div></pre></td></tr></table></figure></p>
<h4 id="Callbacks-回调函数"><a href="#Callbacks-回调函数" class="headerlink" title="$.Callbacks() 回调函数"></a><code>$.Callbacks()</code> 回调函数</h4><ol>
<li>方法</li>
</ol>
<ul>
<li><code>add()</code> 添加执行的函数</li>
<li><code>remove()</code> 删除已添加的函数</li>
<li><code>fire()</code> 顺序执行已添加的函数</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//实例化一个回调对象</span></div><div class="line"><span class="keyword">var</span> fn1 = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; <span class="built_in">console</span>.log(<span class="number">1</span>);&#125;</div><div class="line"><span class="keyword">var</span> fn2 = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; <span class="built_in">console</span>.log(<span class="number">2</span>);&#125;</div><div class="line"><span class="keyword">var</span> cb = $.Callbacks();</div><div class="line">cb.add(fn1);</div><div class="line">cb.add(fn2);</div><div class="line">cb.fire(); </div><div class="line">cb.remove(fn1);</div><div class="line">cb.fire();</div></pre></td></tr></table></figure>
<ol>
<li>参数</li>
</ol>
<ul>
<li><code>once()</code> 只调用第一个fire()</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	<span class="keyword">var</span> fn1 = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; <span class="built_in">console</span>.log(<span class="number">1</span>);&#125;</div><div class="line">	<span class="keyword">var</span> fn2 = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; <span class="built_in">console</span>.log(<span class="number">2</span>);&#125;</div><div class="line">	<span class="keyword">var</span> fn3 = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; <span class="built_in">console</span>.log(<span class="number">3</span>);&#125;</div><div class="line">	<span class="keyword">var</span> cb = $.Callbacks(<span class="string">'once'</span>);</div><div class="line">	cb.add(fn1);</div><div class="line">	cb.add(fn2);</div><div class="line">	cb.fire(); </div><div class="line">	cb.add(fn3);</div><div class="line">	cb.fire();</div><div class="line">&#125;)</div><div class="line">&lt;<span class="regexp">/script&gt;</span></div></pre></td></tr></table></figure>
<ul>
<li><code>memory()</code> 记忆<br>后缀的add也会在前面的fire()中执行</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	<span class="keyword">var</span> fn1 = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; <span class="built_in">console</span>.log(<span class="number">1</span>);&#125;</div><div class="line">	<span class="keyword">var</span> fn2 = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; <span class="built_in">console</span>.log(<span class="number">2</span>);&#125;</div><div class="line">	<span class="keyword">var</span> fn3 = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; <span class="built_in">console</span>.log(<span class="number">3</span>);&#125;</div><div class="line">	<span class="keyword">var</span> cb = $.Callbacks(<span class="string">'memory'</span>);</div><div class="line">	cb.add(fn1);</div><div class="line">	cb.add(fn2);</div><div class="line">	cb.fire();  <span class="comment">// 1 2 3</span></div><div class="line">	cb.add(fn3); </div><div class="line">&#125;)</div><div class="line">&lt;<span class="regexp">/script&gt;</span></div></pre></td></tr></table></figure>
<ul>
<li><code>unique</code> 去重<br>不会执行之前已经执行过的函数</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	<span class="keyword">var</span> fn1 = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; <span class="built_in">console</span>.log(<span class="number">1</span>);&#125;</div><div class="line">	<span class="keyword">var</span> fn2 = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; <span class="built_in">console</span>.log(<span class="number">2</span>);&#125;</div><div class="line">	<span class="keyword">var</span> fn3 = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; <span class="built_in">console</span>.log(<span class="number">3</span>);&#125;</div><div class="line">	<span class="keyword">var</span> cb = $.Callbacks(<span class="string">'unique'</span>);</div><div class="line">	cb.add(fn1);</div><div class="line">	cb.add(fn2);</div><div class="line">	cb.fire();  <span class="comment">// 1 2 </span></div><div class="line">	cb.add(fn1); </div><div class="line">	cb.add(fn1); </div><div class="line">	cb.add(fn3); </div><div class="line">	cb.fire();  <span class="comment">// 1 2 3</span></div><div class="line">&#125;)</div><div class="line">&lt;<span class="regexp">/script&gt;</span></div></pre></td></tr></table></figure>
<ul>
<li><code>stopOnFalse</code> 停止运行<br>当遇到return false的函数时，后缀的函数不会继续执行</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	<span class="keyword">var</span> fn1 = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; <span class="built_in">console</span>.log(<span class="number">1</span>);&#125;</div><div class="line">	<span class="keyword">var</span> fn2 = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; <span class="built_in">console</span>.log(<span class="number">2</span>); <span class="keyword">return</span> <span class="literal">false</span>;&#125;</div><div class="line">	<span class="keyword">var</span> fn3 = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; <span class="built_in">console</span>.log(<span class="number">3</span>);&#125;</div><div class="line">	<span class="keyword">var</span> cb = $.Callbacks(<span class="string">'stopOnFalse'</span>);</div><div class="line">	cb.add(fn1);</div><div class="line">	cb.add(fn2);</div><div class="line">	cb.fire();  <span class="comment">// 1 2 </span></div><div class="line">	cb.add(fn3); <span class="comment">//因为fn2加上了return false所以fn3不会被执行</span></div><div class="line">	cb.fire();  <span class="comment">// 1 2</span></div><div class="line">&#125;)</div><div class="line">&lt;<span class="regexp">/script&gt;</span></div></pre></td></tr></table></figure>
<p>参数也可以同时用，只要有空格隔开即可<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	<span class="keyword">var</span> fn1 = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; <span class="built_in">console</span>.log(<span class="number">1</span>);&#125;</div><div class="line">	<span class="keyword">var</span> fn2 = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; <span class="built_in">console</span>.log(<span class="number">2</span>); <span class="keyword">return</span> <span class="literal">false</span>;&#125;</div><div class="line">	<span class="keyword">var</span> fn3 = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; <span class="built_in">console</span>.log(<span class="number">3</span>);&#125;</div><div class="line">	<span class="keyword">var</span> cb = $.Callbacks(<span class="string">'once memory '</span>);</div><div class="line">	cb.add(fn1);</div><div class="line">	cb.add(fn2);</div><div class="line">	cb.fire();  <span class="comment">// 1 2  3</span></div><div class="line">	cb.add(fn3); </div><div class="line">	cb.fire(); </div><div class="line">&#125;)</div><div class="line">&lt;<span class="regexp">/script&gt;</span></div></pre></td></tr></table></figure></p>
<h4 id="Deferred-延迟对象"><a href="#Deferred-延迟对象" class="headerlink" title="$.Deferred() 延迟对象"></a><code>$.Deferred()</code> 延迟对象</h4><p>主要应用场景在于异步操作,它的初始状态是pending(等待)</p>
<ul>
<li><code>$.Deferred()</code>内部其实也是通过<code>$.Callbacks()</code>实现的</li>
<li><code>resolve()</code> 是对<code>fire()</code>的二次封装</li>
<li><code>done()</code> 是<code>add()</code>的二次封装</li>
</ul>
<p>参数</p>
<ol>
<li><code>resolve()</code>对应<code>done</code>函数</li>
<li><code>reject()</code>对应<code>fail</code>函数</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	<span class="keyword">var</span> dfd = $.Deferred();</div><div class="line">	setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">		alert(<span class="number">1</span>);</div><div class="line">		dfd.resolve(); <span class="comment">//相当于$.Callbacks()的fire()方法</span></div><div class="line">	&#125;,<span class="number">1000</span>);</div><div class="line">	<span class="comment">//done相当于$.Callbacks()的add()方法的二次封装</span></div><div class="line">	dfd.done(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">		alert(<span class="number">2</span>);</div><div class="line">	&#125;)</div><div class="line">&#125;)</div><div class="line">&lt;<span class="regexp">/script&gt;</span></div></pre></td></tr></table></figure>
<h5 id="when"><a href="#when" class="headerlink" title="$.when()"></a><code>$.when()</code></h5><p>可以在多个异步对象的状态为resolve时再执行done方法<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> ajax1 = $.ajax&#123;<span class="attr">method</span>:<span class="string">'get'</span>,<span class="attr">url</span>:xxxx&#125;</div><div class="line"><span class="keyword">var</span> ajax2 = $.ajax&#123;<span class="attr">method</span>:<span class="string">'get'</span>,<span class="attr">url</span>:xxxx&#125;</div><div class="line">$.when(ajax1,ajax2).done(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	<span class="comment">//只有ajax1和ajax2两个的状态为resolve时才会执行</span></div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<h5 id="then-successCallback-errorCallback"><a href="#then-successCallback-errorCallback" class="headerlink" title="$.then(successCallback,errorCallback)"></a><code>$.then(successCallback,errorCallback)</code></h5><p>$.then(function(<br>    //成功时执行的函数<br>){},function(){<br>    //失败时执行的函数<br>});</p>
<p>利用保持状态的特征<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line"><span class="keyword">var</span> dfd = $.Deferred();</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">aa</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	alert(<span class="number">1</span>);</div><div class="line">&#125;</div><div class="line">$(<span class="string">'html'</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">		dfd.resolve();</div><div class="line">	&#125;,<span class="number">1000</span>);</div><div class="line">	dfd.done(aa); <span class="comment">//第二次点击时，因为状态的保持，所以会被直接执行</span></div><div class="line">&#125;);</div><div class="line">&#125;)</div><div class="line">&lt;<span class="regexp">/script&gt;</span></div></pre></td></tr></table></figure></p>
<h4 id="noConflict-解决库冲突"><a href="#noConflict-解决库冲突" class="headerlink" title="$.noConflict() 解决库冲突"></a><code>$.noConflict()</code> 解决库冲突</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	<span class="comment">//这样就把$符号替换成newJq,从而避免冲突</span></div><div class="line">	<span class="keyword">var</span> newJq = $.noConflict();</div><div class="line">	newJq(<span class="string">'body'</span>).css(<span class="string">'background'</span>,<span class="string">'#333'</span>);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h4 id="JQ源码架构"><a href="#JQ源码架构" class="headerlink" title="JQ源码架构"></a>JQ源码架构</h4><h4 id="jq编写插件"><a href="#jq编写插件" class="headerlink" title="jq编写插件"></a>jq编写插件</h4><h5 id="fn-extend"><a href="#fn-extend" class="headerlink" title="$.fn.extend()"></a><code>$.fn.extend()</code></h5><p>扩展jq对象下的方法，要注意的是使用<code>$.fn.extend</code>时this指向的是对象</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	$.fn.extend(&#123;</div><div class="line">		<span class="attr">setTxt</span> : <span class="function"><span class="keyword">function</span>(<span class="params">str</span>)</span>&#123;</div><div class="line">			<span class="keyword">this</span>.html(str); <span class="comment">//这里的this指向了div1</span></div><div class="line">		&#125;</div><div class="line">	&#125;)</div><div class="line">	$(<span class="string">'#div1'</span>).setTxt(<span class="string">'199111123123'</span>);</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<h5 id="extend"><a href="#extend" class="headerlink" title="$.extend()"></a><code>$.extend()</code></h5><ol>
<li>对象复制的功能<br>利用它后面属性会覆盖前面的特征，在写插件时可以把默认参数写在自定义配置后<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> <span class="keyword">default</span> = &#123;</div><div class="line">	<span class="attr">fontSize</span> : <span class="number">12</span>,</div><div class="line">	<span class="attr">color</span> : <span class="string">'red'</span></div><div class="line">&#125;	</div><div class="line"><span class="keyword">var</span> option = &#123;</div><div class="line">	</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> setting = $.extend(setting,<span class="keyword">default</span>,option);</div></pre></td></tr></table></figure>
</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$.extend(a,b,c);</div><div class="line"><span class="comment">//相当于把b,c身上的属性复制到a身上</span></div></pre></td></tr></table></figure>
<ol>
<li>扩展插件接口的功能<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">$.extend(a);</div><div class="line"><span class="comment">//当只写一个对象时，相当于把a扩展到$对象当中</span></div><div class="line"></div><div class="line">$.trim();</div><div class="line">$.type();</div><div class="line"><span class="comment">//等价于</span></div><div class="line"><span class="comment">//静态方法</span></div><div class="line">$.extend(&#123;</div><div class="line">	<span class="attr">trim</span> : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;</div><div class="line">	type : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;,</div><div class="line">&#125;)</div><div class="line"><span class="comment">//实例方法</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Jquery</span>(<span class="params">selector</span>)</span>&#123;&#125;</div><div class="line">Jquery.prototype.html = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;</div><div class="line">Jquery.prototype.css = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;</div><div class="line"><span class="comment">//等价于</span></div><div class="line">Jquery.fn.extend(&#123;</div><div class="line">	<span class="attr">html</span> : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;,</div><div class="line">	<span class="attr">css</span> : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
</li>
</ol>
<p>参考链接</p>
<ol>
<li><a href="http://www.ruanyifeng.com/blog/2011/08/a_detailed_explanation_of_jquery_deferred_object.html" target="_blank" rel="external">阮一峰 jQuery的deferred对象详解</a></li>
<li><a href="http://v.miaov.com/special/jquery/" target="_blank" rel="external">杜鹏-jquery集中营</a></li>
<li><a href="http://jingyan.baidu.com/article/fec4bce259ef67f2608d8b10.html" target="_blank" rel="external">jQuery.extend和jQuery.fn.extend的区别</a></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[es6]]></title>
      <url>weison.org/2016/07/17/es6/</url>
      <content type="html"><![CDATA[<h1 id="十大"><a href="#十大" class="headerlink" title="十大"></a>十大</h1><h2 id="多行字符串"><a href="#多行字符串" class="headerlink" title="多行字符串"></a>多行字符串</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line">  <span class="keyword">var</span> str = <span class="string">`李冰冰男友证件照日本试射火箭失败柜底发现战</span></div><div class="line">  国宝剑摄影师拍岩浆入海男生地铁当众脱裤中</div><div class="line">  国死海变玫瑰湖华北多地灰霾堆积作弊被发现后跳楼`;</div><div class="line">  <span class="built_in">console</span>.log(str);</div><div class="line"><span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></div></pre></td></tr></table></figure>
<h2 id="模板对象"><a href="#模板对象" class="headerlink" title="模板对象"></a>模板对象</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line">  <span class="keyword">var</span> firstName = <span class="string">'weison'</span>;</div><div class="line">  <span class="keyword">var</span> lastName =  <span class="string">'l'</span>;</div><div class="line">  <span class="keyword">var</span> name = <span class="string">`<span class="subst">$&#123;firstName&#125;</span> <span class="subst">$&#123;lastName&#125;</span>`</span>; <span class="comment">// weison l</span></div><div class="line">&lt;<span class="regexp">/script&gt;</span></div></pre></td></tr></table></figure>
<h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><ol>
<li>参数默认值 Default,这个参数可以是任意值</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">fn2</span>(<span class="params">&#123;a,b=<span class="number">1</span>&#125;</span>)</span>&#123;&#125;    </div><div class="line">  <span class="comment">// es5</span></div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">fn1</span>(<span class="params">a,b</span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> a = a || <span class="number">10</span>,</div><div class="line">        b = b || <span class="number">20</span>;</div><div class="line">    <span class="keyword">return</span> a+b;</div><div class="line">  &#125;</div><div class="line">  <span class="comment">// es6</span></div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">fn2</span>(<span class="params">a=<span class="number">20</span>,b=<span class="number">30</span></span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span> a+b;</div><div class="line">  &#125;</div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">fn3</span>(<span class="params">person=&#123;say:<span class="string">'hi'</span>&#125;</span>)</span>&#123;</div><div class="line">    alert(person.say);</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">var</span> obj = &#123;</div><div class="line">    <span class="attr">say</span> : <span class="string">'hello'</span></div><div class="line">  &#125;</div><div class="line">  fn3(obj);</div><div class="line"><span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></div></pre></td></tr></table></figure>
<ol>
<li><p><code>...rest</code>rest参数<br>类似于<code>arguments</code>,代表剩余的参数。当参数有多个时，为了不用一个个地声明形参，可以使用<code>...rest</code>代表没有形参的部分,<br>它与<code>arguments</code>的区别在于:</p>
<ul>
<li>剩余参数只包含那些没有对应形参的实参，而 arguments 对象包含了传给函数的所有实参。</li>
<li><p>arguments 对象不是一个真实的数组,而剩余参数是真实的 Array实例，也就是说你能够在它上面直接使用所有的数组方法</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">fn1</span>(<span class="params"></span>)</span>&#123; <span class="built_in">console</span>.log(<span class="built_in">Object</span>.prototype.toString.call(<span class="built_in">arguments</span>) ) &#125;; </div><div class="line">  fn1(); <span class="comment">// =&gt; [object Arguments]</span></div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">fn2</span>(<span class="params">...rest</span>)</span>&#123; <span class="built_in">console</span>.log(<span class="built_in">Object</span>.prototype.toString.call(rest) ) &#125;</div><div class="line">  fn2(); <span class="comment">// =&gt; [object Array]</span></div><div class="line">&lt;<span class="regexp">/script&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>arguments 对象对象还有一些附加的属性 (比如callee属性)。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line">  // es5</div><div class="line">  function fn1()&#123;</div><div class="line">   return Math.max.apply(null,arguments);</div><div class="line">  &#125;</div><div class="line">  //es6</div><div class="line">  function fn2(...rest)&#123;</div><div class="line">   return Math.max.apply(null,rest);</div><div class="line">  &#125;</div><div class="line">&lt;/script&gt;</div><div class="line">&lt;script&gt;</div><div class="line">//剩余参数包含了从第二个到最后的所有实参. 然后用第一个实参依次乘以它们:</div><div class="line">//map() 方法返回一个由原数组中的每个元素调用一个指定方法后的返回值组成的新数组 ele代表当前数组被传递的元素</div><div class="line">  function multiply(multiplier, ...theArgs) &#123;</div><div class="line">    return theArgs.map(function (element) &#123;</div><div class="line">      return multiplier * element;</div><div class="line">    &#125;);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  var arr = multiply(2, 1, 2, 3); </div><div class="line">  // [2, 4, 6]</div><div class="line">  console.log(arr);</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>箭头函数,用于作用回调函数使用</p>
<ul>
<li><p>当只有一行语句时，它将变成一个表达式，并返回结果，如果超过一个，则需要明确使用return</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line">  <span class="keyword">var</span> fn1 = <span class="function">(<span class="params">a,b</span>) =&gt;</span> a*b;</div><div class="line">  fn1(<span class="number">3</span>,<span class="number">5</span>); <span class="comment">//=&gt;15</span></div><div class="line">  <span class="keyword">var</span> arr1 = [<span class="number">1</span>,<span class="number">15</span>,<span class="number">20</span>],</div><div class="line">      arr2 = [<span class="number">1</span>,<span class="number">15</span>,<span class="number">20</span>];</div><div class="line">  <span class="comment">//es5</span></div><div class="line">  arr1.map(<span class="function"><span class="keyword">function</span>(<span class="params">ele,index</span>)</span>&#123;</div><div class="line">   <span class="keyword">return</span> <span class="string">'索引值'</span> + index + <span class="string">':'</span>+ ele;</div><div class="line">  &#125;); <span class="comment">// ["索引值0:1", "索引值1:15", "索引值2:20"]</span></div><div class="line">  </div><div class="line">  <span class="comment">//es6</span></div><div class="line">  arr2.map(<span class="function">(<span class="params">ele,index</span>) =&gt;</span> <span class="string">`索引值<span class="subst">$&#123;index&#125;</span>:<span class="subst">$&#123;ele&#125;</span>`</span>);<span class="comment">//["索引值0:1", "索引值1:15", "索引值2:20"]</span></div><div class="line">&lt;<span class="regexp">/script&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>超过一行需明确return</p>
</li>
<li><p>this的指向不由调用的对象决定，而且定义时所在的对象</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">fn1</span>(<span class="params"></span>)</span>&#123;</div><div class="line">     <span class="keyword">this</span>.string = <span class="keyword">this</span>.string.toUpperCase();</div><div class="line">     <span class="keyword">return</span> <span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="keyword">this</span>.string);</div><div class="line">  &#125;</div><div class="line">&lt;<span class="regexp">/script&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>不能当作是构造函数，不能使用<code>new</code>命令，否则抛异常</p>
</li>
<li>该函数内没有<code>arguments</code><br>因此它不能当作是正常的函数</li>
</ul>
</li>
</ol>
<ol>
<li>扩展运算符,将一个数组转换成用逗号分隔的参数序列(把数组或者类数组拆解成N个独立的内容)。主要用于函数调用<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line">  <span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">10</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</div><div class="line">  <span class="built_in">console</span>.log(<span class="built_in">Math</span>.max.apply(<span class="literal">null</span>,arr)); <span class="comment">// =&gt; 10</span></div><div class="line">  <span class="built_in">console</span>.log(<span class="built_in">Math</span>.max(...arr)); <span class="comment">// =&gt; 10</span></div><div class="line">  <span class="keyword">var</span> str = <span class="string">"hello"</span>;</div><div class="line">  <span class="built_in">console</span>.log(...str); <span class="comment">// =&gt; h e l l o</span></div><div class="line">&lt;<span class="regexp">/script&gt;</span></div></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="块级作用域"><a href="#块级作用域" class="headerlink" title="块级作用域"></a>块级作用域</h2><ul>
<li>只在代码块内有效</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line">  &#123;</div><div class="line">    <span class="keyword">let</span> a = <span class="number">10</span>;</div><div class="line">    <span class="keyword">var</span> b = <span class="number">20</span>;</div><div class="line">  &#125;    </div><div class="line">  <span class="built_in">console</span>.log(a,b); <span class="comment">// a is not defined</span></div><div class="line">  <span class="keyword">var</span> arr = [];</div><div class="line">  <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)&#123;</div><div class="line">      arr[i] = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">          <span class="built_in">console</span>.log(i);</div><div class="line">      &#125;</div><div class="line">  &#125;</div><div class="line">  arr[<span class="number">6</span>](); <span class="comment">// 10 var声明的，全局有效，每次循环，新的i都会覆盖旧的i，因为最后输入为最后的i值。</span></div><div class="line"></div><div class="line">  <span class="keyword">var</span> arr2 = [];</div><div class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)&#123;</div><div class="line">      arr2[i] = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">          <span class="built_in">console</span>.log(i);</div><div class="line">      &#125;</div><div class="line">  &#125;</div><div class="line">  arr2[<span class="number">6</span>](); <span class="comment">// 6,变量i是let声明的，当前的i只在本轮循环有效，所以每次i其实都是一个新的变量</span></div><div class="line"></div><div class="line">&lt;<span class="regexp">/script&gt;</span></div></pre></td></tr></table></figure>
<ul>
<li><p>不存在变量提升</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line">  <span class="built_in">console</span>.log(a);</div><div class="line">  <span class="built_in">console</span>.log(b); <span class="comment">//Uncaught ReferenceError: b is not defined</span></div><div class="line">  <span class="keyword">var</span> a = <span class="number">10</span>;</div><div class="line">  <span class="keyword">let</span> b = <span class="number">20</span>;</div><div class="line"><span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></div></pre></td></tr></table></figure>
<ul>
<li>暂存死区<br>如果在代码块中使用<code>let</code>或<code>cost</code>来声明变量，那么这个变量从一开始形成封闭的作用域，不受外界影响 <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line">  <span class="keyword">var</span> a = <span class="number">1</span>;</div><div class="line">  <span class="keyword">if</span>(<span class="literal">true</span>)&#123;</div><div class="line">    a = <span class="number">20</span>; <span class="comment">// ReferenceError: a is not defined</span></div><div class="line">    <span class="keyword">let</span> a = <span class="number">30</span>;</div><div class="line">  &#125;</div><div class="line">  <span class="built_in">console</span>.log(a)</div><div class="line">&lt;<span class="regexp">/script&gt;</span></div></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
<h1 id="变量声明"><a href="#变量声明" class="headerlink" title="变量声明"></a>变量声明</h1><h2 id="let"><a href="#let" class="headerlink" title="let"></a><code>let</code></h2><h3 id="不允许重复声明"><a href="#不允许重复声明" class="headerlink" title="不允许重复声明"></a>不允许重复声明</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line">  <span class="keyword">var</span> a = <span class="number">10</span>;</div><div class="line">  <span class="keyword">let</span> a = <span class="number">20</span>; </div><div class="line">  <span class="built_in">console</span>.log(a); <span class="comment">// =&gt;报错： Uncaught SyntaxError: Identifier 'a' has already been declared</span></div><div class="line">&lt;<span class="regexp">/script&gt;</span></div></pre></td></tr></table></figure>
<h3 id="没有预解释"><a href="#没有预解释" class="headerlink" title="没有预解释"></a>没有预解释</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line">  <span class="built_in">console</span>.log(b); <span class="comment">// Uncaught ReferenceError: b is not defined</span></div><div class="line">  <span class="keyword">let</span> b = <span class="number">20</span>;</div><div class="line"><span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></div></pre></td></tr></table></figure>
<h3 id="块级作用域-1"><a href="#块级作用域-1" class="headerlink" title="块级作用域"></a>块级作用域</h3><p>块级作用域指的是{代码块}在代码块内声明的变量，只能在代码块中访问</p>
<ol>
<li><p>避免内部变量覆盖外部变量</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line">  <span class="keyword">var</span> tmp = <span class="number">10</span>;</div><div class="line">  &#123;</div><div class="line">    <span class="keyword">var</span> tmp = <span class="number">20</span></div><div class="line">  &#125;</div><div class="line">  <span class="built_in">console</span>.log(tmp); <span class="comment">// =&gt; 20</span></div><div class="line">&lt;<span class="regexp">/script&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>计数的循环变量泄露为全局变量 </p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)&#123;</div><div class="line">    <span class="comment">//每次循环时，都是一个独立的作用域，i读取的是每次传进来的i,所以会打印出0到9</span></div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'内部'</span>,i);</div><div class="line">  &#125;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'外部'</span>,i); <span class="comment">//Uncaught ReferenceError: i is not defined</span></div><div class="line">&lt;<span class="regexp">/script&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>应用tab</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></div><div class="line">    *&#123;<span class="attribute">padding</span>:<span class="number">0</span>;<span class="attribute">margin</span>:<span class="number">0</span>;<span class="attribute">list-style</span>:none;<span class="attribute">font-family</span>: <span class="string">"microsoft yahei"</span>&#125;</div><div class="line">    <span class="selector-tag">li</span>&#123;</div><div class="line">      <span class="attribute">float</span>: left;</div><div class="line">      </div><div class="line">    &#125;</div><div class="line">    <span class="selector-class">.tab_h</span> <span class="selector-tag">li</span>&#123;</div><div class="line">      <span class="attribute">width</span>: <span class="number">100px</span>;</div><div class="line">      <span class="attribute">height</span>: <span class="number">40px</span>;</div><div class="line">      <span class="attribute">line-height</span>: <span class="number">40px</span>;</div><div class="line">      <span class="attribute">text-align</span>: center;</div><div class="line">      <span class="attribute">cursor</span>: pointer;</div><div class="line">      <span class="attribute">background</span>: <span class="number">#f3f3f3</span>;</div><div class="line">      <span class="attribute">text-transform</span>: uppercase;</div><div class="line">    &#125;</div><div class="line">    <span class="selector-class">.tab_h</span> <span class="selector-class">.active</span>&#123;</div><div class="line">      <span class="attribute">background</span>: <span class="number">#ccc</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="selector-class">.tab_b</span>&#123;</div><div class="line">      <span class="attribute">clear</span>:both;</div><div class="line">    &#125;</div><div class="line">    <span class="selector-class">.tab_b</span> <span class="selector-tag">li</span>&#123;</div><div class="line">      <span class="attribute">width</span>: <span class="number">300px</span>;</div><div class="line">      <span class="attribute">height</span>: <span class="number">200px</span>;</div><div class="line">      <span class="attribute">background</span>: <span class="number">#ccc</span>;</div><div class="line">      <span class="attribute">font-size</span>: <span class="number">80px</span>;</div><div class="line">      <span class="attribute">display</span>: none;</div><div class="line">      <span class="attribute">text-transform</span>: uppercase;</div><div class="line">      <span class="attribute">line-height</span>: <span class="number">200px</span>;</div><div class="line">      <span class="attribute">text-align</span>: center;</div><div class="line">    &#125;</div><div class="line">    <span class="selector-class">.tab_b</span> <span class="selector-class">.active</span>&#123;</div><div class="line">      <span class="attribute">display</span>: block;</div><div class="line">    &#125;</div><div class="line">  <span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"tab_h"</span> <span class="attr">id</span>=<span class="string">"tab_h"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"active"</span>&gt;</span>tab1<span class="tag">&lt;/<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">li</span>&gt;</span>tab2<span class="tag">&lt;/<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">li</span>&gt;</span>tab3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"tab_b"</span> <span class="attr">id</span>=<span class="string">"tab_b"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"active"</span>&gt;</span>con1<span class="tag">&lt;/<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">li</span>&gt;</span>con2<span class="tag">&lt;/<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">li</span>&gt;</span>con3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">    <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">      <span class="keyword">var</span> tabHeadLi = <span class="built_in">document</span>.getElementById(<span class="string">'tab_h'</span>).querySelectorAll(<span class="string">'li'</span>);</div><div class="line">      <span class="keyword">var</span> tabBdLi = <span class="built_in">document</span>.getElementById(<span class="string">'tab_b'</span>).querySelectorAll(<span class="string">'li'</span>);</div><div class="line">      <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;tabHeadLi.length;i++)&#123;</div><div class="line">        tabHeadLi[i].onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">          <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;tabHeadLi.length;i++)&#123;</div><div class="line">            tabHeadLi[i].className = <span class="string">''</span>;</div><div class="line">            tabBdLi[i].className = <span class="string">''</span>;</div><div class="line">          &#125;</div><div class="line">          <span class="keyword">this</span>.className = <span class="string">"active"</span>;</div><div class="line">          tabBdLi[i].className = <span class="string">"active"</span>;</div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="const"><a href="#const" class="headerlink" title="const"></a><code>const</code></h2><ul>
<li>变量一经声明不能被改变,一般用于防止命名上的冲突，或者一些错误的修改。</li>
<li>对于复合型数据，变量名指向的不是数据，而是数据地址。const只是保证变量名指向的地址不变，并不保证该地址的数据不变。</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line">    <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">      <span class="keyword">const</span> obj = &#123;&#125;</div><div class="line">      obj.name = <span class="string">'weison'</span>;</div><div class="line">      <span class="built_in">console</span>.log(obj.name);</div><div class="line">      <span class="keyword">const</span> obj = &#123;<span class="attr">age</span> : <span class="number">20</span>&#125;; <span class="comment">// =&gt;由于赋值给一个新的对象，改变了地址，所以会报错。Uncaught SyntaxError: Identifier 'obj' has already been declared</span></div><div class="line">    &#125;</div><div class="line">  &lt;<span class="regexp">/script&gt;</span></div></pre></td></tr></table></figure>
<h1 id="解构赋值"><a href="#解构赋值" class="headerlink" title="解构赋值"></a>解构赋值</h1><p>  本质上，这种写法属于“模式匹配”，只要等号两边的模式相同，左右的变量就会被赋予对应的值</p>
<h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><p>按照位置对应关系对变量赋值<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line">  <span class="keyword">var</span> [a,b,c] = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]; <span class="comment">//</span></div><div class="line">  <span class="built_in">console</span>.log(c); <span class="comment">//3</span></div><div class="line"></div><div class="line">  <span class="keyword">let</span> [x,,y] = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</div><div class="line">  <span class="built_in">console</span>.log(x,y); <span class="comment">// 1 3</span></div><div class="line"></div><div class="line">  <span class="keyword">var</span> [e,f] = [<span class="number">1</span>,[<span class="number">2</span>,<span class="number">3</span>]];</div><div class="line">  <span class="built_in">console</span>.log(e,f); <span class="comment">// =&gt; 1 [2, 3]</span></div><div class="line">&lt;<span class="regexp">/script&gt;</span></div></pre></td></tr></table></figure></p>
<h2 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h2><p>对象的解构是根据属性名对应的，不用考虑顺序<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line">  <span class="comment">//相同属性名的写法</span></div><div class="line">  <span class="keyword">let</span> &#123;str,obj,arr&#125; = &#123;</div><div class="line">      <span class="attr">fn</span> : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="built_in">console</span>.log(fn)&#125;,</div><div class="line">      <span class="attr">str</span> : <span class="string">'字符串'</span>,</div><div class="line">      <span class="attr">arr</span> : [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],</div><div class="line">      <span class="attr">obj</span> : &#123;<span class="attr">name</span> : <span class="string">'obj'</span>&#125;</div><div class="line">  &#125;</div><div class="line">  <span class="built_in">console</span>.log(str,obj,arr); <span class="comment">//=&gt; 字符串 &#123;name: "obj"&#125; [1, 2, 3]</span></div><div class="line"></div><div class="line">  <span class="comment">//不同属性名 右侧对应的属性名：新的属性名</span></div><div class="line">  <span class="keyword">let</span> &#123;<span class="attr">d</span>:c,<span class="attr">e</span>:d&#125; = &#123;<span class="attr">d</span>:<span class="string">'css'</span>,<span class="attr">e</span>:<span class="string">'angualrjs'</span>&#125;</div><div class="line">  <span class="built_in">console</span>.log(c,d);</div><div class="line"><span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></div></pre></td></tr></table></figure></p>
<h3 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h3><ol>
<li>从对象中取出对应的值</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">objFn</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span> &#123;</div><div class="line">      <span class="attr">name</span> : <span class="string">'weison'</span>,</div><div class="line">      <span class="attr">age</span>  : <span class="number">27</span>,</div><div class="line">      <span class="attr">obj</span> : <span class="string">'FE'</span></div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">var</span> &#123;name,age&#125; = objFn();</div><div class="line">  <span class="built_in">console</span>.log(name,age); <span class="comment">// =&gt; weison 27</span></div><div class="line">&lt;<span class="regexp">/script&gt;</span></div></pre></td></tr></table></figure>
<ol>
<li>值的交换</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line">  <span class="keyword">var</span> x = <span class="number">10</span>,</div><div class="line">    y = <span class="number">20</span>;</div><div class="line">  <span class="keyword">var</span> [x,y] = [y,x];</div><div class="line">  <span class="built_in">console</span>.log(x,y); <span class="comment">// =&gt; 20 10</span></div><div class="line">&lt;<span class="regexp">/script&gt;</span></div></pre></td></tr></table></figure>
<h1 id="字符串扩展"><a href="#字符串扩展" class="headerlink" title="字符串扩展"></a>字符串扩展</h1><h2 id="str-codePointAt-返回字符对应的编码"><a href="#str-codePointAt-返回字符对应的编码" class="headerlink" title="str.codePointAt() 返回字符对应的编码"></a><code>str.codePointAt()</code> 返回字符对应的编码</h2><p>js使用utf-16来储存字符，每个字符固定占2个字节。对于需要4个字节来储存的字符（unicode码点大于0xFFF的字符），javascript会认为是两个字符。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line">  <span class="keyword">var</span> s = <span class="string">'𠮷'</span>;</div><div class="line">  s.codePointAt(<span class="number">0</span>); <span class="comment">// =&gt;134071</span></div><div class="line">&lt;<span class="regexp">/script&gt;</span></div></pre></td></tr></table></figure></p>
<h2 id="String-fromCodePoint-返回编码对应的字符"><a href="#String-fromCodePoint-返回编码对应的字符" class="headerlink" title="String.fromCodePoint()返回编码对应的字符"></a><code>String.fromCodePoint()</code>返回编码对应的字符</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line">  <span class="built_in">String</span>.fromCodePoint(<span class="number">134071</span>); <span class="comment">// =&gt; "𠮷"</span></div><div class="line">&lt;<span class="regexp">/script&gt;</span></div></pre></td></tr></table></figure>
<h2 id="str-repeat-n-重复生成字符串"><a href="#str-repeat-n-重复生成字符串" class="headerlink" title="str.repeat(n)重复生成字符串"></a><code>str.repeat(n)</code>重复生成字符串</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line">  <span class="keyword">var</span> str = <span class="string">"weison"</span>;</div><div class="line">  str.repeat(<span class="number">3</span>); <span class="comment">//=&gt; "weisonweisonweison"</span></div><div class="line">&lt;<span class="regexp">/script&gt;</span></div></pre></td></tr></table></figure>
<h2 id="模板字符串"><a href="#模板字符串" class="headerlink" title="模板字符串"></a>模板字符串</h2><p>反引号``里面放模板内容，它可以用来串联多行字符串及引入变量${} ,在{}中可以进行运算，也可以进行引用对象的属性<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line">  <span class="keyword">var</span> name = <span class="string">"weison"</span>;</div><div class="line">  <span class="keyword">var</span> age = <span class="number">25</span>;</div><div class="line">  <span class="keyword">var</span> str = <span class="string">`<span class="subst">$&#123;name&#125;</span> is <span class="subst">$&#123;age+<span class="number">2</span>&#125;</span> years old`</span>;</div><div class="line">  <span class="built_in">console</span>.log(str); <span class="comment">// weison is 27 years old</span></div><div class="line">&lt;<span class="regexp">/script&gt;</span></div></pre></td></tr></table></figure></p>
<h2 id="unicode表示法"><a href="#unicode表示法" class="headerlink" title="unicode表示法"></a>unicode表示法</h2><p>javascript允许采用”uXXXX”表示一个字符，其实XXXX表示字符编码<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">"\u0061"</span>); <span class="comment">// =&gt; a</span></div><div class="line">&lt;<span class="regexp">/script&gt;</span></div></pre></td></tr></table></figure></p>
<p>但这个表示只能限于\u0000 ~ uFFFF之间的字符，超出这个字节以双字节表示<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">"\uD842\uDFB7"</span>); <span class="comment">// =&gt; 𠮷</span></div><div class="line">&lt;<span class="regexp">/script&gt;</span></div></pre></td></tr></table></figure></p>
<p>es6中对这一点进行了改变，只要将码点放在大括号内，就能正确解读<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line"> <span class="built_in">console</span>.log(<span class="string">"\u&#123;20BB7&#125;"</span>);<span class="comment">// =&gt; 𠮷 </span></div><div class="line">&lt;<span class="regexp">/script&gt;</span></div></pre></td></tr></table></figure></p>
<h2 id="str-includes"><a href="#str-includes" class="headerlink" title="str.includes()"></a><code>str.includes()</code></h2><p>查看字符串中是否包含特定字符，返回布尔值<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line">  <span class="keyword">var</span> name = <span class="string">"weison"</span>;</div><div class="line">  name.includes(<span class="string">'so'</span>); <span class="comment">// = &gt; true</span></div><div class="line">&lt;<span class="regexp">/script&gt;</span></div></pre></td></tr></table></figure></p>
<h2 id="str-startsWith"><a href="#str-startsWith" class="headerlink" title="str.startsWith()"></a><code>str.startsWith()</code></h2><p>查找的字符串是不是字符串的首位(可以是多个字符)，返回布尔值<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line">  <span class="keyword">var</span> name = <span class="string">"weison"</span>;</div><div class="line"> name.startsWith(<span class="string">'w'</span>); <span class="comment">// = &gt; true</span></div><div class="line"> name.startsWith(<span class="string">'wei'</span>); <span class="comment">// = &gt; true</span></div><div class="line">&lt;<span class="regexp">/script&gt;</span></div></pre></td></tr></table></figure></p>
<h2 id="str-endsWith"><a href="#str-endsWith" class="headerlink" title="str.endsWith()"></a><code>str.endsWith()</code></h2><p>查找的字符串是不是字符串的尾部(可以是多个字符)，返回布尔值<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line"> <span class="keyword">var</span> name = <span class="string">"weison"</span>;</div><div class="line"> name.endsWith(<span class="string">'n'</span>); <span class="comment">// = &gt; true</span></div><div class="line"> name.endsWith(<span class="string">'on'</span>); <span class="comment">// = &gt; true</span></div><div class="line">&lt;<span class="regexp">/script&gt;</span></div></pre></td></tr></table></figure></p>
<h1 id="数字扩展"><a href="#数字扩展" class="headerlink" title="数字扩展"></a>数字扩展</h1><h2 id="二进制与八进制"><a href="#二进制与八进制" class="headerlink" title="二进制与八进制"></a>二进制与八进制</h2><ol>
<li>二进制<code>0b</code></li>
<li>八进制<code>0o</code><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> num1 = <span class="number">0b11</span>, <span class="comment">//二进制</span></div><div class="line"><span class="keyword">var</span> num2 = <span class="number">0o11</span>; <span class="comment">//八进制</span></div><div class="line"><span class="built_in">console</span>.log(num1,num2); <span class="comment">// =》 3，9</span></div></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="Math对象扩展"><a href="#Math对象扩展" class="headerlink" title="Math对象扩展"></a>Math对象扩展</h2><h3 id="Math-trunc-省略小数"><a href="#Math-trunc-省略小数" class="headerlink" title="Math.trunc 省略小数"></a><code>Math.trunc</code> 省略小数</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">console</span>.log(<span class="built_in">Math</span>.trunc(<span class="number">1.5678</span>)); <span class="comment">// =&gt; 1</span></div></pre></td></tr></table></figure>
<h3 id="Math-sign-判断数值是负数，正数还是0"><a href="#Math-sign-判断数值是负数，正数还是0" class="headerlink" title="Math.sign() 判断数值是负数，正数还是0"></a><code>Math.sign()</code> 判断数值是负数，正数还是0</h3><ul>
<li>正数时，返回1</li>
<li>负数时，返回-1</li>
<li>0时，看是+0还是-0<br>这个方法的重点是可以判断是否为正0还是-0<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">console</span>.log(<span class="built_in">Math</span>.sign(<span class="number">-5</span>)); <span class="comment">// =》-1</span></div><div class="line"><span class="built_in">console</span>.log(<span class="built_in">Math</span>.sign(<span class="number">4</span>));  <span class="comment">// =》 1</span></div><div class="line"><span class="built_in">console</span>.log(<span class="built_in">Math</span>.sign(<span class="number">0</span>));  <span class="comment">// =》 0</span></div><div class="line"><span class="built_in">console</span>.log(<span class="built_in">Math</span>.sign(<span class="number">-0</span>)); <span class="comment">// =》-0</span></div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="Math-hypot-勾股定理"><a href="#Math-hypot-勾股定理" class="headerlink" title="Math.hypot()勾股定理"></a><code>Math.hypot()</code>勾股定理</h3><p>返回所有参数的平方和的平方根<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">console</span>.log(<span class="built_in">Math</span>.hypot(<span class="number">3</span>,<span class="number">4</span>)); <span class="comment">// =&gt;5,相当于3的平方加上4的平方，最后再开方</span></div></pre></td></tr></table></figure></p>
<h1 id="数组扩展"><a href="#数组扩展" class="headerlink" title="数组扩展"></a>数组扩展</h1><h2 id="Array-from"><a href="#Array-from" class="headerlink" title="Array.from()"></a><code>Array.from()</code></h2><p>用于将两类对象转换成真正的数组</p>
<ol>
<li>类数组的对象(array-like object)。所谓类数组对象，本质特征是必须要有<code>length</code>属性。因此，只有对象有<code>length</code>属性，就可以通过<code>Array.from()</code>转换成真正的数组</li>
<li>可遍历(ierable)的对象(包括ES6新增的数据结构<code>Set</code>和<code>Map</code>)<h3 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h3><h4 id="DOM操作的NodeList集合转换为真正数组"><a href="#DOM操作的NodeList集合转换为真正数组" class="headerlink" title="DOM操作的NodeList集合转换为真正数组"></a>DOM操作的NodeList集合转换为真正数组</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	<span class="keyword">var</span> oDiv = <span class="built_in">document</span>.getElementsByTagName(<span class="string">'div'</span>);</div><div class="line">	<span class="built_in">console</span>.log(<span class="built_in">Array</span>.from(oDiv));</div><div class="line">&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
</ol>
<h4 id="函数内部的arguments对象"><a href="#函数内部的arguments对象" class="headerlink" title="函数内部的arguments对象"></a>函数内部的arguments对象</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> args = <span class="built_in">Array</span>.from(<span class="built_in">arguments</span>);</div><div class="line">  &#125;</div><div class="line">&lt;<span class="regexp">/script&gt;</span></div></pre></td></tr></table></figure>
<h4 id="字符串也是类数组，也可以转换成数组"><a href="#字符串也是类数组，也可以转换成数组" class="headerlink" title="字符串也是类数组，也可以转换成数组"></a>字符串也是类数组，也可以转换成数组</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">console</span>.log(<span class="built_in">Array</span>.from(<span class="string">'weison'</span>)); <span class="comment">//=&gt;["w", "e", "i", "s", "o", "n"]</span></div></pre></td></tr></table></figure>
<h2 id="Array-of-把参数变成数组的内容"><a href="#Array-of-把参数变成数组的内容" class="headerlink" title="Array.of()把参数变成数组的内容"></a><code>Array.of()</code>把参数变成数组的内容</h2><p>主要解决使用<code>new Array()</code>或者<code>Array()</code>当所传递的参数只有一个是，它会生成指定个数的空数据<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line">  <span class="keyword">var</span> arr = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">5</span>);</div><div class="line">  <span class="built_in">console</span>.log(arr,arr.length); <span class="comment">//=&gt; [] 5</span></div><div class="line">  <span class="keyword">var</span> arr2 = <span class="built_in">Array</span>.of(<span class="number">5</span>);</div><div class="line">  <span class="built_in">console</span>.log(arr2,arr2.length); <span class="comment">// =&gt; [5] 1</span></div><div class="line">  <span class="keyword">var</span> arr3 = <span class="built_in">Array</span>.of(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>);</div><div class="line">  <span class="built_in">console</span>.log(arr3); <span class="comment">// =&gt; [1,2,3,4]</span></div><div class="line">&lt;<span class="regexp">/script&gt;</span></div></pre></td></tr></table></figure></p>
<h2 id="arr-find"><a href="#arr-find" class="headerlink" title="arr.find()"></a><code>arr.find()</code></h2><p>数组实例上的方法，用于找出第1个符合条件的数组成员。它的参数是一个回调函数，所有数组成员依次执行回调函数</p>
<ul>
<li>查找出第一个返回为true的成员</li>
<li>如果都不成员，返回<code>undefined</code></li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line">  <span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>];</div><div class="line">  <span class="comment">/**</span></div><div class="line">   * @param  &#123;[type]&#125; value  [当前被遍历的数组成员]</div><div class="line">   * @param  &#123;[type]&#125; index  [当前成员的索引值]</div><div class="line">   * @param  &#123;[type]&#125; arr    [原数组]</div><div class="line">   * @return &#123;[Booean]&#125;      [返回第一个符合条件的成员]</div><div class="line">   */</div><div class="line">  <span class="keyword">var</span> n = arr.find(<span class="function"><span class="keyword">function</span>(<span class="params">value,index,arr</span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span> value &gt; <span class="number">2</span>;</div><div class="line">  &#125;);</div><div class="line">  <span class="built_in">console</span>.log(n); <span class="comment">// =&gt; 3 返回第一个符合条件的内容</span></div><div class="line">&lt;<span class="regexp">/script&gt;</span></div></pre></td></tr></table></figure>
<h2 id="arr-findIndex"><a href="#arr-findIndex" class="headerlink" title="arr.findIndex()"></a><code>arr.findIndex()</code></h2><ul>
<li>返回第一个符合条件的数组元素位置,跟<code>arr.find()</code>很相似。如果所有成员都不成立，则返回-1</li>
<li>两个方法都可以查找出<code>NaN</code>,可以弥补<code>indexOf</code>方法的不足</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line">  <span class="comment">/**</span></div><div class="line">   * @param  &#123;[type]&#125; value  [当前被遍历的数组成员]</div><div class="line">   * @param  &#123;[type]&#125; index  [当前成员的索引值]</div><div class="line">   * @param  &#123;[type]&#125; arr    [原数组]</div><div class="line">   * @return &#123;[Booean]&#125;      [返回第一个符合条件的成员的索引值]</div><div class="line">   */</div><div class="line">  [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">8</span>].findIndex(<span class="function">(<span class="params">value,index,arr</span>) =&gt;</span> value &gt; <span class="number">7</span>); <span class="comment">// 4</span></div><div class="line">  [<span class="number">1</span>,<span class="number">2</span>,<span class="literal">NaN</span>,<span class="number">4</span>,<span class="number">8</span>].indexOf(<span class="literal">NaN</span>); <span class="comment">// -1</span></div><div class="line">  [<span class="number">1</span>,<span class="number">2</span>,<span class="literal">NaN</span>,<span class="number">4</span>,<span class="number">8</span>].findIndex(<span class="function">(<span class="params">value,index,arr</span>) =&gt;</span> <span class="built_in">Object</span>.is(<span class="literal">NaN</span>,value)); <span class="comment">// 2</span></div><div class="line">&lt;<span class="regexp">/script&gt;</span></div></pre></td></tr></table></figure>
<h2 id="arr-fill-value-start-end-数组填充"><a href="#arr-fill-value-start-end-数组填充" class="headerlink" title="arr.fill(value, start, end)数组填充"></a><code>arr.fill(value, start, end)</code>数组填充</h2><ul>
<li>value 当前填充数值的内容</li>
<li>start 填充开始的位置</li>
<li>end   填充结束的位置(不包含end位)</li>
<li>返回修改后的数组。<br>start 和 end 参数是可选的, 其默认值分别为 0 和 this 对象的 length 属性值.</li>
<li>如果 start 是个负数, 则开始索引会被自动计算成为 length+start, 其中 length 是 this 对象的 length 属性值. </li>
<li>如果 end 是个负数, 则结束索引会被自动计算成为 length+end.</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line">  <span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>].fill(); <span class="comment">// =&gt;[undefined, undefined, undefined, undefined]</span></div><div class="line">  <span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>].fill(<span class="number">1</span>); <span class="comment">// =&gt;[1, 1, 1, 1]</span></div><div class="line">  <span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>].fill(<span class="number">8</span>,<span class="number">0</span>,<span class="number">2</span>); <span class="comment">// =&gt;[8, 8, 3, 4]</span></div><div class="line">&lt;<span class="regexp">/script&gt;</span></div></pre></td></tr></table></figure>
<h2 id="for-of-遍历数据的value值"><a href="#for-of-遍历数据的value值" class="headerlink" title="for..of 遍历数据的value值"></a><code>for..of</code> 遍历数据的value值</h2><p>要该数据类型有遍历接口(有length属性)</p>
<h3 id="遍历数组"><a href="#遍历数组" class="headerlink" title="遍历数组"></a>遍历数组</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line">  <span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>];</div><div class="line">  <span class="keyword">for</span>(<span class="keyword">var</span> value <span class="keyword">of</span> arr)&#123;</div><div class="line">    <span class="built_in">console</span>.log(value);</div><div class="line">  &#125;   </div><div class="line">&lt;<span class="regexp">/script&gt;</span></div></pre></td></tr></table></figure>
<h3 id="遍历字符串"><a href="#遍历字符串" class="headerlink" title="遍历字符串"></a>遍历字符串</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line">  <span class="keyword">var</span> str = <span class="string">'weison'</span>;</div><div class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> value <span class="keyword">of</span> arr)&#123;</div><div class="line">    <span class="built_in">console</span>.log(value); <span class="comment">// =&gt; w e i s o n</span></div><div class="line">  &#125;   </div><div class="line">&lt;<span class="regexp">/script&gt;</span></div></pre></td></tr></table></figure>
<h2 id="使用keys-来返回对象的key值"><a href="#使用keys-来返回对象的key值" class="headerlink" title="使用keys()来返回对象的key值"></a>使用<code>keys()</code>来返回对象的key值</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line">  <span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>];</div><div class="line">   <span class="keyword">for</span>(<span class="keyword">var</span> key <span class="keyword">of</span> arr.keys())&#123;</div><div class="line">    <span class="built_in">console</span>.log(key); <span class="comment">// =&gt;数组的Key值是索引值 0 1 2 3</span></div><div class="line">  &#125;</div><div class="line">&lt;<span class="regexp">/script&gt;</span></div></pre></td></tr></table></figure>
<h2 id="使用entries来同时遍历key和value值"><a href="#使用entries来同时遍历key和value值" class="headerlink" title="使用entries来同时遍历key和value值"></a>使用<code>entries</code>来同时遍历key和value值</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line">  <span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>];</div><div class="line">   <span class="keyword">for</span>(<span class="keyword">var</span> [key,value] <span class="keyword">of</span> arr.entries())&#123;</div><div class="line">    <span class="built_in">console</span>.log(key,value)</div><div class="line">  &#125;</div><div class="line">&lt;<span class="regexp">/script&gt;</span></div></pre></td></tr></table></figure>
<h2 id="数组推导"><a href="#数组推导" class="headerlink" title="数组推导"></a>数组推导</h2><p>允许直接从已有的数组直接生成新的数组<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line">  <span class="comment">// 暂时只在firefox可使用</span></div><div class="line">  <span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>];</div><div class="line">  <span class="keyword">var</span> arr2 = [<span class="keyword">for</span> (value <span class="keyword">of</span> arr) value * <span class="number">10</span>];</div><div class="line">  <span class="built_in">console</span>.log(arr2);</div><div class="line"><span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></div></pre></td></tr></table></figure></p>
<h1 id="对象扩展"><a href="#对象扩展" class="headerlink" title="对象扩展"></a>对象扩展</h1><h2 id="简洁表示法"><a href="#简洁表示法" class="headerlink" title="简洁表示法"></a>简洁表示法</h2><h3 id="属性的简洁表示法"><a href="#属性的简洁表示法" class="headerlink" title="属性的简洁表示法"></a>属性的简洁表示法</h3><p>es6允许对象中只写属性名，不写属性值。这时，属性名等于属性名所代表的属性值<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line">  <span class="keyword">var</span> foo = <span class="string">'bar'</span>;</div><div class="line">  <span class="keyword">var</span> baz = &#123;foo&#125;; <span class="comment">// 等价于 var baz = &#123;foo:foo&#125;</span></div><div class="line">  <span class="built_in">console</span>.log(baz); <span class="comment">// =&gt;&#123;foo: "bar"&#125;</span></div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params">x,y</span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span> &#123;x,y&#125; <span class="comment">// 等价于 return &#123;x:x,y:y&#125;</span></div><div class="line">  &#125;</div><div class="line">  <span class="built_in">console</span>.log(fn(<span class="number">3</span>,<span class="number">4</span>)); <span class="comment">//Object &#123;x: 3, y: 4&#125;  </span></div><div class="line">&lt;<span class="regexp">/script&gt;</span></div></pre></td></tr></table></figure></p>
<h3 id="方法的简洁表示法"><a href="#方法的简洁表示法" class="headerlink" title="方法的简洁表示法"></a>方法的简洁表示法</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line">  <span class="keyword">var</span> obj = &#123; <span class="attr">name</span>:<span class="string">'weison'</span>,</div><div class="line">              show()&#123; <span class="built_in">console</span>.log(<span class="keyword">this</span>.name)&#125; <span class="comment">// 等价于 show : function()&#123;console.log(this.name)&#125;</span></div><div class="line">            &#125;</div><div class="line">  obj.show(); <span class="comment">//weison</span></div><div class="line">&lt;<span class="regexp">/script&gt;</span></div></pre></td></tr></table></figure>
<h2 id="属性名的表达式"><a href="#属性名的表达式" class="headerlink" title="属性名的表达式"></a>属性名的表达式</h2><p>es6允许字面量定义对象时，用表达式作为对象的属性名，即把表达式放在方括号内<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line">   <span class="keyword">var</span> a1 = <span class="string">"age"</span></div><div class="line">   <span class="keyword">var</span> obj = &#123;</div><div class="line">       <span class="attr">name</span> : <span class="string">'weison'</span>,</div><div class="line">       [a1] : <span class="number">27</span>,</div><div class="line">       [<span class="string">'get'</span>+<span class="string">'Name'</span>]()&#123;</div><div class="line">          <span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</div><div class="line">       &#125;  </div><div class="line">   &#125;</div><div class="line">   obj.getName(); <span class="comment">// =&gt; weison</span></div><div class="line">   obj[a1];</div><div class="line"><span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></div></pre></td></tr></table></figure></p>
<ul>
<li>注意属性名表达式与简洁表达式不能同时使用，否则会报错<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line">  <span class="comment">// 报错</span></div><div class="line">  <span class="keyword">var</span> foo = <span class="string">"bar"</span>;</div><div class="line">  <span class="keyword">var</span> bar = <span class="string">'abc'</span>;</div><div class="line">  <span class="keyword">var</span> baz = &#123;[foo]&#125;</div><div class="line"></div><div class="line">  <span class="comment">//正确</span></div><div class="line">  <span class="keyword">var</span> foo = <span class="string">"bar"</span></div><div class="line">  <span class="keyword">var</span> baz = &#123;[foo]:<span class="string">'abc'</span>&#125;;</div><div class="line"><span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="Object-is-判断传入的参数是否相等"><a href="#Object-is-判断传入的参数是否相等" class="headerlink" title="Object.is()判断传入的参数是否相等"></a><code>Object.is()</code>判断传入的参数是否相等</h2><p>跟<code>===</code>类似，不过比·<code>===</code>强大</p>
<ol>
<li><p>可以判断0与-0</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line">  <span class="string">'user strict'</span>;</div><div class="line">  <span class="number">0</span> === <span class="number">-0</span>; <span class="comment">//=&gt;true</span></div><div class="line">  <span class="built_in">Object</span>.is(<span class="number">0</span>,<span class="number">-0</span>); <span class="comment">//false</span></div><div class="line">&lt;<span class="regexp">/script&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>判断<code>NaN</code>为true</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line">  <span class="built_in">Object</span>.is(<span class="literal">NaN</span>,<span class="literal">NaN</span>); <span class="comment">//=&gt; true</span></div><div class="line">&lt;<span class="regexp">/script&gt;</span></div></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="Object-assign-target-source1-source2"><a href="#Object-assign-target-source1-source2" class="headerlink" title="Object.assign(target,source1,source2)"></a><code>Object.assign(target,source1,source2)</code></h2><ul>
<li>合并对象中可枚举的属性，添加到第一个参数上,类似的jquery的<code>$.extend()</code>方法</li>
<li>假如目标对象于源对象有同名属性，或者多个源对象有重名的属性，则后面的属性会覆盖前面的属性</li>
<li>只要有一个参数不是对象，就会抛出<code>TypeError</code>错误</li>
<li>不可枚举的属性（<code>enumerable</code>为<code>false</code>）和继承的属性不会被复制</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line">  <span class="keyword">var</span> obj = &#123;<span class="attr">name</span>:<span class="string">'name1'</span>&#125;</div><div class="line">  <span class="keyword">var</span> obj2 = &#123;<span class="attr">name</span>:<span class="string">'name2'</span>,<span class="attr">age</span>:<span class="number">20</span>&#125;</div><div class="line">  <span class="keyword">var</span> obj3 = &#123;<span class="attr">name</span>:<span class="string">''</span>,<span class="attr">hobby</span>:<span class="string">'sport'</span>&#125;</div><div class="line">  <span class="keyword">var</span> assignObj = <span class="built_in">Object</span>.assign(obj,obj2,obj3); <span class="comment">//Object &#123;name: "", age: 20, hobby: "sport"&#125;</span></div><div class="line">&lt;<span class="regexp">/script&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line">  <span class="keyword">var</span> target = &#123;&#125;;</div><div class="line">  <span class="keyword">var</span> source1 = &#123;<span class="attr">a</span>:<span class="number">1</span>&#125;;</div><div class="line">  <span class="keyword">var</span> source2 = &#123;<span class="attr">a</span>:<span class="number">2</span>,<span class="attr">b</span>:<span class="number">3</span>&#125;;</div><div class="line">  <span class="built_in">Object</span>.assign(target,source1,source2,<span class="built_in">Object</span>.defineProperty(&#123;&#125;,<span class="string">'invisible'</span>,&#123;</div><div class="line">     <span class="attr">enumerable</span>:<span class="literal">false</span>,</div><div class="line">     <span class="attr">value</span> : <span class="string">'hello'</span></div><div class="line">  &#125;));</div><div class="line">  <span class="built_in">console</span>.log(target); <span class="comment">// =&gt; &#123;a: 2, b: 3&#125;</span></div><div class="line">&lt;<span class="regexp">/script&gt;</span></div></pre></td></tr></table></figure>
<h2 id="Object-getPrototypeOf-object"><a href="#Object-getPrototypeOf-object" class="headerlink" title="Object.getPrototypeOf(object)"></a><code>Object.getPrototypeOf(object)</code></h2><p>获取一个对象的prototype属性<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line">  <span class="keyword">var</span>  Company = <span class="function"><span class="keyword">function</span>(<span class="params">name</span>)</span>&#123;</div><div class="line">    <span class="keyword">this</span>.name = name;</div><div class="line">  &#125;</div><div class="line">  Company.prototype.showName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    alert(<span class="keyword">this</span>.name);</div><div class="line">  &#125;</div><div class="line">  Company.prototype.speak = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'speak'</span>);</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">var</span> IBM = <span class="keyword">new</span> Company(<span class="string">'IBM'</span>);</div><div class="line">  <span class="built_in">console</span>.log(<span class="built_in">Object</span>.getPrototypeOf(IBM));</div><div class="line"><span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></div></pre></td></tr></table></figure></p>
<h2 id="Object-setPrototypeOf-object-prototype"><a href="#Object-setPrototypeOf-object-prototype" class="headerlink" title="Object.setPrototypeOf(object,prototype)"></a><code>Object.setPrototypeOf(object,prototype)</code></h2><p>设置一个对象的prototype对象<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line">  <span class="keyword">var</span>  Company = <span class="function"><span class="keyword">function</span>(<span class="params">name</span>)</span>&#123;</div><div class="line">    <span class="keyword">this</span>.name = name;</div><div class="line">  &#125;</div><div class="line">  Company.prototype.showName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    alert(<span class="keyword">this</span>.name);</div><div class="line">  &#125;</div><div class="line">  Company.prototype.speak = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'speak'</span>);</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">var</span> IBM = <span class="keyword">new</span> Company(<span class="string">'IBM'</span>);</div><div class="line">  <span class="keyword">var</span> test = &#123;&#125;;</div><div class="line">  <span class="built_in">Object</span>.setPrototypeOf(test,<span class="built_in">Object</span>.getPrototypeOf(IBM));</div><div class="line">  <span class="built_in">console</span>.log(test);</div><div class="line">  test.speak(); <span class="comment">//=&gt; 'speak'</span></div><div class="line">&lt;<span class="regexp">/script&gt;</span></div></pre></td></tr></table></figure></p>
<h2 id="proxy代理服务"><a href="#proxy代理服务" class="headerlink" title="proxy代理服务"></a><code>proxy</code>代理服务</h2><p>Proxy 对象用来为基础操作（例如：属性查找(get)、赋值(set)、枚举、方法调用等）定义用户自定义行为<br><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Proxy" target="_blank" rel="external">mdn-Proxy</a><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line">  <span class="keyword">var</span> obj = <span class="keyword">new</span> <span class="built_in">Proxy</span>(&#123;&#125;,&#123;</div><div class="line">    get(target,key,receiver)&#123;</div><div class="line"></div><div class="line">    &#125;,</div><div class="line">    set()&#123;&#125;</div><div class="line">  &#125;)</div><div class="line">&lt;<span class="regexp">/script&gt;</span></div></pre></td></tr></table></figure></p>
<h3 id="访问属性值，当该属性值不存时，默认返回25"><a href="#访问属性值，当该属性值不存时，默认返回25" class="headerlink" title="访问属性值，当该属性值不存时，默认返回25"></a>访问属性值，当该属性值不存时，默认返回25</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line">  <span class="keyword">var</span> hander = &#123;</div><div class="line">    <span class="attr">get</span> : <span class="function"><span class="keyword">function</span>(<span class="params">target,name</span>)</span>&#123;</div><div class="line">      <span class="keyword">return</span> name <span class="keyword">in</span> target ? target[name] : <span class="number">25</span></div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">var</span> obj = <span class="keyword">new</span> <span class="built_in">Proxy</span>(&#123;<span class="attr">name</span>:<span class="string">'weison'</span>&#125;,hander);</div><div class="line">  <span class="built_in">console</span>.log(obj.age); <span class="comment">// =&gt; 25</span></div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'age'</span> <span class="keyword">in</span> obj); <span class="comment">// =&gt; false</span></div><div class="line">&lt;<span class="regexp">/script&gt;</span></div></pre></td></tr></table></figure>
<h3 id="无操作转发代理"><a href="#无操作转发代理" class="headerlink" title="无操作转发代理"></a>无操作转发代理</h3><p>代理会将所有应用到它的操作转发到这个对象上,如对代理进行赋值，那么也会同时赋值给被代理虚拟化的对象<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line">  <span class="keyword">var</span> target = &#123;&#125;,</div><div class="line">      obj1 = <span class="keyword">new</span> <span class="built_in">Proxy</span>(target,&#123;&#125;);</div><div class="line">  target.name = <span class="string">'weison'</span>;</div><div class="line">  <span class="built_in">console</span>.log(obj1); <span class="comment">// &#123;name:'weison'&#125;</span></div><div class="line">  obj1.age = <span class="number">25</span>;</div><div class="line">  <span class="built_in">console</span>.log(target); <span class="comment">// Object &#123;name: "weison", age: 25&#125;</span></div><div class="line">&lt;<span class="regexp">/script&gt;</span></div></pre></td></tr></table></figure></p>
<h2 id="Object-keys-获取对象的所有Key值"><a href="#Object-keys-获取对象的所有Key值" class="headerlink" title="Object.keys()获取对象的所有Key值"></a><code>Object.keys()</code>获取对象的所有Key值</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line">  <span class="keyword">var</span> obj = &#123;</div><div class="line">    <span class="attr">name</span> : <span class="string">'weison'</span>,</div><div class="line">    <span class="attr">age</span> : <span class="number">25</span></div><div class="line">  &#125;</div><div class="line">  <span class="built_in">console</span>.log(<span class="built_in">Object</span>.keys(obj)); <span class="comment">// =&gt; ["name", "age"]</span></div><div class="line">  <span class="built_in">console</span>.log(<span class="built_in">Reflect</span>.ownKeys(obj)); <span class="comment">// =&gt; ["name", "age"] 方法的作用跟Object.keys()一样</span></div><div class="line">&lt;<span class="regexp">/script&gt;</span></div></pre></td></tr></table></figure>
<h1 id="函数的扩展"><a href="#函数的扩展" class="headerlink" title="函数的扩展"></a>函数的扩展</h1><h2 id="函数默认值"><a href="#函数默认值" class="headerlink" title="函数默认值"></a>函数默认值</h2><ol>
<li>默认值必须是末尾的参数，因为一旦设置了默认值，就代表这个参数是可以被忽略的</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params">a=<span class="number">1</span>,b=<span class="number">2</span></span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(a+b);</div><div class="line">  &#125;    </div><div class="line">  fn(); <span class="comment">// =&gt; 3</span></div><div class="line">&lt;<span class="regexp">/script&gt;</span></div></pre></td></tr></table></figure>
<h2 id="rest参数"><a href="#rest参数" class="headerlink" title="rest参数"></a>rest参数</h2><p>把没有形参对象的值保存下来，<code>...</code>+变量名<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params">a,b,c,...rest</span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(...rest);</div><div class="line">  &#125;</div><div class="line">  <span class="built_in">console</span>.log(fn(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>)); <span class="comment">// =&gt; 4 5 6 7s</span></div><div class="line">&lt;<span class="regexp">/script&gt;</span></div></pre></td></tr></table></figure></p>
<h2 id="扩展运算符"><a href="#扩展运算符" class="headerlink" title="扩展运算符"></a>扩展运算符</h2><p>把数组或类数组,或有遍历接口的数据折分,并用逗号串联起来<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line">  <span class="keyword">var</span> str = <span class="string">"weison"</span>;</div><div class="line">  <span class="keyword">var</span> arr = [...str]; <span class="comment">// =&gt; ["w", "e", "i", "s", "o", "n"]</span></div><div class="line">&lt;<span class="regexp">/script&gt;</span></div></pre></td></tr></table></figure></p>
<h2 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h2><p>作为一个回调函数来使用<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line">  arr.sort(<span class="function">(<span class="params">a,b</span>) =&gt;</span> a-b ) <span class="comment">// =&gt;等价于 arr.sort(function(a,b)&#123; return a-b&#125;);</span></div><div class="line">&lt;<span class="regexp">/script&gt;</span></div></pre></td></tr></table></figure></p>
<ul>
<li>箭头函数的this对象，绑定的是定义时的对象，而不是使用时所在的对象</li>
<li>不可以当作构造函数，因为不能使用new命令</li>
<li>该函数体内不存在<code>arguments</code>对象</li>
</ul>
<h1 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h1><h2 id="set"><a href="#set" class="headerlink" title="set"></a><code>set</code></h2><p>作为一种新的数据结构，它不允许重复值的产生，有重复值会删除多余的<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line">  <span class="keyword">var</span> set = <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">3</span>,<span class="number">1</span>]);</div><div class="line">  <span class="built_in">console</span>.log(set); <span class="comment">// =&gt; Set &#123;1, 2, 3, 4, 5&#125;</span></div><div class="line">&lt;<span class="regexp">/script&gt;</span></div></pre></td></tr></table></figure></p>
<h3 id="set-size实例成员个数"><a href="#set-size实例成员个数" class="headerlink" title="set.size实例成员个数"></a><code>set.size</code>实例成员个数</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line">  <span class="keyword">var</span> set = <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">3</span>,<span class="number">1</span>]);</div><div class="line">  <span class="built_in">console</span>.log(set.size); <span class="comment">//  5</span></div><div class="line">&lt;<span class="regexp">/script&gt;</span></div></pre></td></tr></table></figure>
<h3 id="set-add-增加成员"><a href="#set-add-增加成员" class="headerlink" title="set.add()增加成员"></a><code>set.add()</code>增加成员</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line">  <span class="keyword">var</span> set = <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">3</span>,<span class="number">1</span>]);</div><div class="line">  set.add(<span class="number">8</span>);</div><div class="line">  <span class="built_in">console</span>.log(set.size); <span class="comment">// =&gt; 6</span></div><div class="line">&lt;<span class="regexp">/script&gt;</span></div></pre></td></tr></table></figure>
<h3 id="set-delete-成员的值-删除成员"><a href="#set-delete-成员的值-删除成员" class="headerlink" title="set.delete(成员的值)删除成员"></a><code>set.delete(成员的值)</code>删除成员</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line">  <span class="keyword">var</span> set = <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="number">1</span>,<span class="number">2</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]);</div><div class="line">  set.delete(<span class="number">3</span>);</div><div class="line">  <span class="built_in">console</span>.log(set);</div><div class="line"><span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></div></pre></td></tr></table></figure>
<h3 id="set-has-查找是否包含某个成员"><a href="#set-has-查找是否包含某个成员" class="headerlink" title="set.has()查找是否包含某个成员"></a><code>set.has()</code>查找是否包含某个成员</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line">  <span class="keyword">var</span> set = <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">8</span>]);</div><div class="line">  <span class="built_in">console</span>.log(set.has(<span class="number">8</span>)); <span class="comment">// true</span></div><div class="line">&lt;<span class="regexp">/script&gt;</span></div></pre></td></tr></table></figure>
<h3 id="set-clear-清空所有数据"><a href="#set-clear-清空所有数据" class="headerlink" title="set.clear()清空所有数据"></a><code>set.clear()</code>清空所有数据</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line">  <span class="keyword">var</span> set = <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">8</span>]);</div><div class="line">  <span class="built_in">console</span>.log(set.clear()); <span class="comment">// =&gt; &#123;&#125;</span></div><div class="line">&lt;<span class="regexp">/script&gt;</span></div></pre></td></tr></table></figure>
<h2 id="new-Map-key-value"><a href="#new-Map-key-value" class="headerlink" title="new Map([key,value])"></a><code>new Map([key,value])</code></h2><ul>
<li>它是一个构造函数，以键值对形式出现。</li>
<li>不允许重复的值,如果重复，后面的值会覆盖前面的值</li>
<li>可以使用对象来充当<code>key</code>值</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line">  <span class="keyword">var</span> obj = &#123;</div><div class="line">    <span class="attr">n1</span> : <span class="string">'text1'</span>,</div><div class="line">    <span class="attr">n2</span> : <span class="string">"text2"</span></div><div class="line">  &#125;</div><div class="line">  <span class="keyword">var</span> weison = <span class="keyword">new</span> <span class="built_in">Map</span>([[<span class="string">'name'</span>,<span class="string">'weison'</span>],[<span class="string">"age"</span>,<span class="number">26</span>]]); <span class="comment">// Map &#123;"name" =&gt; "weison", "age" =&gt; 26&#125;    </span></div><div class="line">&lt;<span class="regexp">/script&gt;</span></div></pre></td></tr></table></figure>
<h3 id="map-size返回成员数量"><a href="#map-size返回成员数量" class="headerlink" title="map.size返回成员数量"></a><code>map.size</code>返回成员数量</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line">   <span class="keyword">var</span> weison = <span class="keyword">new</span> <span class="built_in">Map</span>([[<span class="string">'name'</span>,<span class="string">'weison'</span>],[<span class="string">"age"</span>,<span class="number">26</span>]]);</div><div class="line">   <span class="built_in">console</span>.log(weison.size); <span class="comment">// =&gt; 2</span></div><div class="line">&lt;<span class="regexp">/script&gt;</span></div></pre></td></tr></table></figure>
<h3 id="map-set-key-value-添加值"><a href="#map-set-key-value-添加值" class="headerlink" title="map.set(key,value)添加值"></a><code>map.set(key,value)</code>添加值</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line"> <span class="keyword">var</span> weison = <span class="keyword">new</span> <span class="built_in">Map</span>();</div><div class="line"> weison.set(<span class="string">'name'</span>,<span class="string">'weison'</span>);</div><div class="line"> <span class="built_in">console</span>.log(weison); <span class="comment">// Map &#123;"name" =&gt; "weison"&#125;</span></div><div class="line">&lt;<span class="regexp">/script&gt;</span></div></pre></td></tr></table></figure>
<h3 id="map-get-key-获取值"><a href="#map-get-key-获取值" class="headerlink" title="map.get(key)获取值"></a><code>map.get(key)</code>获取值</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line">  <span class="keyword">var</span> weison = <span class="keyword">new</span> <span class="built_in">Map</span>([[<span class="string">'name'</span>,<span class="string">'weison'</span>],[<span class="string">"age"</span>,<span class="number">26</span>]]);</div><div class="line">  <span class="built_in">console</span>.log(weison.get(<span class="string">'age'</span>)); <span class="comment">// 26</span></div><div class="line">&lt;<span class="regexp">/script&gt;</span></div></pre></td></tr></table></figure>
<h3 id="map-has-key-查找是否包含某个成员"><a href="#map-has-key-查找是否包含某个成员" class="headerlink" title="map.has(key)查找是否包含某个成员"></a><code>map.has(key)</code>查找是否包含某个成员</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line">  <span class="keyword">var</span> weison = <span class="keyword">new</span> <span class="built_in">Map</span>([[<span class="string">'name'</span>,<span class="string">'weison'</span>],[<span class="string">"age"</span>,<span class="number">26</span>]]);</div><div class="line">  <span class="built_in">console</span>.log(weison.has(<span class="string">'job'</span>)); <span class="comment">// false</span></div><div class="line">&lt;<span class="regexp">/script&gt;</span></div></pre></td></tr></table></figure>
<h3 id="map-delete-key-删除包含某个成员"><a href="#map-delete-key-删除包含某个成员" class="headerlink" title="map.delete(key)删除包含某个成员"></a><code>map.delete(key)</code>删除包含某个成员</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line">  <span class="keyword">var</span> weison = <span class="keyword">new</span> <span class="built_in">Map</span>([[<span class="string">'name'</span>,<span class="string">'weison'</span>],[<span class="string">"age"</span>,<span class="number">26</span>]]);</div><div class="line">  <span class="built_in">console</span>.log(weison.delete(<span class="string">'job'</span>)); <span class="comment">// &#123;"name" =&gt; "weison"&#125;</span></div><div class="line">&lt;<span class="regexp">/script&gt;</span></div></pre></td></tr></table></figure>
<h3 id="map-clear-删除所有成员"><a href="#map-clear-删除所有成员" class="headerlink" title="map.clear()删除所有成员"></a><code>map.clear()</code>删除所有成员</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line">  <span class="keyword">var</span> weison = <span class="keyword">new</span> <span class="built_in">Map</span>([[<span class="string">'name'</span>,<span class="string">'weison'</span>],[<span class="string">"age"</span>,<span class="number">26</span>]]);</div><div class="line">  <span class="built_in">console</span>.log(weison.clear()); <span class="comment">// Map &#123;&#125;</span></div><div class="line">&lt;<span class="regexp">/script&gt;</span></div></pre></td></tr></table></figure>
<h3 id="map-keys-遍历所有key值"><a href="#map-keys-遍历所有key值" class="headerlink" title="map.keys()遍历所有key值"></a><code>map.keys()</code>遍历所有key值</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line">  <span class="keyword">var</span> weison = <span class="keyword">new</span> <span class="built_in">Map</span>([[<span class="string">'name'</span>,<span class="string">'weison'</span>],[<span class="string">"age"</span>,<span class="number">26</span>]]);</div><div class="line">  <span class="keyword">for</span>(<span class="keyword">var</span> key <span class="keyword">of</span> weison.keys())&#123;</div><div class="line">    <span class="built_in">console</span>.log(key); <span class="comment">// =&gt; name age</span></div><div class="line">  &#125;</div><div class="line">&lt;<span class="regexp">/script&gt;</span></div></pre></td></tr></table></figure>
<h3 id="map-values-遍历所有value值"><a href="#map-values-遍历所有value值" class="headerlink" title="map.values()遍历所有value值"></a><code>map.values()</code>遍历所有value值</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line">  <span class="keyword">var</span> weison = <span class="keyword">new</span> <span class="built_in">Map</span>([[<span class="string">'name'</span>,<span class="string">'weison'</span>],[<span class="string">"age"</span>,<span class="number">26</span>]]);</div><div class="line">  <span class="keyword">for</span>(<span class="keyword">var</span> value <span class="keyword">of</span> weison.values())&#123;</div><div class="line">    <span class="built_in">console</span>.log(value); <span class="comment">// =&gt; 'weison' 26]</span></div><div class="line">  &#125;</div><div class="line">&lt;<span class="regexp">/script&gt;</span></div></pre></td></tr></table></figure>
<h3 id="map-entries-遍历key和value值"><a href="#map-entries-遍历key和value值" class="headerlink" title="map.entries()遍历key和value值"></a><code>map.entries()</code>遍历key和value值</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line">  <span class="keyword">var</span> weison = <span class="keyword">new</span> <span class="built_in">Map</span>([[<span class="string">'name'</span>,<span class="string">'weison'</span>],[<span class="string">"age"</span>,<span class="number">26</span>]]);</div><div class="line">  <span class="keyword">for</span>(<span class="keyword">var</span> [key,value] <span class="keyword">of</span> weison.entries())&#123;</div><div class="line">    <span class="built_in">console</span>.log(key,value); <span class="comment">// =&gt; name weison   age 26</span></div><div class="line">  &#125;</div><div class="line">&lt;<span class="regexp">/script&gt;</span></div></pre></td></tr></table></figure>
<h3 id="map-forEach-function-value-key-遍历key和value值"><a href="#map-forEach-function-value-key-遍历key和value值" class="headerlink" title="map.forEach(function(value,key){})遍历key和value值"></a><code>map.forEach(function(value,key){})</code>遍历key和value值</h3><h1 id="模块的导入与导出"><a href="#模块的导入与导出" class="headerlink" title="模块的导入与导出"></a>模块的导入与导出</h1><h2 id="export"><a href="#export" class="headerlink" title="export"></a><code>export</code></h2><h2 id="import"><a href="#import" class="headerlink" title="import"></a><code>import</code></h2><h3 id="为输入的变量更换一个新的名字-as"><a href="#为输入的变量更换一个新的名字-as" class="headerlink" title="为输入的变量更换一个新的名字 as"></a>为输入的变量更换一个新的名字 <code>as</code></h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line">  <span class="keyword">import</span> &#123; name <span class="keyword">as</span> newName &#125; <span class="keyword">from</span> <span class="string">'导入文件的路径'</span></div><div class="line">&lt;<span class="regexp">/script&gt;</span></div></pre></td></tr></table></figure>
<h3 id="把输出文件整体导入进来-as"><a href="#把输出文件整体导入进来-as" class="headerlink" title="把输出文件整体导入进来 * as"></a>把输出文件整体导入进来 <code>* as</code></h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line">  <span class="keyword">import</span> * <span class="keyword">as</span> 存放的变量名称 <span class="keyword">from</span> <span class="string">'导入文件的路径'</span></div><div class="line">&lt;<span class="regexp">/script&gt;</span></div></pre></td></tr></table></figure>
<p>待深入问题</p>
<ul>
<li>箭头函数的this指向</li>
<li><code>proxy</code>代理的使用</li>
<li>扩展运算符的使用</li>
</ul>
<p>参考链接</p>
<ul>
<li>阮一峰 ES6 标准入门</li>
<li><a href="http://www.zcfy.cc/article/using-es6-arrow-functions-in-production-ready-apps-2372.html" target="_blank" rel="external">使用 ES6 箭头函数</a></li>
<li><a href="http://www.zcfy.cc/article/6-compelling-use-cases-for-es6-proxies-888.html" target="_blank" rel="external">6种ES6 proxies的使用案例</a></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[nodejs]]></title>
      <url>weison.org/2016/06/19/nodejs/</url>
      <content type="html"><![CDATA[<h1 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h1><ol>
<li>构建高性能web服务器</li>
<li>事件处理机制</li>
<li>异步IO模式<a id="more"></a>
</li>
</ol>
<h1 id="环境安装"><a href="#环境安装" class="headerlink" title="环境安装"></a>环境安装</h1><h1 id="api"><a href="#api" class="headerlink" title="api"></a>api</h1><h1 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h1><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ul>
<li><p><a href=""></a></p>
</li>
<li><p>ecamscript </p>
</li>
<li>os   操作系统</li>
<li>file 文件系统</li>
<li>net 网络</li>
<li>database 数据库</li>
</ul>
<h2 id="Buffer更好的操作二进制数据的类"><a href="#Buffer更好的操作二进制数据的类" class="headerlink" title="Buffer更好的操作二进制数据的类"></a><code>Buffer</code>更好的操作二进制数据的类</h2>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[angularjs1X-2]]></title>
      <url>weison.org/2016/06/01/angularjs1X-2/</url>
      <content type="html"><![CDATA[<a id="more"></a>
<ol>
<li>安装 npm install angular</li>
</ol>
<h3 id="特征"><a href="#特征" class="headerlink" title="特征"></a>特征</h3><h4 id="MVVM双向绑定"><a href="#MVVM双向绑定" class="headerlink" title="MVVM双向绑定"></a>MVVM双向绑定</h4><p>视图与数据双向绑定，当数据发生变化时，视图会发生改变；当视图发生改变时，数据也会发化变化</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">ng-controller</span>=<span class="string">"Bbb"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">ng-model</span>=<span class="string">"name"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">p</span> <span class="attr">ng-bind</span>=<span class="string">"name"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">ng-controller</span>=<span class="string">"Aaa"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">ng-bind</span>=<span class="string">"job"</span> &gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="actionscript"></span></div><div class="line"><span class="keyword">var</span> m1 = angular.module(<span class="string">'myApp'</span>,[]);</div><div class="line">m1.controller(<span class="string">'Bbb'</span>, [<span class="string">'$scope'</span>,<span class="string">'$rootScope'</span>, <span class="function"><span class="keyword">function</span> <span class="params">($scope,$rootScope)</span> </span>&#123;</div><div class="line">	$scope.name = <span class="string">'weison'</span>;</div><div class="line">&#125;]);</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<h4 id="模块系统"><a href="#模块系统" class="headerlink" title="模块系统"></a>模块系统</h4><h4 id="依赖注入"><a href="#依赖注入" class="headerlink" title="依赖注入"></a>依赖注入</h4><h4 id="表达式"><a href="#表达式" class="headerlink" title="表达式"></a>表达式</h4><ol>
<li>angularjs的表达式是通过<code>$parse</code>来进行解释的</li>
</ol>
<h4 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h4><ol>
<li><p><code>$scope</code> angular中，所有数据必须挂载在$scope下面才可以在视图中找到。<br>它是一种作用域，仅会作用于它所定义的controller中</p>
</li>
<li><p><code>$rootScope</code>相对于整个页面的作用域,让表达式里的内容可以不放在controller内也可以被读取<br>它们的作用域也类似于js的作用域一样，从近到远，从内到外</p>
</li>
</ol>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">ng-controller</span>=<span class="string">"Bbb"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;name&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">ng-controller</span>=<span class="string">"Aaa"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">ng-bind</span>=<span class="string">"job"</span> &gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="actionscript"></span></div><div class="line"><span class="keyword">var</span> m1 = angular.module(<span class="string">'myApp'</span>,[]);</div><div class="line">m1.controller(<span class="string">'Bbb'</span>, [<span class="string">'$scope'</span>,<span class="string">'$rootScope'</span>, <span class="function"><span class="keyword">function</span> <span class="params">($scope,$rootScope)</span> </span>&#123;</div><div class="line">	$scope.name = <span class="string">'weison'</span>;</div><div class="line">&#125;]);</div><div class="line">m1.controller(<span class="string">'Aaa'</span>, [<span class="string">'$scope'</span>,<span class="string">'$rootScope'</span>, <span class="function"><span class="keyword">function</span> <span class="params">($scope,$rootScope)</span> </span>&#123;</div><div class="line">	$rootScope.job = <span class="string">'fontDev'</span>;</div><div class="line">&#125;])</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<h5 id="简单购物车功能"><a href="#简单购物车功能" class="headerlink" title="简单购物车功能"></a>简单购物车功能</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></div><div class="line"><span class="selector-tag">label</span>&#123;<span class="attribute">display</span>: block;<span class="attribute">margin-bottom</span>:<span class="number">20px</span>;&#125;</div><div class="line"><span class="selector-tag">input</span>&#123;<span class="attribute">margin-left</span>: <span class="number">10px</span>;&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">""</span> <span class="attr">ng-controller</span>=<span class="string">"shopping"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">""</span>&gt;</span>单价<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">ng-model</span>=<span class="string">"iphone.price"</span>&gt;</span><span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">""</span>&gt;</span>数量<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">ng-model</span>=<span class="string">"iphone.num"</span>&gt;</span><span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">""</span>&gt;</span>小计<span class="tag">&lt;<span class="name">span</span> <span class="attr">ng-bind</span>=<span class="string">"sum() | currency : '￥'"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">""</span>&gt;</span>邮费<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">ng-model</span>=<span class="string">"iphone.fre"</span>&gt;</span><span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">""</span>&gt;</span>合计<span class="tag">&lt;<span class="name">span</span> <span class="attr">ng-bind</span>=<span class="string">"sum() + iphone.fre | currency : '￥'"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line"><span class="keyword">var</span> m1 = angular.module(<span class="string">'myApp'</span>,[]);</div><div class="line">m1.controller(<span class="string">'shopping'</span>, [<span class="string">'$scope'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">$scope</span>) </span>&#123;</div><div class="line">	<span class="comment">//1.创建双向绑定数据</span></div><div class="line">	$scope.iphone = &#123;</div><div class="line">		<span class="attr">price</span> : <span class="number">10</span>,</div><div class="line">		<span class="attr">num</span> : <span class="number">5</span>,</div><div class="line">		<span class="attr">fre</span> :<span class="number">10</span></div><div class="line">	&#125;</div><div class="line">	<span class="comment">//2.计算出单位*数量的值</span></div><div class="line">	$scope.sum = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">		<span class="keyword">return</span> $scope.iphone.price * $scope.iphone.num;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">//3.利用过滤器currency来格式化金额</span></div><div class="line">	</div><div class="line">	<span class="comment">//4.利用$watch方式监听函数的变化 ,假如小结超过1000元，则免邮</span></div><div class="line">	$scope.$watch($scope.sum,<span class="function"><span class="keyword">function</span>(<span class="params">newVal,oldVal</span>)</span>&#123;</div><div class="line">		<span class="built_in">console</span>.log(newVal);</div><div class="line">		$scope.iphone.fre = (newVal &gt;= <span class="number">1000</span> ? <span class="number">0</span> : <span class="number">10</span>);</div><div class="line">	&#125;,<span class="literal">true</span>);</div><div class="line">&#125;]);</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="controller-控制器"><a href="#controller-控制器" class="headerlink" title="controller 控制器"></a><code>controller</code> 控制器</h3><p>连接model和view</p>
<h3 id="模块化与压缩"><a href="#模块化与压缩" class="headerlink" title="模块化与压缩"></a>模块化与压缩</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> m1 = angular.module(<span class="string">'模块名称'</span>,[<span class="string">'依赖的模块'</span>]);</div><div class="line"><span class="comment">//避免因压缩而出现问题，采用数组的形式</span></div><div class="line">m1.controller(<span class="string">'控制器名字'</span>,[<span class="string">'$scope'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">$scope</span>)</span>&#123;</div><div class="line">&#125;]);</div></pre></td></tr></table></figure>
<h3 id="工具方法"><a href="#工具方法" class="headerlink" title="工具方法"></a>工具方法</h3><h4 id="angular-bind-改变this的指向"><a href="#angular-bind-改变this的指向" class="headerlink" title="angular.bind()改变this的指向"></a><code>angular.bind()</code>改变this的指向</h4><p>angular.bind(指向的元素,执行的函数)(参数1，参数 2)<br>类似于jquery的$.proxy()<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"div1"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">n1,n2</span>)</span>&#123;</div><div class="line">	alert(n1+n2);</div><div class="line">	alert(<span class="keyword">this</span>.id);</div><div class="line">&#125;</div><div class="line">angular.bind(<span class="built_in">document</span>.querySelector(<span class="string">'#div1'</span>),test)(<span class="number">2</span>,<span class="number">3</span>);</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h4 id="angular-copy-拷贝对象"><a href="#angular-copy-拷贝对象" class="headerlink" title="angular.copy()拷贝对象"></a><code>angular.copy()</code>拷贝对象</h4><p>angular.copy(‘参考对象’,’被覆盖的对象’);</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line"><span class="keyword">var</span> a = &#123;<span class="attr">age</span> : <span class="number">20</span>&#125;</div><div class="line"><span class="keyword">var</span> b = &#123;<span class="attr">name</span> : <span class="string">'weison'</span>&#125;;</div><div class="line"><span class="keyword">var</span> c = angular.copy(a,b);</div><div class="line"><span class="built_in">console</span>.log(c); <span class="comment">// Object &#123;age: 20&#125;</span></div><div class="line"><span class="built_in">console</span>.log(<span class="string">'b'</span>,b);</div><div class="line"><span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></div></pre></td></tr></table></figure>
<h4 id="angular-extend-扩展对象，扩展的参考对象"><a href="#angular-extend-扩展对象，扩展的参考对象" class="headerlink" title="angular.extend(扩展对象，扩展的参考对象)"></a><code>angular.extend(扩展对象，扩展的参考对象)</code></h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line"><span class="keyword">var</span> a = &#123;<span class="attr">age</span> : <span class="number">20</span>&#125;</div><div class="line"><span class="keyword">var</span> b = &#123;<span class="attr">name</span> : <span class="string">'weison'</span>&#125;;</div><div class="line"><span class="keyword">var</span> c = angular.extend(b,a);</div><div class="line"><span class="built_in">console</span>.log(<span class="string">'a'</span>,a); <span class="comment">//a Object &#123;age: 20&#125;</span></div><div class="line"><span class="built_in">console</span>.log(<span class="string">'b'</span>,b);	<span class="comment">//b Object &#123;name: "weison", age: 20&#125;</span></div><div class="line"><span class="built_in">console</span>.log(<span class="string">'c'</span>,c); <span class="comment">//c Object &#123;name: "weison", age: 20&#125;</span></div><div class="line">&lt;<span class="regexp">/script&gt;</span></div></pre></td></tr></table></figure>
<h4 id="判断数据类型"><a href="#判断数据类型" class="headerlink" title="判断数据类型"></a>判断数据类型</h4><ol>
<li><code>angular.isArray(判断内容)</code> 判断是否数组</li>
<li>angular.isData()`  是否时间对象</li>
<li><code>angular.isDefind()</code> 对象是否被定义</li>
<li><code>angular.isUndefined()</code> 对象是否未被定义</li>
<li><code>angular.isFunciton()</code> 判断是否对象</li>
<li><code>angular.isNumber()</code> 判断是否数字类型</li>
<li><code>angular.isObject()</code> 判断是否对象</li>
<li><code>angular.isString()</code> 判断是否为字符串</li>
<li><code>angular.isElement()</code> 判断是否元素</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line"><span class="built_in">console</span>.log(angular.isArray([])); <span class="comment">// =&gt; true</span></div><div class="line">&lt;<span class="regexp">/script&gt;</span></div></pre></td></tr></table></figure>
<h4 id="angular-vesion-angular的版本"><a href="#angular-vesion-angular的版本" class="headerlink" title="angular.vesion angular的版本"></a><code>angular.vesion</code> angular的版本</h4><h4 id="angular-equals-判断两个元素是否相等"><a href="#angular-equals-判断两个元素是否相等" class="headerlink" title="angular.equals()判断两个元素是否相等"></a><code>angular.equals()</code>判断两个元素是否相等</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line"><span class="keyword">var</span> a = <span class="number">10</span>,</div><div class="line">	b = <span class="number">10</span>,</div><div class="line">	c = <span class="literal">NaN</span>,</div><div class="line">	d = <span class="literal">NaN</span>,</div><div class="line">	e = [],</div><div class="line">	f = [];</div><div class="line"><span class="built_in">console</span>.log(angular.equals(a,b)); <span class="comment">// true</span></div><div class="line"><span class="built_in">console</span>.log(angular.equals(c,d)); <span class="comment">// =&gt; true,不考虑指向不同的对象</span></div><div class="line"><span class="built_in">console</span>.log(angular.equals(c,d)); <span class="comment">// =&gt; true angular中,NaN= NaN</span></div><div class="line">&lt;<span class="regexp">/script&gt;</span></div></pre></td></tr></table></figure>
<h4 id="angular-forEach"><a href="#angular-forEach" class="headerlink" title="angular.forEach()"></a><code>angular.forEach()</code></h4><p>angular.forEach(数据源,function(数据源的value,数据源的key){<br>    this.push(更改的变化); // this 指向回调的结果<br>},回调的结果);<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line"><span class="keyword">var</span> json = &#123;<span class="string">'name'</span>:<span class="string">'weison'</span>,<span class="string">'age'</span>:<span class="number">20</span>&#125;,</div><div class="line">	result = [];</div><div class="line">angular.forEach(json,<span class="function"><span class="keyword">function</span>(<span class="params">value,key</span>)</span>&#123;</div><div class="line">	<span class="keyword">this</span>.push(key + value); <span class="comment">//=&gt;["nameweison", "age20"],注意reslut是一个数组</span></div><div class="line">&#125;,result);</div><div class="line"><span class="built_in">console</span>.log(result);</div><div class="line"><span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></div></pre></td></tr></table></figure></p>
<h4 id="angular-fromString-toJson"><a href="#angular-fromString-toJson" class="headerlink" title="angular.fromString/toJson"></a><code>angular.fromString/toJson</code></h4><p>类似于JSON.parse() 和JSON.stringify<br>对字符串的json进行解释，和把json转换成字符串<br>angular.toJson(数据源,true),加上true后，会格式化一下字符<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line">	<span class="keyword">var</span> str = <span class="string">'&#123;"name":"weison","age":"20"&#125;'</span>;</div><div class="line">	<span class="keyword">var</span> json = angular.fromJson(str);</div><div class="line">	<span class="built_in">console</span>.info(json); <span class="comment">// =&gt; Object &#123;name: "weison", age: "20"&#125;</span></div><div class="line">	<span class="built_in">console</span>.info(angular.toJson(json,<span class="literal">true</span>)); </div><div class="line">	<span class="comment">// &#123;</span></div><div class="line">	<span class="comment">//   "name": "weison",</span></div><div class="line">	<span class="comment">//   "age": "20"</span></div><div class="line">	<span class="comment">// &#125;</span></div><div class="line">&lt;<span class="regexp">/script&gt;</span></div></pre></td></tr></table></figure></p>
<h4 id="angular-identity-noop设置默认值，避免报错"><a href="#angular-identity-noop设置默认值，避免报错" class="headerlink" title="angular.identity/noop设置默认值，避免报错"></a><code>angular.identity/noop</code>设置默认值，避免报错</h4><h4 id="angular-bootstrap动态初始化angular"><a href="#angular-bootstrap动态初始化angular" class="headerlink" title="angular.bootstrap动态初始化angular"></a><code>angular.bootstrap</code>动态初始化angular</h4><p>angular.bootstrap(初始化的范围，初始化的模块名称)；</p>
<h4 id="scope-apply-监听回调函数内的数据变化"><a href="#scope-apply-监听回调函数内的数据变化" class="headerlink" title="$scope.$apply()监听回调函数内的数据变化"></a><code>$scope.$apply()</code>监听回调函数内的数据变化</h4><p>常用的原生js中，对$scope里的内容进行改变,它是可以直接在第三方的插件或者库内直接使用的</p>
<p>检测一个变量是否发生变化的方法：</p>
<ol>
<li>能通过固定的接口才能修改变量的值。例如只有通过<code>set()</code>方法才能改变变量的值，那么只要<code>set()</code>方法被调用时，对比一下就好了</li>
<li>脏检查，将对象复制一份快照，在某个时间 ，将新的值与这份快照作对比，假如有不同，就证明更新了。这个方法要保留两份数据，而且要遍历对象，比较每个属性，因此比较消耗性能。</li>
</ol>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"div1"</span> <span class="attr">ng-controller</span>=<span class="string">"Aa"</span> <span class="attr">ng-bind</span>=<span class="string">"say"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="actionscript"></span></div><div class="line"><span class="keyword">var</span> m1 = angular.module(<span class="string">'myApp'</span>,[]);</div><div class="line">m1.controller(<span class="string">'Aa'</span>, [<span class="string">'$scope'</span>, <span class="function"><span class="keyword">function</span> <span class="params">($scope)</span> </span>&#123;</div><div class="line">$scope.say = <span class="string">"hello"</span>;</div><div class="line">setTimeout(<span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</div><div class="line">		$scope.$apply(<span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</div><div class="line">			$scope.say = <span class="string">'hi'</span>;</div><div class="line">		&#125;);</div><div class="line">	&#125;,<span class="number">1000</span>);</div><div class="line">&#125;]);</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<h4 id="angular-module-定义模块"><a href="#angular-module-定义模块" class="headerlink" title="angular.module()定义模块"></a><code>angular.module()</code>定义模块</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"div1"</span> <span class="attr">ng-bind</span>=<span class="string">"say"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="actionscript"></span></div><div class="line"><span class="keyword">var</span> m1 = angular.module(<span class="string">'myApp'</span>,[]);</div><div class="line">m1.run([<span class="string">'$rootScope'</span>, <span class="function"><span class="keyword">function</span><span class="params">($rootScope)</span></span>&#123;</div><div class="line">	$rootScope.say = <span class="string">'xixi'</span>;</div><div class="line">&#125;])</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<h4 id="angular-run-可以不通过controller来绑定全局变量"><a href="#angular-run-可以不通过controller来绑定全局变量" class="headerlink" title="angular.run() 可以不通过controller来绑定全局变量"></a><code>angular.run()</code> 可以不通过controller来绑定全局变量</h4><p>1。 初始化一些全局的数据，不需要再创建控制器才能访问数据</p>
<ol>
<li>不能挂载局部作用域<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">ng-bind</span>=<span class="string">"runText"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="actionscript"></span></div><div class="line"><span class="keyword">var</span> myApp = angular.module(<span class="string">'myApp'</span>,[]);</div><div class="line">myApp.run([<span class="string">'$rootScope'</span>, <span class="function"><span class="keyword">function</span><span class="params">($rootScope)</span></span>&#123;</div><div class="line">	$rootScope.runText = <span class="string">'无需绑定controller，即可显示'</span>;</div><div class="line">&#125;]);</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="filter过滤器"><a href="#filter过滤器" class="headerlink" title="filter过滤器"></a><code>filter</code>过滤器</h3><p>格式化内容输出结果，和对数据进行筛选（比如大于30的保留）</p>
<h4 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&#123;&#123; experssion | filter&#125;&#125;	</div><div class="line">&#123;&#123; experssion | filter1 | filter2 &#125;&#125;	</div><div class="line">&#123;&#123; experssion | filter : params1 : params2 ,...&#125;&#125;</div></pre></td></tr></table></figure>
<h4 id="currency-货币金额"><a href="#currency-货币金额" class="headerlink" title="currency 货币金额"></a><code>currency</code> 货币金额</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!--每三位加一个逗号，并且保留角分 $123,456,789.00  --&gt;</span></div><div class="line">&#123;&#123;123456789 | currency&#125;&#125;	</div><div class="line"></div><div class="line"><span class="comment">&lt;!--参数用于修改货币符号 ￥123,456,789.00--&gt;</span></div><div class="line">&#123;&#123;123456789 | currency : '￥'&#125;&#125;</div></pre></td></tr></table></figure>
<h4 id="number-数字化格式"><a href="#number-数字化格式" class="headerlink" title="number 数字化格式"></a><code>number</code> 数字化格式</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!--每三位加一个逗号 123,456,789  --&gt;</span></div><div class="line">&#123;&#123;123456789 | number&#125;&#125;	</div><div class="line"></div><div class="line"><span class="comment">&lt;!--四舍五入，参数代表保留几位小数 123,456,789.000--&gt;</span></div><div class="line">&#123;&#123;123456789 | number : 3&#125;&#125;</div></pre></td></tr></table></figure>
<h4 id="date-格式化时间"><a href="#date-格式化时间" class="headerlink" title="date 格式化时间"></a><code>date</code> 格式化时间</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">ng-controller</span>=<span class="string">"c1"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>处理内容：Mon Aug 01 2016 23:33:59 GMT+0800 (中国标准时间)<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></div><div class="line">  <span class="comment">&lt;!-- Aug 1, 2016 11:24:57 PM  --&gt;</span></div><div class="line">  &#123;&#123; today | date : 'medium'&#125;&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></div><div class="line">	<span class="comment">&lt;!-- 8/1/16 11:24 PM --&gt;</span></div><div class="line">	&#123;&#123; today | date : 'short'&#125;&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></div><div class="line">	<span class="comment">&lt;!-- Monday, August 1, 2016 --&gt;</span></div><div class="line">	&#123;&#123; today | date : 'fullDate'&#125;&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></div><div class="line">	<span class="comment">&lt;!-- August 1, 2016 --&gt;</span></div><div class="line">	&#123;&#123; today | date : 'longDate'&#125;&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></div><div class="line">	<span class="comment">&lt;!-- Aug 1, 2016 --&gt;</span></div><div class="line">	&#123;&#123; today | date : 'mediumDate'&#125;&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></div><div class="line">	<span class="comment">&lt;!-- 11:24:57 PM --&gt;</span></div><div class="line">	&#123;&#123; today | date : 'mediumTime'&#125;&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></div><div class="line">	<span class="comment">&lt;!-- 11:24 PM --&gt;</span></div><div class="line">	&#123;&#123; today | date : 'shortTime'&#125;&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">title</span>=<span class="string">"年份"</span>&gt;</span></div><div class="line">	<span class="comment">&lt;!-- 2016--&gt;</span></div><div class="line">	&#123;&#123; today | date : 'y'&#125;&#125;</div><div class="line">	<span class="comment">&lt;!-- 16 省掉前两个数字 --&gt;</span></div><div class="line">	&#123;&#123; today | date : 'yy'&#125;&#125;</div><div class="line">	<span class="comment">&lt;!-- 2016--&gt;</span></div><div class="line">	&#123;&#123; today | date : 'yyyy'&#125;&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">title</span>=<span class="string">"月份"</span>&gt;</span></div><div class="line">	<span class="comment">&lt;!-- 8--&gt;</span></div><div class="line">	&#123;&#123; today | date : 'M'&#125;&#125;</div><div class="line">	<span class="comment">&lt;!-- 08 --&gt;</span></div><div class="line">	&#123;&#123; today | date : 'MM'&#125;&#125;</div><div class="line">	<span class="comment">&lt;!-- Aug  --&gt;</span></div><div class="line">	&#123;&#123; today | date : 'MMM'&#125;&#125;</div><div class="line">	<span class="comment">&lt;!-- August --&gt;</span></div><div class="line">	&#123;&#123; today | date : 'MMMM'&#125;&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">title</span>=<span class="string">"几号"</span>&gt;</span></div><div class="line">	<span class="comment">&lt;!-- 1 --&gt;</span></div><div class="line">	&#123;&#123; today | date : 'd'&#125;&#125;</div><div class="line">	<span class="comment">&lt;!-- 01 --&gt;</span></div><div class="line">	&#123;&#123; today | date : 'dd'&#125;&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">P</span> <span class="attr">title</span>=<span class="string">"星期几"</span>&gt;</span></div><div class="line">	<span class="comment">&lt;!-- Mon  --&gt;</span></div><div class="line">	&#123;&#123; today | date : 'EEE'&#125;&#125;</div><div class="line">	<span class="comment">&lt;!-- Monday --&gt;</span></div><div class="line">	&#123;&#123; today | date : 'EEEE'&#125;&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">P</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">P</span> <span class="attr">title</span>=<span class="string">"小时，24小时制"</span>&gt;</span></div><div class="line">	<span class="comment">&lt;!-- 23  --&gt;</span></div><div class="line">	&#123;&#123; today | date : 'H'&#125;&#125;</div><div class="line">	<span class="comment">&lt;!-- 23 --&gt;</span></div><div class="line">	&#123;&#123; today | date : 'HH'&#125;&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">P</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">P</span> <span class="attr">title</span>=<span class="string">"小时，12小时制"</span>&gt;</span></div><div class="line">	<span class="comment">&lt;!-- 11  --&gt;</span></div><div class="line">	&#123;&#123; today | date : 'h'&#125;&#125;</div><div class="line">	<span class="comment">&lt;!-- 11 --&gt;</span></div><div class="line">	&#123;&#123; today | date : 'hh'&#125;&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">P</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">P</span> <span class="attr">title</span>=<span class="string">"分钟"</span>&gt;</span></div><div class="line">	<span class="comment">&lt;!-- 43  --&gt;</span></div><div class="line">	&#123;&#123; today | date : 'm'&#125;&#125;</div><div class="line">	<span class="comment">&lt;!-- 43 --&gt;</span></div><div class="line">	&#123;&#123; today | date : 'mm'&#125;&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">P</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">P</span> <span class="attr">title</span>=<span class="string">"秒"</span>&gt;</span></div><div class="line">	<span class="comment">&lt;!-- 1  --&gt;</span></div><div class="line">	&#123;&#123; today | date : 's'&#125;&#125;</div><div class="line">	<span class="comment">&lt;!-- 01 --&gt;</span></div><div class="line">	&#123;&#123; today | date : 'ss'&#125;&#125;</div><div class="line">	<span class="comment">&lt;!-- .416 --&gt;</span></div><div class="line">	&#123;&#123; today | date : '.sss'&#125;&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">P</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">title</span>=<span class="string">"组合使用"</span>&gt;</span></div><div class="line">	<span class="comment">&lt;!-- 2016-08-1 23:49:31 --&gt;</span></div><div class="line">	&#123;&#123;today | date : 'y-MM-d H:m:s'&#125;&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line"><span class="keyword">var</span> m1 = angular.module(<span class="string">'myApp'</span>,[]);</div><div class="line">m1.controller(<span class="string">'c1'</span>, [<span class="string">'$scope'</span>,<span class="function"><span class="keyword">function</span> (<span class="params">$scope</span>) </span>&#123;</div><div class="line">	$scope.today = <span class="keyword">new</span> <span class="built_in">Date</span>();</div><div class="line">&#125;]);</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<h4 id="limitTo-截取几条数据"><a href="#limitTo-截取几条数据" class="headerlink" title="limitTo 截取几条数据"></a><code>limitTo</code> 截取几条数据</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- [1,2,3,4,5] 保留前5个数据 --&gt;</span></div><div class="line">&#123;&#123;[1,2,3,4,5,6,7,8,9] | limitTo:5&#125;&#125;</div><div class="line"></div><div class="line"><span class="comment">&lt;!-- [5,6,7,8,9] 负数时，保留后几位数字 --&gt;</span></div><div class="line">&#123;&#123;[1,2,3,4,5,6,7,8,9] | limitTo: -5&#125;&#125;</div></pre></td></tr></table></figure>
<h4 id="uppercase-lowercase-字母转换成全大写或者小写"><a href="#uppercase-lowercase-字母转换成全大写或者小写" class="headerlink" title="uppercase/lowercase 字母转换成全大写或者小写"></a><code>uppercase/lowercase</code> 字母转换成全大写或者小写</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">title</span>=<span class="string">"uppercase 小写转为大写"</span>&gt;</span></div><div class="line">	<span class="comment">&lt;!-- HELLO ANGULAR --&gt;</span></div><div class="line">	&#123;&#123;'hello ANGULAR' | uppercase&#125;&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">title</span>=<span class="string">"lowercase 大写转为小写"</span>&gt;</span></div><div class="line">	<span class="comment">&lt;!-- hello angular --&gt;</span></div><div class="line">	&#123;&#123;'hello ANGULAR' | lowercase&#125;&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div></pre></td></tr></table></figure>
<h4 id="json-将一个数组或一个对象格式化json格式，主要用于调试"><a href="#json-将一个数组或一个对象格式化json格式，主要用于调试" class="headerlink" title="json 将一个数组或一个对象格式化json格式，主要用于调试"></a><code>json</code> 将一个数组或一个对象格式化json格式，主要用于调试</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">ng-controller</span>=<span class="string">"c1"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">ng-bind</span>=<span class="string">"city"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">ng-bind</span>=<span class="string">"city | json"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line"><span class="keyword">var</span> m1 = angular.module(<span class="string">'myApp'</span>,[]);</div><div class="line">m1.controller(<span class="string">'c1'</span>, [<span class="string">'$scope'</span>,<span class="string">'$filter'</span>,<span class="function"><span class="keyword">function</span> (<span class="params">$scope,$filter</span>) </span>&#123;</div><div class="line">		$scope.city = [&#123;</div><div class="line">			<span class="attr">name</span> : <span class="string">'北京'</span>,</div><div class="line">			<span class="attr">py</span> : <span class="string">'beijing'</span></div><div class="line">		&#125;,</div><div class="line">		&#123;</div><div class="line">			<span class="attr">name</span> : <span class="string">'上海1212'</span>,</div><div class="line">			<span class="attr">py</span> : <span class="string">'shangehai'</span>,</div><div class="line">		&#125;,</div><div class="line">		&#123;</div><div class="line">			<span class="attr">name</span> : <span class="string">'广州e'</span>,</div><div class="line">			<span class="attr">py</span> : <span class="string">'guangzhou'</span></div><div class="line">		&#125;</div><div class="line">		];</div><div class="line">		<span class="built_in">console</span>.log($scope.city);</div><div class="line">		<span class="built_in">console</span>.log($filter(<span class="string">'json'</span>)($scope.city));</div><div class="line">		<span class="comment">// 为了方便调试，当打印在控制台上可以看到格式化好的数据</span></div><div class="line">		<span class="comment">// [</span></div><div class="line">		<span class="comment">//   &#123;</span></div><div class="line">		<span class="comment">//     "name": "北京",</span></div><div class="line">		<span class="comment">//     "py": "beijing"</span></div><div class="line">		<span class="comment">//   &#125;,</span></div><div class="line">		<span class="comment">//   &#123;</span></div><div class="line">		<span class="comment">//     "name": "上海1212",</span></div><div class="line">		<span class="comment">//     "py": "shangehai"</span></div><div class="line">		<span class="comment">//   &#125;,</span></div><div class="line">		<span class="comment">//   &#123;</span></div><div class="line">		<span class="comment">//     "name": "广州e",</span></div><div class="line">		<span class="comment">//     "py": "guangzhou"</span></div><div class="line">		<span class="comment">//   &#125;</span></div><div class="line">		<span class="comment">// ]</span></div><div class="line">&#125;]);</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<h4 id="orderBy-39-排序的依据-39-true-排序"><a href="#orderBy-39-排序的依据-39-true-排序" class="headerlink" title="orderBy : &#39;排序的依据&#39; : [true] 排序"></a><code>orderBy : &#39;排序的依据&#39; : [true]</code> 排序</h4><ol>
<li>假如加上true,就变成了从大到小排序</li>
</ol>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123;tab2Data | orderBy : 'content' : true&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">ng-controller</span>=<span class="string">"c1"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">div</span>&gt;</span></div><div class="line">		<span class="comment">&lt;!--  默认正向排序 a~z orderBy后面带排序的字段名称</span></div><div class="line">		[&#123;"name":"北京","py":"beijing"&#125;,&#123;"name":"广州e","py":"guangzhou"&#125;,&#123;"name":"上海1212","py":"shangehai"&#125;] --&gt;</div><div class="line">		&#123;&#123;city | orderBy : 'py'&#125;&#125;</div><div class="line">		<span class="comment">&lt;!--  在排序字段前加上负号后变成反向排序 z~a </span></div><div class="line">		[&#123;"name":"上海1212","py":"shangehai"&#125;,&#123;"name":"广州e","py":"guangzhou"&#125;,&#123;"name":"北京","py":"beijing"&#125;]--&gt;</div><div class="line">		&#123;&#123;city | orderBy : '-py'&#125;&#125;</div><div class="line">	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="actionscript"></span></div><div class="line"><span class="keyword">var</span> m1 = angular.module(<span class="string">'myApp'</span>,[]);</div><div class="line">m1.controller(<span class="string">'c1'</span>, [<span class="string">'$scope'</span>,<span class="function"><span class="keyword">function</span> <span class="params">($scope)</span> </span>&#123;</div><div class="line">		$scope.city = [&#123;</div><div class="line">			name : <span class="string">'北京'</span>,</div><div class="line">			py : <span class="string">'beijing'</span></div><div class="line">		&#125;,</div><div class="line">		&#123;</div><div class="line">			name : <span class="string">'上海1212'</span>,</div><div class="line">			py : <span class="string">'shangehai'</span>,</div><div class="line">		&#125;,</div><div class="line">		&#123;</div><div class="line">			name : <span class="string">'广州e'</span>,</div><div class="line">			py : <span class="string">'guangzhou'</span></div><div class="line">		&#125;</div><div class="line">		];</div><div class="line">&#125;]);</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<h5 id="商品表单及过滤及排序功能"><a href="#商品表单及过滤及排序功能" class="headerlink" title="商品表单及过滤及排序功能"></a>商品表单及过滤及排序功能</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div></pre></td><td class="code"><pre><div class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></div><div class="line">  <span class="selector-tag">table</span>&#123;</div><div class="line">    <span class="attribute">width</span>: <span class="number">80%</span>;</div><div class="line">    <span class="attribute">margin</span>: <span class="number">50px</span> auto;</div><div class="line">    <span class="attribute">text-align</span>: center;</div><div class="line">    <span class="attribute">vertical-align</span>: middle;</div><div class="line">  &#125;</div><div class="line">  <span class="selector-tag">td</span>&#123;</div><div class="line">    <span class="attribute">height</span>: <span class="number">52px</span>;</div><div class="line">    <span class="attribute">border-bottom</span>:<span class="number">1px</span> solid <span class="number">#ccc</span>;</div><div class="line">  &#125;</div><div class="line">  <span class="selector-tag">th</span>&#123;</div><div class="line">    <span class="attribute">height</span>: <span class="number">40px</span>;</div><div class="line">    <span class="attribute">background</span>: <span class="number">#236fae</span>;</div><div class="line">    <span class="attribute">color</span>: <span class="number">#fff</span>;</div><div class="line">  &#125;</div><div class="line">  <span class="selector-class">.up</span>&#123;</div><div class="line">    <span class="attribute">background</span>: red;</div><div class="line">  &#125;</div><div class="line">  <span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">ng-app</span>=<span class="string">"myApp"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">ng-controller</span>=<span class="string">"n1"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">ng-model</span>=<span class="string">"search"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">p</span> <span class="attr">ng-bind</span>=<span class="string">"search"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">table</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">thead</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">th</span> <span class="attr">ng-click</span>=<span class="string">"order('brands')"</span>&gt;</span>品牌<span class="tag">&lt;/<span class="name">th</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">th</span> <span class="attr">ng-click</span>=<span class="string">"order('price')"</span>&gt;</span>价格<span class="tag">&lt;/<span class="name">th</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">th</span> <span class="attr">ng-click</span>=<span class="string">"order('number')"</span>&gt;</span>数量<span class="tag">&lt;/<span class="name">th</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">thead</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">tbody</span>&gt;</span></div><div class="line">        <span class="comment">&lt;!-- 利用ng-model进行双向数据绑定，利用filter进行数据过滤</span></div><div class="line">              filter : search 即搜索value值中带有search指向内容的数据</div><div class="line">              filter : &#123;name : search&#125; 只通过键名为name的search值</div><div class="line"></div><div class="line">              orderBy用于排序 </div><div class="line">                dire 决定是升序还是降序</div><div class="line">                type 决定是的排序的类型</div><div class="line">         --&gt;</div><div class="line">        <span class="comment">&lt;!-- &lt;tr ng-repeat="x in data | filter:search"&gt; --&gt;</span></div><div class="line">         <span class="tag">&lt;<span class="name">tr</span> <span class="attr">ng-repeat</span>=<span class="string">"x in data | filter:&#123;brands:search&#125; | orderBy:(dire+type)"</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">td</span> <span class="attr">ng-bind</span>=<span class="string">"x.brands"</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">td</span> <span class="attr">ng-bind</span>=<span class="string">"x.price | currency:'￥'"</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">td</span> <span class="attr">ng-bind</span>=<span class="string">"x.number"</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">table</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="actionscript"></span></div><div class="line">    <span class="keyword">var</span> myApp = angular.module(<span class="string">'myApp'</span>,[]);</div><div class="line">   myApp.service(<span class="string">'phone'</span>, [<span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> &#123;</div><div class="line">      data : [ </div><div class="line">                &#123;brands:<span class="string">'samsung'</span>,price:<span class="number">2999</span>, number:<span class="number">20</span>&#125;,</div><div class="line">                &#123;brands:<span class="string">'apple'</span>,price:<span class="number">4999</span>, number:<span class="number">10</span>&#125;,</div><div class="line">                &#123;brands:<span class="string">'xiaomi'</span>,price:<span class="number">1999</span>, number:<span class="number">388</span>&#125;,</div><div class="line">            ]</div><div class="line">    &#125;</div><div class="line">   &#125;])</div><div class="line">    myApp.controller(<span class="string">'n1'</span>, [<span class="string">'$scope'</span>,<span class="string">'phone'</span>, <span class="function"><span class="keyword">function</span> <span class="params">($scope,phone)</span> </span>&#123;</div><div class="line">      $scope.data = phone.data;</div><div class="line">      $scope.dire = <span class="string">''</span>;</div><div class="line">      $scope.order = <span class="function"><span class="keyword">function</span><span class="params">(type)</span></span>&#123;</div><div class="line">        $scope.type = type;</div><div class="line">        <span class="comment">//当dire为空时，为升序，当为-时为降序</span></div><div class="line">        <span class="keyword">if</span>(!$scope.dire)&#123;</div><div class="line">           $scope.dire = <span class="string">'-'</span>;</div><div class="line">        &#125;<span class="keyword">else</span>&#123;</div><div class="line">          $scope.dire = <span class="string">''</span>;</div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line">      </div><div class="line">    &#125;])</div><div class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<h4 id="在控制器在使用过滤器"><a href="#在控制器在使用过滤器" class="headerlink" title="在控制器在使用过滤器"></a>在控制器在使用过滤器</h4><ol>
<li>把<code>$filter</code>依赖注入<code>controller</code>中</li>
<li>把要使用的过滤器添加到括号内,如<code>$filter(&#39;number&#39;)</code></li>
<li>后面写数据源和参数<code>$filter(&#39;currency&#39;)(money)</code></li>
</ol>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">ng-controller</span>=<span class="string">"c1"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">ng-bind</span>=<span class="string">"n"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="actionscript"></span></div><div class="line"><span class="keyword">var</span> m1 = angular.module(<span class="string">'myApp'</span>,[]);</div><div class="line">m1.controller(<span class="string">'c1'</span>, [<span class="string">'$scope'</span>,<span class="string">'$filter'</span>,<span class="function"><span class="keyword">function</span> <span class="params">($scope,$filter)</span> </span>&#123;</div><div class="line">	$scope.n = $filter(<span class="string">'currency'</span>)(<span class="number">311231</span>); <span class="comment">//$311,231.00</span></div><div class="line"></div><div class="line">&#125;]);</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<h4 id="filter-可以过滤对象，数组，字符串"><a href="#filter-可以过滤对象，数组，字符串" class="headerlink" title="filter 可以过滤对象，数组，字符串"></a><code>filter</code> 可以过滤对象，数组，字符串</h4><p>针对数据的value值来进行筛选的</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">ng-controller</span>=<span class="string">"c1"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">title</span>=<span class="string">"过滤字符串"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">p</span> <span class="attr">title</span>=<span class="string">'原始数据'</span>&gt;</span></div><div class="line">			<span class="comment">&lt;!-- [&#123;"name":"北京","py":"beijing"&#125;,&#123;"name":"上海","py":"shangehai"&#125;,&#123;"name":"广州","py":"guangzhou"&#125;] --&gt;</span></div><div class="line">			&#123;&#123;city&#125;&#125;</div><div class="line">		<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">p</span> <span class="attr">title</span>=<span class="string">'过滤带有上海为value值的数据'</span>&gt;</span></div><div class="line">			<span class="comment">&lt;!-- [&#123;"name":"上海1212","py":"shangehai"&#125;]  --&gt;</span></div><div class="line">			&#123;&#123;city | filter : '上海'&#125;&#125;</div><div class="line">		<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">p</span> <span class="attr">title</span>=<span class="string">'它是不能搜索key值的'</span>&gt;</span></div><div class="line">			<span class="comment">&lt;!-- [],空，因为它只能搜索value值 --&gt;</span></div><div class="line">			&#123;&#123;city | filter : 'name'&#125;&#125;</div><div class="line">		<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">p</span> <span class="attr">title</span>=<span class="string">'通过对象搜索，py中带有e的对象'</span>&gt;</span></div><div class="line">		<span class="comment">&lt;!-- [&#123;"name":"北京","py":"beijing"&#125;,&#123;"name":"上海1212","py":"shangehai"&#125;] --&gt;</span></div><div class="line">			&#123;&#123;city | filter:&#123;py:'e'&#125; &#125;&#125;</div><div class="line">		<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="actionscript"></span></div><div class="line"><span class="keyword">var</span> m1 = angular.module(<span class="string">'myApp'</span>,[]);</div><div class="line">m1.controller(<span class="string">'c1'</span>, [<span class="string">'$scope'</span>,<span class="function"><span class="keyword">function</span> <span class="params">($scope)</span> </span>&#123;</div><div class="line">		$scope.city = [&#123;</div><div class="line">			name : <span class="string">'北京'</span>,</div><div class="line">			py : <span class="string">'beijing'</span></div><div class="line">		&#125;,</div><div class="line">		&#123;</div><div class="line">			name : <span class="string">'上海1212'</span>,</div><div class="line">			py : <span class="string">'shangehai'</span>,</div><div class="line">		&#125;,</div><div class="line">		&#123;</div><div class="line">			name : <span class="string">'广州e'</span>,</div><div class="line">			py : <span class="string">'guangzhou'</span></div><div class="line">		&#125;</div><div class="line">		];</div><div class="line">&#125;]);</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<h4 id="js中使用-filter服务来过滤内容"><a href="#js中使用-filter服务来过滤内容" class="headerlink" title="js中使用$filter服务来过滤内容"></a>js中使用$filter服务来过滤内容</h4><ol>
<li>注入$filter服务</li>
<li>绑定对应的值在作用域上</li>
<li>$scope.属性名 = $filter(‘过滤器名称’)(过滤内容,过滤格式)；</li>
</ol>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">ng-app</span>=<span class="string">"myApp"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">ng-controller</span>=<span class="string">"Aa"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">p</span> <span class="attr">ng-bind</span>=<span class="string">"say"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">p</span> <span class="attr">ng-bind</span>=<span class="string">"num"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="actionscript"></span></div><div class="line"><span class="keyword">var</span> myApp = angular.module(<span class="string">'myApp'</span>,[]);</div><div class="line">myApp.controller(<span class="string">'Aa'</span>, [<span class="string">'$scope'</span>,<span class="string">'$filter'</span>, <span class="function"><span class="keyword">function</span> <span class="params">($scope,$filter)</span> </span>&#123;</div><div class="line">	$scope.say = $filter(<span class="string">'uppercase'</span>)(<span class="string">'Haha'</span>);</div><div class="line">	$scope.num = $filter(<span class="string">'number'</span>)(<span class="string">'1231231.1289808'</span>,<span class="number">4</span>);</div><div class="line">&#125;]);</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<h4 id="自定义过滤器"><a href="#自定义过滤器" class="headerlink" title="自定义过滤器"></a>自定义过滤器</h4><h5 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h5><p>在<code>controller</code>中定于一个方法，方法的首个参数是要处理的过滤内容，处理这个数据后return 即可，<br>要注意假如要使用<code>if</code>判断语句，<code>return false</code>而不返回这条数据,<code>return true</code>则返回，如果写<code>reture true</code>会返回内容<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">ng-controller</span>=<span class="string">"c1"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">ng-repeat</span>=<span class="string">" x in city  | filter : checKPop"</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">p</span> <span class="attr">ng-bind</span>=<span class="string">"x.name + ' 人口是:'+x.population"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line"><span class="keyword">var</span> m1 = angular.module(<span class="string">'myApp'</span>,[]);</div><div class="line">m1.controller(<span class="string">'c1'</span>, [<span class="string">'$scope'</span>,<span class="string">'$filter'</span>,<span class="function"><span class="keyword">function</span> (<span class="params">$scope,$filter</span>) </span>&#123;</div><div class="line">		$scope.city = [&#123;</div><div class="line">			<span class="attr">name</span> : <span class="string">'北京'</span>,</div><div class="line">			<span class="attr">py</span> : <span class="string">'beijing'</span>,</div><div class="line">			<span class="attr">population</span> : <span class="string">'100'</span></div><div class="line">		&#125;,</div><div class="line">		&#123;</div><div class="line">			<span class="attr">name</span> : <span class="string">'上海'</span>,</div><div class="line">			<span class="attr">py</span> : <span class="string">'shangehai'</span>,</div><div class="line">			<span class="attr">population</span> : <span class="string">'200'</span></div><div class="line">		&#125;,</div><div class="line">		&#123;</div><div class="line">			<span class="attr">name</span> : <span class="string">'广州'</span>,</div><div class="line">			<span class="attr">py</span> : <span class="string">'guangzhou'</span>,</div><div class="line">			<span class="attr">population</span> : <span class="string">'300'</span></div><div class="line">		&#125;</div><div class="line">		];</div><div class="line">		$scope.checKPop = <span class="function"><span class="keyword">function</span>(<span class="params">obj</span>)</span>&#123;</div><div class="line">			<span class="built_in">console</span>.log(obj);</div><div class="line">			<span class="keyword">if</span>(obj.population == <span class="string">'200'</span>)&#123;</div><div class="line">				<span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">			&#125;<span class="keyword">else</span>&#123;</div><div class="line">				<span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">&#125;]);</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h5 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h5><ol>
<li>使用的是模块下的filter</li>
<li>传送的参数在第一个return内的函数执行</li>
<li>处理完的数据以return的形式返回出去</li>
<li>使用方法跟普通的filter一致</li>
</ol>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">ng-app</span>=<span class="string">"myApp"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">ng-controller</span>=<span class="string">"Aa"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">p</span> <span class="attr">ng-bind</span>=<span class="string">"firstUp | firstUpper"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">p</span> <span class="attr">ng-bind</span>=<span class="string">"sec"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="actionscript"></span></div><div class="line"><span class="keyword">var</span> myApp = angular.module(<span class="string">'myApp'</span>,[]);</div><div class="line">myApp.filter(<span class="string">'firstUpper'</span>,<span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</div><div class="line">	<span class="keyword">return</span> <span class="function"><span class="keyword">function</span><span class="params">(str,num)</span></span>&#123;</div><div class="line">		<span class="keyword">return</span> str.charAt(<span class="number">0</span>).toUpperCase() + str.slice(<span class="number">1</span>);</div><div class="line">	&#125;</div><div class="line">&#125;);</div><div class="line">myApp.controller(<span class="string">'Aa'</span>, [<span class="string">'$scope'</span>,<span class="string">'$filter'</span>, <span class="function"><span class="keyword">function</span> <span class="params">($scope,$filter)</span> </span>&#123;</div><div class="line">	$scope.firstUp = <span class="string">"ba"</span>;</div><div class="line">	$scope.sec = $filter(<span class="string">'firstUpper'</span>)(<span class="string">'second'</span>);</div><div class="line"></div><div class="line">&#125;]);</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="directive指令"><a href="#directive指令" class="headerlink" title="directive指令"></a><code>directive</code>指令</h3><p>一个强大的 DOM 转换引擎，以声明式的方式扩展HTML表示能力</p>
<h4 id="ng-repeat"><a href="#ng-repeat" class="headerlink" title="ng-repeat"></a><code>ng-repeat</code></h4><ol>
<li>利用<code>ng-repeat</code>对数据进行循环</li>
<li>通过<code>ng-click</code>指令，及<code>$filter</code>服务的<code>orderBy</code>进行数据的点击排序</li>
<li>最后通过配合<code>arguments.callee</code>当前在执行的对象及<code>$filter</code>下的’filter’来进行数据搜索，同时要注意要创建一个原始数据，在搜索的时候是搜索这份原始数据，而在呈现的时候$scope到另一个变量上</li>
</ol>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></div><div class="line">	<span class="selector-tag">table</span> &#123;</div><div class="line">		<span class="attribute">width</span>: <span class="number">400px</span>;</div><div class="line">		<span class="attribute">text-align</span>: center;</div><div class="line">		<span class="attribute">border-collapse</span>: collapse;</div><div class="line">	&#125;</div><div class="line">	<span class="selector-tag">td</span>,<span class="selector-tag">th</span>&#123;</div><div class="line">		<span class="attribute">border</span>:<span class="number">1px</span> solid <span class="number">#ccc</span>;</div><div class="line">	&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">ng-app</span>=<span class="string">"myApp"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">div</span>  <span class="attr">ng-controller</span>=<span class="string">"Aa"</span> &gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">div</span> &gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">ng-model</span>=<span class="string">"searchVal"</span>&gt;</span><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">ng-click</span>=<span class="string">"search(searchVal)"</span>&gt;</span>搜索<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">table</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">thead</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">tr</span>&gt;</span></div><div class="line">					<span class="tag">&lt;<span class="name">th</span> <span class="attr">ng-click</span>=<span class="string">"order('subject')"</span>&gt;</span>科目<span class="tag">&lt;/<span class="name">th</span>&gt;</span></div><div class="line">					<span class="tag">&lt;<span class="name">th</span> <span class="attr">ng-click</span>=<span class="string">"order('score')"</span>&gt;</span>分数<span class="tag">&lt;/<span class="name">th</span>&gt;</span></div><div class="line">				<span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line">			<span class="tag">&lt;/<span class="name">thead</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">tbody</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">tr</span> <span class="attr">ng-repeat</span>=<span class="string">"data in datas"</span>&gt;</span></div><div class="line">					<span class="tag">&lt;<span class="name">td</span> <span class="attr">ng-bind</span>=<span class="string">"data.subject"</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">					<span class="tag">&lt;<span class="name">td</span> <span class="attr">ng-bind</span>=<span class="string">"data.score"</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">				<span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line">			<span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">table</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line"><span class="keyword">var</span> myApp = angular.module(<span class="string">'myApp'</span>,[]);</div><div class="line">myApp.controller(<span class="string">'Aa'</span>, [<span class="string">'$scope'</span>,<span class="string">'$filter'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">$scope,$filter</span>) </span>&#123;</div><div class="line">	<span class="keyword">var</span> oriData = [</div><div class="line">		&#123;<span class="string">'subject'</span>:<span class="string">'chinese'</span>,<span class="string">'score'</span>:<span class="number">90</span>&#125;,</div><div class="line">		&#123;<span class="string">'subject'</span>:<span class="string">'mathematics'</span>,<span class="string">'score'</span>:<span class="number">80</span>&#125;,</div><div class="line">		&#123;<span class="string">'subject'</span>:<span class="string">'english'</span>,<span class="string">'score'</span>:<span class="number">70</span>&#125;,</div><div class="line">	];</div><div class="line">	$scope.datas = oriData;</div><div class="line">	$scope.order = <span class="function"><span class="keyword">function</span>(<span class="params">name</span>)</span>&#123;</div><div class="line">		<span class="built_in">arguments</span>.callee[<span class="string">'order'</span> + name] = !<span class="built_in">arguments</span>.callee[<span class="string">'order'</span> + name];</div><div class="line">		$scope.datas = $filter(<span class="string">'orderBy'</span>)($scope.datas,name,<span class="built_in">arguments</span>.callee[<span class="string">'order'</span> + name]);</div><div class="line">	&#125;</div><div class="line">	$scope.search = <span class="function"><span class="keyword">function</span>(<span class="params">val</span>)</span>&#123;</div><div class="line">		$scope.datas = $filter(<span class="string">'filter'</span>)(oriData,val);</div><div class="line">	&#125;</div><div class="line">&#125;]);</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<h5 id="index"><a href="#index" class="headerlink" title="$index"></a><code>$index</code></h5><p>从0开始，每个<code>ng-repeat</code>所对应的索引号</p>
<h5 id="first"><a href="#first" class="headerlink" title="$first"></a><code>$first</code></h5><p>只有数据的第一个会返回<code>true</code>，其他的返回<code>false</code></p>
<h5 id="last"><a href="#last" class="headerlink" title="$last"></a><code>$last</code></h5><p>跟<code>$first</code>相似，最后一个返回<code>true</code>，其他的返回<code>false</code></p>
<h5 id="middle"><a href="#middle" class="headerlink" title="$middle"></a><code>$middle</code></h5><p>除了第一个和最后一个，都会返回<code>true</code></p>
<h4 id="odd偶数行-even基数行"><a href="#odd偶数行-even基数行" class="headerlink" title="$odd偶数行,$even基数行"></a><code>$odd</code>偶数行,<code>$even</code>基数行</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">ng-app</span>=<span class="string">"myApp"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">div</span>  <span class="attr">ng-controller</span>=<span class="string">"Aa"</span> &gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">table</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">thead</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">tr</span>&gt;</span></div><div class="line">					<span class="tag">&lt;<span class="name">th</span>&gt;</span>科目<span class="tag">&lt;/<span class="name">th</span>&gt;</span></div><div class="line">					<span class="tag">&lt;<span class="name">th</span>&gt;</span>分数<span class="tag">&lt;/<span class="name">th</span>&gt;</span></div><div class="line">					<span class="tag">&lt;<span class="name">th</span>&gt;</span>$index<span class="tag">&lt;/<span class="name">th</span>&gt;</span></div><div class="line">					<span class="tag">&lt;<span class="name">th</span>&gt;</span>$first<span class="tag">&lt;/<span class="name">th</span>&gt;</span></div><div class="line">					<span class="tag">&lt;<span class="name">th</span>&gt;</span>$last<span class="tag">&lt;/<span class="name">th</span>&gt;</span></div><div class="line">					<span class="tag">&lt;<span class="name">th</span>&gt;</span>$middle<span class="tag">&lt;/<span class="name">th</span>&gt;</span></div><div class="line">					<span class="tag">&lt;<span class="name">th</span>&gt;</span>$even<span class="tag">&lt;/<span class="name">th</span>&gt;</span></div><div class="line">					<span class="tag">&lt;<span class="name">th</span>&gt;</span>$odd<span class="tag">&lt;/<span class="name">th</span>&gt;</span></div><div class="line">				<span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line">			<span class="tag">&lt;/<span class="name">thead</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">tbody</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">tr</span> <span class="attr">ng-repeat</span>=<span class="string">"data in datas"</span>&gt;</span></div><div class="line">					<span class="tag">&lt;<span class="name">td</span> <span class="attr">ng-bind</span>=<span class="string">"data.subject"</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">					<span class="tag">&lt;<span class="name">td</span> <span class="attr">ng-bind</span>=<span class="string">"data.score"</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">					<span class="tag">&lt;<span class="name">td</span> <span class="attr">ng-bind</span>=<span class="string">"$index"</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">					<span class="tag">&lt;<span class="name">td</span> <span class="attr">ng-bind</span>=<span class="string">"$first"</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">					<span class="tag">&lt;<span class="name">td</span> <span class="attr">ng-bind</span>=<span class="string">"$last"</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">					<span class="tag">&lt;<span class="name">td</span> <span class="attr">ng-bind</span>=<span class="string">"$middle"</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">					<span class="tag">&lt;<span class="name">td</span> <span class="attr">ng-bind</span>=<span class="string">"$even"</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">					<span class="tag">&lt;<span class="name">td</span> <span class="attr">ng-bind</span>=<span class="string">"$odd"</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">				<span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line">			<span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">table</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="actionscript"></span></div><div class="line"><span class="keyword">var</span> myApp = angular.module(<span class="string">'myApp'</span>,[]);</div><div class="line">myApp.controller(<span class="string">'Aa'</span>, [<span class="string">'$scope'</span>,<span class="string">'$filter'</span>, <span class="function"><span class="keyword">function</span> <span class="params">($scope,$filter)</span> </span>&#123;</div><div class="line">	$scope.datas = [</div><div class="line">		&#123;<span class="string">'subject'</span>:<span class="string">'chinese'</span>,<span class="string">'score'</span>:<span class="number">90</span>&#125;,</div><div class="line">		&#123;<span class="string">'subject'</span>:<span class="string">'mathematics'</span>,<span class="string">'score'</span>:<span class="number">80</span>&#125;,</div><div class="line">		&#123;<span class="string">'subject'</span>:<span class="string">'english'</span>,<span class="string">'score'</span>:<span class="number">70</span>&#125;,</div><div class="line">		&#123;<span class="string">'subject'</span>:<span class="string">'sport'</span>,<span class="string">'score'</span>:<span class="number">85</span>&#125;,</div><div class="line">	];</div><div class="line">	</div><div class="line">&#125;]);</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<h5 id="ng-repeat-star和ng-repeat-end实现兄弟节点的循环操作"><a href="#ng-repeat-star和ng-repeat-end实现兄弟节点的循环操作" class="headerlink" title="ng-repeat-star和ng-repeat-end实现兄弟节点的循环操作"></a><code>ng-repeat-star</code>和<code>ng-repeat-end</code>实现兄弟节点的循环操作</h5><p>避免加在父级会把父级也循环出来<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">ng-app</span>=<span class="string">"myApp"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></div><div class="line">	<span class="selector-class">.t</span>&#123;</div><div class="line">		<span class="attribute">background</span>: <span class="number">#ddd</span>;</div><div class="line">		<span class="attribute">margin-top</span>: <span class="number">40px</span>;</div><div class="line">	&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">div</span>  <span class="attr">ng-controller</span>=<span class="string">"Aa"</span> &gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">ng-repeat-start</span>=<span class="string">"data in datas"</span> <span class="attr">ng-bind</span>=<span class="string">"$index"</span> <span class="attr">class</span>=<span class="string">"t"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">p</span> <span class="attr">ng-bind</span>=<span class="string">"data.subject"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">ng-repeat-end</span>=<span class="string">"data in datas"</span> <span class="attr">ng-bind</span>=<span class="string">"data.score"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="actionscript"></span></div><div class="line"><span class="keyword">var</span> myApp = angular.module(<span class="string">'myApp'</span>,[]);</div><div class="line">myApp.controller(<span class="string">'Aa'</span>, [<span class="string">'$scope'</span>,<span class="string">'$filter'</span>, <span class="function"><span class="keyword">function</span> <span class="params">($scope,$filter)</span> </span>&#123;</div><div class="line">	$scope.datas = [</div><div class="line">		&#123;<span class="string">'subject'</span>:<span class="string">'chinese'</span>,<span class="string">'score'</span>:<span class="number">90</span>&#125;,</div><div class="line">		&#123;<span class="string">'subject'</span>:<span class="string">'mathematics'</span>,<span class="string">'score'</span>:<span class="number">80</span>&#125;,</div><div class="line">		&#123;<span class="string">'subject'</span>:<span class="string">'english'</span>,<span class="string">'score'</span>:<span class="number">70</span>&#125;,</div><div class="line">		&#123;<span class="string">'subject'</span>:<span class="string">'sport'</span>,<span class="string">'score'</span>:<span class="number">85</span>&#125;,</div><div class="line">	];</div><div class="line">&#125;]);</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h4 id="ng-model-里面的属性"><a href="#ng-model-里面的属性" class="headerlink" title="ng-model 里面的属性"></a><code>ng-model</code> 里面的属性</h4><h5 id="parsers属性"><a href="#parsers属性" class="headerlink" title="$parsers属性"></a><code>$parsers</code>属性</h5><h5 id="validators-一个json对象"><a href="#validators-一个json对象" class="headerlink" title="$validators 一个json对象"></a><code>$validators</code> 一个json对象</h5><figure class="highlight css"><figcaption><span>json</span><a href="http://www.cnblogs.com/liulangmao/p/4110137.html" target="_blank" rel="external">流浪猫の窝</a></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">  &#123;</div><div class="line">   <span class="attribute">validateName</span>: <span class="built_in">function</span>(modelValue,viewValue)&#123;</div><div class="line">       return ...</div><div class="line">   &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>当<code>$setViewValue(value)</code>被赋值给<code>$modelValue</code>之前,会经过<code>$parsers</code>管道,经过<code>$parsers</code>管道时,就会经过这个<code>$validators</code>管道.其中validateName是验证的名字,函数是这个验证的方法,其中的参数<code>modelValue</code>和<code>viewValue</code>就是<code>$modelValue</code>和<code>$viewValue</code>,如果返回值是<code>true</code>,则通过validateName验证,如果返回值是<code>false</code>,则没有通过validateName验证,如果没有通过validateName验证,<code>$error.validateName</code>就会为<code>true</code>.这就是angular内部验证表单项的原理.</p>
<figure class="highlight javascript"><figcaption><span>html</span><a href="http://www.cnblogs.com/liulangmao/p/4110137.html" target="_blank" rel="external">流浪猫の窝</a></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"alert alert-danger"</span> role=<span class="string">"alert"</span></div><div class="line"> ng-show=<span class="string">"myForm.myWidget.$error.validCharacters"</span>&gt;</div><div class="line">    <span class="xml"><span class="tag">&lt;<span class="name">strong</span>&gt;</span>Oh!<span class="tag">&lt;/<span class="name">strong</span>&gt;</span></span> 不符合自定义的验证规则!</div><div class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></div></pre></td></tr></table></figure>
<figure class="highlight javascript"><figcaption><span>javascript</span><a href="http://www.cnblogs.com/liulangmao/p/4110137.html" target="_blank" rel="external">流浪猫の窝</a></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;scritp&gt;</div><div class="line">  ngModel.$validators.validCharacters = <span class="function"><span class="keyword">function</span>(<span class="params">modelValue, viewValue</span>) </span>&#123;</div><div class="line">      <span class="keyword">var</span> value = modelValue || viewValue;</div><div class="line">      <span class="keyword">return</span> <span class="regexp">/[0-9]+/</span>.test(value);</div><div class="line">  &#125;;</div><div class="line"><span class="xml"><span class="tag">&lt;/<span class="name">scritp</span>&gt;</span></span></div></pre></td></tr></table></figure>
<h5 id="formatters"><a href="#formatters" class="headerlink" title="$formatters"></a><code>$formatters</code></h5><p>它保存的是从modelValue向viewValue绑定过程中的处理函数</p>
<h5 id="setViewValue"><a href="#setViewValue" class="headerlink" title="$setViewValue"></a><code>$setViewValue</code></h5><p>当view发生了某件事情时，从view向model绑定调用$setViewValue 把viewValue保存下来</p>
<h5 id="render"><a href="#render" class="headerlink" title="$render"></a><code>$render</code></h5><p>当模型发生变化时，应该怎么去更新视图，从model向view绑定，调用ctrl.$render方法，将viewValue渲染到页面上</p>
<h5 id="setValidity"><a href="#setValidity" class="headerlink" title="$setValidity"></a><code>$setValidity</code></h5><p>设置验证结果</p>
<h5 id="viewValue"><a href="#viewValue" class="headerlink" title="$viewValue"></a><code>$viewValue</code></h5><p>视图的值</p>
<h5 id="modelValue"><a href="#modelValue" class="headerlink" title="$modelValue"></a><code>$modelValue</code></h5><p>模型里的值</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">ng-app</span>=<span class="string">"myApp"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">form</span> <span class="attr">name</span>=<span class="string">"reg"</span> <span class="attr">ng-controller</span>=<span class="string">"myFrom"</span> <span class="attr">ng-submit</span>=<span class="string">"submit(reg)"</span> <span class="attr">novalidate</span>=<span class="string">"true"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">"phone"</span> <span class="attr">ng-model</span>=<span class="string">"myPhone"</span> <span class="attr">type</span>=<span class="string">"number"</span> <span class="attr">required</span> </span></div><div class="line">            <span class="attr">ng-maxlength</span>=<span class="string">"11"</span> </div><div class="line">            <span class="attr">valid</span> <span class="attr">number-type</span>=<span class="string">"integer"</span> <span class="attr">number-valid</span> <span class="attr">show-error</span> &gt;</div><div class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;myPhone&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;reg.phone.$error&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">name</span>=<span class="string">"mypw"</span> <span class="attr">ng-model</span>=<span class="string">"myPassword"</span> <span class="attr">show-error</span> </span></div><div class="line">    <span class="attr">minLength</span>=<span class="string">"6"</span> <span class="attr">maxlength</span>=<span class="string">"10"</span> <span class="attr">ng-maxlength</span>=<span class="string">"8"</span> <span class="attr">placeholder</span>=<span class="string">"请输入密码"</span>&gt;</div><div class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;reg.mypw.$error&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"submit"</span>&gt;</span>提交<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">form</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123;reg.$invalid&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"angular.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">    <span class="keyword">var</span> m1 = angular.module(<span class="string">'myApp'</span>,[]);</div><div class="line">    m1.controller(<span class="string">'myFrom'</span>, [<span class="string">'$scope'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">$scope</span>) </span>&#123;</div><div class="line">      $scope.submit = <span class="function"><span class="keyword">function</span>(<span class="params">form</span>)</span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(form)</div><div class="line">      &#125;</div><div class="line">    &#125;])</div><div class="line">    .directive(<span class="string">'numberValid'</span>, [<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">      <span class="keyword">return</span> &#123;</div><div class="line">        <span class="attr">restrict</span>: <span class="string">'A'</span>,</div><div class="line">        <span class="attr">require</span>:<span class="string">'ngModel'</span>,</div><div class="line">        <span class="attr">scope</span> : &#123;</div><div class="line">          <span class="attr">numberType</span> : <span class="string">'@'</span> <span class="comment">//Integer整数 decimal小数</span></div><div class="line">        &#125;,</div><div class="line">        <span class="attr">link</span>: <span class="function"><span class="keyword">function</span> (<span class="params">scope, iElement, iAttrs,ctrl</span>) </span>&#123;</div><div class="line">          scope.$watch(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">            <span class="keyword">return</span> ctrl.$viewValue</div><div class="line">          &#125;,<span class="function"><span class="keyword">function</span>(<span class="params">newVal,oldVal</span>)</span>&#123;</div><div class="line">            <span class="keyword">if</span>(newVal === <span class="string">''</span>)&#123;</div><div class="line">              <span class="keyword">if</span>(oldVal.length == <span class="number">1</span>)&#123;</div><div class="line">                oldVal = <span class="string">''</span>;</div><div class="line">              &#125;</div><div class="line">              iElement.val(oldVal);</div><div class="line">              ctrl.$setViewValue(oldVal);</div><div class="line">            &#125;</div><div class="line">          &#125;,<span class="literal">true</span>);</div><div class="line">          <span class="comment">// $parsers: viewValue =&gt; modelValue</span></div><div class="line">          <span class="comment">// 绑定数据时都会执行$parsers函数</span></div><div class="line">          ctrl.$parsers.push(<span class="function"><span class="keyword">function</span>(<span class="params">viewVal</span>)</span>&#123;</div><div class="line">            <span class="comment">/**</span></div><div class="line">             * $setValidity 设置验证是否通过</div><div class="line">             * true 通过验证</div><div class="line">             * false 不通过验证 </div><div class="line">             */</div><div class="line">              <span class="keyword">if</span>(<span class="built_in">isNaN</span>(viewVal))&#123;</div><div class="line">                ctrl.$setValidity(<span class="string">'number'</span>,<span class="literal">false</span>);</div><div class="line">                <span class="built_in">console</span>.warn(<span class="string">'输入正确的数字'</span>);</div><div class="line">              &#125;<span class="keyword">else</span>&#123;</div><div class="line">                ctrl.$setValidity(<span class="string">'number'</span>,<span class="literal">true</span>);</div><div class="line">              &#125;</div><div class="line">              <span class="comment">//注意要return viewVal 不然不能进行双向绑定</span></div><div class="line">              <span class="keyword">return</span> viewVal;</div><div class="line">          &#125;)</div><div class="line"></div><div class="line">          <span class="comment">//当model的数据绑定到view上时会调用这个函数</span></div><div class="line">          <span class="comment">// ctrl.$formatters.push(function(modelVal)&#123;</span></div><div class="line">          <span class="comment">//   return modelVal + 'formatters'</span></div><div class="line">          <span class="comment">// &#125;)</span></div><div class="line"></div><div class="line">          <span class="comment">//$setViewValue 决定着用户输入的数据怎么保留到modelVaule中去</span></div><div class="line">        &#125;</div><div class="line">      &#125;;</div><div class="line">    &#125;])</div><div class="line">    .directive(<span class="string">'showError'</span>, [<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">      <span class="keyword">return</span> &#123;</div><div class="line">        <span class="attr">restrict</span>: <span class="string">'A'</span>,</div><div class="line">        <span class="attr">require</span>: <span class="string">'ngModel'</span>,</div><div class="line">        <span class="attr">link</span>: <span class="function"><span class="keyword">function</span> (<span class="params">scope, iElement, iAttrs,ctrl</span>) </span>&#123;</div><div class="line">          iElement.on(<span class="string">'blur'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">            <span class="keyword">if</span>(ctrl.$invalid)&#123;</div><div class="line">              <span class="keyword">for</span>(<span class="keyword">var</span> key <span class="keyword">in</span> ctrl.$error)&#123;</div><div class="line">                <span class="keyword">if</span>(ctrl.$error[key])&#123;</div><div class="line">                  <span class="built_in">console</span>.log(key);</div><div class="line">                  <span class="keyword">break</span>;</div><div class="line">                &#125;</div><div class="line">              &#125;</div><div class="line">            &#125;</div><div class="line">          &#125;)</div><div class="line">        &#125;</div><div class="line">      &#125;;</div><div class="line">    &#125;])</div><div class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<h4 id="事件指令"><a href="#事件指令" class="headerlink" title="事件指令"></a>事件指令</h4><p>跟原生最大的区别在于可以</p>
<ol>
<li>写上数据的变量名来获取数据</li>
<li>支持表达式的写法</li>
</ol>
<ul>
<li><code>ng-click</code>/<code>ng-dbclick</code> 鼠标点击</li>
<li><code>ng-mousedown</code>/<code>ng-mouseup</code> 鼠标按下/抬起</li>
<li><code>ng-mouseenter</code>/<code>ng-mouseleave</code></li>
<li><code>ng-mousemove</code>/<code>ng-mouseove</code>/<code>ng=mouseout</code></li>
<li><code>ng-keydown</code>/<code>ng-keyup</code>/<code>ng-keypress</code> 键盘按下、键盘抬起</li>
<li><code>ng-focus</code>/<code>ng-blur</code> 获取焦点、失去焦点</li>
<li><code>ng-submit</code> 表单提交</li>
<li><code>ng-selected</code> 下拉菜单被选中的时候返回true<br>将复选框的选择状态与下拉菜单的第二个选项绑定，当下拉菜单的第二个被选中时，复选框也会被选中 </li>
</ul>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">ng-model</span>=<span class="string">"mySelect"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">""</span> <span class="attr">id</span>=<span class="string">""</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">""</span>&gt;</span>1<span class="tag">&lt;/<span class="name">option</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">""</span> <span class="attr">ng-selected</span>=<span class="string">"mySelect"</span>&gt;</span>2<span class="tag">&lt;/<span class="name">option</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></div></pre></td></tr></table></figure>
<ul>
<li><code>ng-change</code>当输入框的值发生改变时会触发<br>注意要配合<code>ng-model</code>来一起使用</li>
</ul>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">ng-app</span>=<span class="string">"myApp"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">ng-controller</span>=<span class="string">"Aa"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">ng-model</span>=<span class="string">"change"</span> <span class="attr">ng-change</span>=<span class="string">"console1(change)"</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line"><span class="keyword">var</span> myApp = angular.module(<span class="string">'myApp'</span>,[]);</div><div class="line">myApp.controller(<span class="string">'Aa'</span>, [<span class="string">'$scope'</span>,<span class="string">'$filter'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">$scope,$filter</span>) </span>&#123;</div><div class="line">	$scope.console1 = <span class="function"><span class="keyword">function</span>(<span class="params">val</span>)</span>&#123;</div><div class="line">		<span class="built_in">console</span>.log(val);</div><div class="line">	&#125;</div><div class="line">&#125;]);</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<ul>
<li><code>ng-copy</code> 输入框中进行复制操作时会触发</li>
<li><code>ng-cut</code>    输入框中进行剪切操作时会触发</li>
<li><code>ng-paste</code> 输入框中进行粘贴操作时会触发</li>
</ul>
<h4 id="input相关指令"><a href="#input相关指令" class="headerlink" title="input相关指令"></a>input相关指令</h4><h5 id="ng-disable-当为true时按钮不可用"><a href="#ng-disable-当为true时按钮不可用" class="headerlink" title="ng-disable 当为true时按钮不可用"></a><code>ng-disable</code> 当为true时按钮不可用</h5><ol>
<li>不可以进行表单提交</li>
</ol>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">ng-app</span>=<span class="string">"myApp"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">ng-controller</span>=<span class="string">"Aa"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"&#123;&#123;sec&#125;&#125;"</span>  <span class="attr">ng-disabled</span>=<span class="string">"false"</span> <span class="attr">ng-click</span>=<span class="string">"resetTime()"</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="actionscript"></span></div><div class="line"><span class="keyword">var</span> myApp = angular.module(<span class="string">'myApp'</span>,[]);</div><div class="line">myApp.controller(<span class="string">'Aa'</span>, [<span class="string">'$scope'</span>,<span class="string">'$interval'</span>, <span class="function"><span class="keyword">function</span> <span class="params">($scope,$interval)</span> </span>&#123;</div><div class="line">	<span class="keyword">var</span> cutTime = <span class="number">5</span>,</div><div class="line">		timer = <span class="literal">null</span>;</div><div class="line">	$scope.isDisable = <span class="literal">false</span>;</div><div class="line">	$scope.sec = cutTime + <span class="string">'秒'</span>;</div><div class="line">	<span class="comment">//把函数写在外部方便重复调用</span></div><div class="line">	<span class="function"><span class="keyword">function</span> <span class="title">cutDown</span><span class="params">()</span></span>&#123;</div><div class="line">			cutTime--;</div><div class="line">			$scope.sec = cutTime + <span class="string">'秒'</span>;</div><div class="line">			<span class="keyword">if</span>(cutTime == <span class="number">0</span>)&#123;</div><div class="line">				<span class="comment">//使用$interval.calcel(定时器名称)来清除定时器</span></div><div class="line">				$interval.cancel(timer);</div><div class="line">				$scope.isDisable = <span class="literal">false</span>;</div><div class="line">				$scope.sec = <span class="string">"重新开始"</span>;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	timer = $interval(cutDown,<span class="number">1</span>*<span class="number">1000</span>);</div><div class="line">	$scope.resetTime = <span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</div><div class="line">		cutTime = <span class="number">5</span>;</div><div class="line">		<span class="comment">//注意当重启定时器时，要带上之前已定义的定时器名称，否则会产品定时器叠加</span></div><div class="line">		<span class="comment">//参考文章:http://my.oschina.net/u/2602502/blog/603498?fromerr=b3aTLBX0</span></div><div class="line">		timer = $interval(cutDown,<span class="number">1</span>*<span class="number">1000</span>);</div><div class="line">	&#125;</div><div class="line">&#125;]);</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<h5 id="ng-readonly-只读"><a href="#ng-readonly-只读" class="headerlink" title="ng-readonly 只读"></a><code>ng-readonly</code> 只读</h5><ol>
<li>只针对input为<code>text</code>或<code>textarea</code>这类文本输入框有效</li>
<li>可以进行表单提交</li>
</ol>
<h5 id="ng-checked-当为true时选框会被选中"><a href="#ng-checked-当为true时选框会被选中" class="headerlink" title="ng-checked 当为true时选框会被选中"></a><code>ng-checked</code> 当为<code>true</code>时选框会被选中</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">ng-controller</span>=<span class="string">"Aa"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">ng-checked</span>=<span class="string">"true"</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<h5 id="ng-value-跟value一样，可以避免在数据没渲染时显示出表达式"><a href="#ng-value-跟value一样，可以避免在数据没渲染时显示出表达式" class="headerlink" title="ng-value 跟value一样，可以避免在数据没渲染时显示出表达式"></a><code>ng-value</code> 跟<code>value</code>一样，可以避免在数据没渲染时显示出表达式</h5><h4 id="数据显示优化"><a href="#数据显示优化" class="headerlink" title="数据显示优化"></a>数据显示优化</h4><h5 id="ng-bind"><a href="#ng-bind" class="headerlink" title="ng-bind"></a><code>ng-bind</code></h5><h5 id="ng-bind-template可以同时渲染多个表达式内容"><a href="#ng-bind-template可以同时渲染多个表达式内容" class="headerlink" title="ng-bind-template可以同时渲染多个表达式内容"></a><code>ng-bind-template</code>可以同时渲染多个表达式内容</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">ng-app</span>=<span class="string">"myApp"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">ng-controller</span>=<span class="string">"Aa"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">p</span> <span class="attr">ng-bind-template</span>=<span class="string">"&#123;&#123;name&#125;&#125;,&#123;&#123;txt | uppercase&#125;&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="actionscript"></span></div><div class="line"><span class="keyword">var</span> myApp = angular.module(<span class="string">'myApp'</span>,[]);</div><div class="line">myApp.controller(<span class="string">'Aa'</span>, [<span class="string">'$scope'</span>,<span class="string">'$interval'</span>, <span class="function"><span class="keyword">function</span> <span class="params">($scope,$interval)</span> </span>&#123;</div><div class="line">	$scope.name = <span class="string">'weison'</span></div><div class="line">	$scope.txt = <span class="string">'learn angular'</span>;</div><div class="line">&#125;]);</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<h5 id="ng-bind-html-配合-sce来解释html"><a href="#ng-bind-html-配合-sce来解释html" class="headerlink" title="ng-bind-html 配合$sce来解释html"></a><code>ng-bind-html</code> 配合<code>$sce</code>来解释html</h5><p>参考资料<a href="https://segmentfault.com/a/1190000000639561" target="_blank" rel="external">angular中的ng-bind-html指令和$sce服务</a></p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">ng-app</span>=<span class="string">"myApp"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">ng-controller</span>=<span class="string">"Aa"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">p</span> <span class="attr">ng-bind-html</span>=<span class="string">" txt | toTrust"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">ng-bind-html</span>=<span class="string">"t2 | toTrust"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="actionscript"></span></div><div class="line"><span class="keyword">var</span> myApp = angular.module(<span class="string">'myApp'</span>,[]);</div><div class="line">myApp.controller(<span class="string">'Aa'</span>, [<span class="string">'$scope'</span>,<span class="string">'$sce'</span>, <span class="function"><span class="keyword">function</span> <span class="params">($scope,$sce)</span> </span>&#123;</div><div class="line">	$scope.txt = <span class="string">'&lt;h1&gt;hello&lt;/h1&gt;&lt;br /&gt;123123'</span>;</div><div class="line">	$scope.t2 = <span class="string">'&lt;span&gt;1231&lt;/span&gt;'</span>;</div><div class="line">&#125;]);</div><div class="line">myApp.filter(<span class="string">'toTrust'</span>,[<span class="string">'$sce'</span>,<span class="function"><span class="keyword">function</span><span class="params">($sce)</span></span>&#123;</div><div class="line">	<span class="keyword">return</span> <span class="function"><span class="keyword">function</span><span class="params">(html)</span></span>&#123;</div><div class="line">		<span class="keyword">return</span> $sce.trustAsHtml(html);</div><div class="line">	&#125;</div><div class="line">&#125;]);</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<h5 id="ng-cloak-在元素解释完成前，样式会被设置成display-none"><a href="#ng-cloak-在元素解释完成前，样式会被设置成display-none" class="headerlink" title="ng-cloak 在元素解释完成前，样式会被设置成display:none"></a><code>ng-cloak</code> 在元素解释完成前，样式会被设置成display:none</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">ng-app</span>=<span class="string">"myApp"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">ng-controller</span>=<span class="string">"Aa"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">ng-cloak</span>&gt;</span>&#123;&#123;t2&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">ng-cloak</span>&gt;</span>&#123;&#123;t3&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="actionscript"></span></div><div class="line"><span class="keyword">var</span> myApp = angular.module(<span class="string">'myApp'</span>,[]);</div><div class="line">myApp.controller(<span class="string">'Aa'</span>, [<span class="string">'$scope'</span>,<span class="string">'$sce'</span>, <span class="function"><span class="keyword">function</span> <span class="params">($scope,$sce)</span> </span>&#123;</div><div class="line">	$scope.t2 = <span class="string">'2212'</span>;</div><div class="line">	<span class="keyword">return</span>;</div><div class="line">	$scope.t3 = <span class="string">'3333'</span>;</div><div class="line">&#125;]);</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<h5 id="ng-non-bindable-不进行表达的解释"><a href="#ng-non-bindable-不进行表达的解释" class="headerlink" title="ng-non-bindable 不进行表达的解释"></a><code>ng-non-bindable</code> 不进行表达的解释</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">ng-app</span>=<span class="string">"myApp"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">ng-controller</span>=<span class="string">"Aa"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">ng-cloak</span>&gt;</span>&#123;&#123;t2&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">ng-non-bindable</span>&gt;</span>&#123;&#123;t2&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="actionscript"></span></div><div class="line"><span class="keyword">var</span> myApp = angular.module(<span class="string">'myApp'</span>,[]);</div><div class="line">myApp.controller(<span class="string">'Aa'</span>, [<span class="string">'$scope'</span>, <span class="function"><span class="keyword">function</span> <span class="params">($scope)</span> </span>&#123;</div><div class="line">	$scope.t2 = <span class="string">'2212'</span>;</div><div class="line">&#125;]);</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<h4 id="样式指令"><a href="#样式指令" class="headerlink" title="样式指令"></a>样式指令</h4><h5 id="ng-class"><a href="#ng-class" class="headerlink" title="ng-class"></a><code>ng-class</code></h5><p>类似于对象的形式,{样式名:判断条件}<br>当判断条件成立时，使用样式名<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">ng-class</span>=<span class="string">"&#123;样式1:判断条件&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure></p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></div><div class="line"><span class="selector-class">.bg</span>&#123;</div><div class="line">	<span class="attribute">background</span>: red;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.bd</span>&#123;</div><div class="line">	<span class="attribute">border</span>:<span class="number">5px</span> solid green;</div><div class="line">&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">ng-controller</span>=<span class="string">"c1"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">p</span> <span class="attr">ng-class</span>=<span class="string">"&#123;bg:true,bd:&#123;&#123;1&lt;2&#125;&#125;&#125;"</span>&gt;</span>ngClass<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<h5 id="ng-style-解释行内样式-可以写在行内，也要以单独抽取成表达式"><a href="#ng-style-解释行内样式-可以写在行内，也要以单独抽取成表达式" class="headerlink" title="ng-style 解释行内样式,可以写在行内，也要以单独抽取成表达式"></a><code>ng-style</code> 解释行内样式,可以写在行内，也要以单独抽取成表达式</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">ng-app</span>=<span class="string">"myApp"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">ng-controller</span>=<span class="string">"Aa"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></div><div class="line">	<span class="selector-class">.b</span>&#123;	<span class="attribute">background</span>: <span class="number">#FFEB3B</span>;&#125;</div><div class="line">	<span class="selector-class">.c</span>&#123;	<span class="attribute">border</span>: <span class="number">1px</span> solid blue;	&#125;</div><div class="line">	<span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">ng-class</span>=<span class="string">"&#123;b:true,c:true&#125;"</span>&gt;</span>1111<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">ng-style</span>=<span class="string">"&#123;'background':'blue','color':'#fff'&#125;"</span>&gt;</span>2222<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">ng-style</span>=<span class="string">"&#123;&#123;myStyle&#125;&#125;"</span>&gt;</span>3333<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">ng-class</span>=<span class="string">"&#123;&#123;myClass&#125;&#125;"</span>&gt;</span>4444<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="actionscript"></span></div><div class="line"><span class="keyword">var</span> myApp = angular.module(<span class="string">'myApp'</span>,[]);</div><div class="line">myApp.controller(<span class="string">'Aa'</span>, [<span class="string">'$scope'</span>,<span class="string">'$sce'</span>, <span class="function"><span class="keyword">function</span> <span class="params">($scope,$sce)</span> </span>&#123;</div><div class="line">	$scope.t2 = <span class="string">'2212'</span>;</div><div class="line">	$scope.myStyle = &#123;<span class="string">'background'</span>:<span class="string">'blue'</span>,<span class="string">'color'</span>:<span class="string">'#fff'</span>&#125;;</div><div class="line">	$scope.myClass = &#123;b:<span class="literal">true</span>,c:<span class="literal">true</span>&#125;;</div><div class="line">&#125;]);</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<h5 id="ng-attr-属性名-通用的属性写法"><a href="#ng-attr-属性名-通用的属性写法" class="headerlink" title="ng-attr-(属性名) 通用的属性写法"></a><code>ng-attr-(属性名)</code> 通用的属性写法</h5><h4 id="DOM操作"><a href="#DOM操作" class="headerlink" title="DOM操作"></a>DOM操作</h4><h5 id="ng-show-ng-hide"><a href="#ng-show-ng-hide" class="headerlink" title="ng-show/ng-hide"></a><code>ng-show</code>/<code>ng-hide</code></h5><ul>
<li><code>ng-show</code> true时内容显示，false时内容隐藏</li>
<li><code>ng-hide</code> true时隐藏，flase时显示</li>
<li><code>ng-if</code> true时插入标签，flase时删除标签</li>
</ul>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">ng-controller</span>=<span class="string">"Aa"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">ng-model</span>=<span class="string">"cb"</span> <span class="attr">ng-init</span>=<span class="string">"cb=false"</span>&gt;</span> </div><div class="line">	<span class="tag">&lt;<span class="name">div</span> &gt;</span>ng-show:&#123;&#123;cb&#125;&#125;,<span class="tag">&lt;<span class="name">span</span> <span class="attr">ng-show</span>=<span class="string">"cb"</span>&gt;</span>ng-show<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">div</span> &gt;</span>ng-hide:&#123;&#123;cb&#125;&#125;,<span class="tag">&lt;<span class="name">span</span> <span class="attr">ng-hide</span>=<span class="string">"cb"</span>&gt;</span>ng-hide<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">div</span> &gt;</span>ng-if:&#123;&#123;cb&#125;&#125;,<span class="tag">&lt;<span class="name">span</span> <span class="attr">ng-if</span>=<span class="string">"cb"</span>&gt;</span>ng-if<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<h5 id="ng-switch配合on-default-when来有选择性的对元素进行显示隐藏"><a href="#ng-switch配合on-default-when来有选择性的对元素进行显示隐藏" class="headerlink" title="ng-switch配合on``default``when来有选择性的对元素进行显示隐藏"></a><code>ng-switch</code>配合<code>on``default``when</code>来有选择性的对元素进行显示隐藏</h5><ul>
<li><code>on</code> 绑定的变量</li>
<li><code>default</code> 默认情况下的内容</li>
<li><code>when</code> 当on绑定的内容发生改变时，进行选择</li>
</ul>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">ng-app</span>=<span class="string">"myApp"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">ng-controller</span>=<span class="string">"Aa"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">""</span> <span class="attr">id</span>=<span class="string">""</span> <span class="attr">ng-model</span>=<span class="string">"switchTest"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"default"</span>  &gt;</span>default<span class="tag">&lt;/<span class="name">option</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"1"</span> &gt;</span>1<span class="tag">&lt;/<span class="name">option</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"2"</span>&gt;</span>2<span class="tag">&lt;/<span class="name">option</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">select</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">ng-switch</span> <span class="attr">on</span>=<span class="string">"switchTest"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">ul</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">li</span> <span class="attr">ng-switch-default</span>&gt;</span>default<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">li</span> <span class="attr">ng-switch-when</span>=<span class="string">"1"</span>&gt;</span>1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">li</span> <span class="attr">ng-switch-when</span>=<span class="string">"2"</span>&gt;</span>2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="actionscript"></span></div><div class="line"><span class="keyword">var</span> myApp = angular.module(<span class="string">'myApp'</span>,[]);</div><div class="line">myApp.controller(<span class="string">'Aa'</span>, [<span class="string">'$scope'</span>, <span class="function"><span class="keyword">function</span> <span class="params">($scope)</span> </span>&#123;</div><div class="line">	$scope.switchTest = <span class="string">'default'</span>;</div><div class="line">	$scope.switchT = <span class="function"><span class="keyword">function</span><span class="params">(str)</span></span>&#123;</div><div class="line">		$scpe.switchTest = str;</div><div class="line">	&#125;</div><div class="line">&#125;]);</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<p>要注意的是<code>ng-if</code>及<code>ng-switch</code>的指令都会创建出子scope，因此在父级scope访问时不到，解决方案是将ng-model的数据绑定到<code>$pent</code>中去<br><figure class="highlight xml"><figcaption><span>javascript</span><a href="http://blog.csdn.net/gua_381091614/article/details/48544585" target="_blank" rel="external">流海阔山遥，未知何处是潇湘</a></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="handlebars"><span class="xml"></span></span></div><div class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">ng-if</span>=<span class="string">"1===1"</span> <span class="attr">ng-model</span>=<span class="string">"$parent.name"</span>&gt;</span>  </div><div class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Hello !<span class="tag">&lt;/<span class="name">p</span>&gt;</span>  </div><div class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span>  </div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure><br>或者参考<a href="http://stackoverflow.com/questions/18342917/angularjs-ng-model-doesnt-work-inside-ng-if" target="_blank" rel="external">Angularjs ng-model doesn’t work inside ng-if</a></p>
<h5 id="ng-open配合html下的detail来控制内容的显示与隐藏"><a href="#ng-open配合html下的detail来控制内容的显示与隐藏" class="headerlink" title="ng-open配合html下的detail来控制内容的显示与隐藏"></a><code>ng-open</code>配合html下的<code>detail</code>来控制内容的显示与隐藏</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">ng-app</span>=<span class="string">"myApp"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">ng-controller</span>=<span class="string">"Aa"</span> &gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">ng-model</span>=<span class="string">"cb"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">details</span> <span class="attr">ng-open</span>=<span class="string">"cb"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">summary</span>&gt;</span>Copyright 2011.<span class="tag">&lt;/<span class="name">summary</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">p</span>&gt;</span>All pages and graphics on this web site are the property of W3School.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">details</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="actionscript"></span></div><div class="line"><span class="keyword">var</span> myApp = angular.module(<span class="string">'myApp'</span>,[]);</div><div class="line">myApp.controller(<span class="string">'Aa'</span>, [<span class="string">'$scope'</span>, <span class="function"><span class="keyword">function</span> <span class="params">($scope)</span> </span>&#123;</div><div class="line">&#125;]);</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span>	</div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div></pre></td></tr></table></figure>
<h4 id="扩展部分操作"><a href="#扩展部分操作" class="headerlink" title="扩展部分操作"></a>扩展部分操作</h4><h5 id="ng-init-初始化数据"><a href="#ng-init-初始化数据" class="headerlink" title="ng-init 初始化数据"></a><code>ng-init</code> 初始化数据</h5><p>一般情况下建议还是在控制器上写，相对来说比较清晰，减少出错的几率，但在<code>ng-repeat</code>的时候有可能用到，因为它的属性挂载在标签上<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">ng-app</span>=<span class="string">"myApp"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">ng-controller</span>=<span class="string">"Aa"</span> &gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">ng-repeat</span>=<span class="string">"outter in datas"</span> <span class="attr">ng-init</span>=<span class="string">"outterIndex = $index"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">ng-repeat</span>=<span class="string">"inner in outter"</span> <span class="attr">ng-init</span>=<span class="string">"innerIndex = $index"</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">span</span> <span class="attr">ng-bind-template</span>=<span class="string">"&#123;&#123;outterIndex&#125;&#125;&#123;&#123;innerIndex&#125;&#125;:&#123;&#123;inner&#125;&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="actionscript"></span></div><div class="line"><span class="keyword">var</span> myApp = angular.module(<span class="string">'myApp'</span>,[]);</div><div class="line">myApp.controller(<span class="string">'Aa'</span>, [<span class="string">'$scope'</span>, <span class="function"><span class="keyword">function</span> <span class="params">($scope)</span> </span>&#123;</div><div class="line">	$scope.datas = [[<span class="string">'a'</span>,<span class="string">'b'</span>],[<span class="string">'c'</span>,<span class="string">'d'</span>]];</div><div class="line">&#125;]);</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h5 id="ng-include-引入外部的文件"><a href="#ng-include-引入外部的文件" class="headerlink" title="ng-include 引入外部的文件"></a><code>ng-include</code> 引入外部的文件</h5><p>要注意它的引入符号是”‘’”中间还带上了单引号<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">ng-include</span>=<span class="string">"'include.html'"</span> <span class="attr">scope</span>=<span class="string">""</span> <span class="attr">onload</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h5 id="ng-model-双向数据绑定"><a href="#ng-model-双向数据绑定" class="headerlink" title="ng-model 双向数据绑定"></a><code>ng-model</code> 双向数据绑定</h5><ol>
<li>利用<code>ng-model-option</code>下的<code>updateOn</code>来控制数据的更新时机</li>
</ol>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">ng-model</span>=<span class="string">"updateOn"</span> <span class="attr">ng-model-options</span>=<span class="string">"&#123;updateOn :'blur'&#125;"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">ng-bind</span>=<span class="string">"updateOn"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div></pre></td></tr></table></figure>
<h5 id="ng-controller-控制器"><a href="#ng-controller-控制器" class="headerlink" title="ng-controller 控制器"></a><code>ng-controller</code> 控制器</h5><ol>
<li>它是支持面向对象编程的</li>
<li>可以利用funciton的<code>prototype</code>属性来构建函数</li>
<li>通过controller下的<code>as</code>来实例化对象</li>
<li>通过访问实例化对象下的属性和方法来读取数据和运行函数</li>
</ol>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">ng-app</span>=<span class="string">"myApp"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">ng-controller</span>=<span class="string">"fnCon as a1"</span> &gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">ng-bind-template</span>=<span class="string">"&#123;&#123;a1.text&#125;&#125; &#123;&#123;a1.show()&#125;&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">ng-click</span>=<span class="string">"a1.sum(1,2)"</span>&gt;</span>1,2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="actionscript"></span></div><div class="line"><span class="keyword">var</span> myApp = angular.module(<span class="string">'myApp'</span>,[]);</div><div class="line">myApp.controller(<span class="string">'Aa'</span>, [<span class="string">'$scope'</span>, fnCon]);</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">fnCon</span><span class="params">($scope)</span> </span>&#123;</div><div class="line">&#125;</div><div class="line">fnCon.prototype.text = <span class="string">'hello'</span>;</div><div class="line">fnCon.prototype.show = <span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</div><div class="line">	<span class="keyword">return</span> <span class="string">'angular'</span>;</div><div class="line">&#125;</div><div class="line">fnCon.prototype.sum = <span class="function"><span class="keyword">function</span><span class="params">(n1,n2)</span></span>&#123;</div><div class="line">	alert (n1+n2);</div><div class="line">&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<h4 id="标签指令"><a href="#标签指令" class="headerlink" title="标签指令"></a>标签指令</h4><h5 id="a"><a href="#a" class="headerlink" title="a"></a><code>a</code></h5><p>阻止了系统默认刷新页面的事件</p>
<h5 id="select"><a href="#select" class="headerlink" title="select"></a><code>select</code></h5><ol>
<li>利用<code>ng-options</code>来生成生拉菜单的内容</li>
<li>单项下的某一属性 for 单项 in 数据集合</li>
<li>要配合<code>ng-model</code>来使用,然后可以通过它先绑定默认的值</li>
</ol>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">ng-controller</span>=<span class="string">"Aa"</span> <span class="attr">ng-app</span>=<span class="string">"myApp"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">p</span> &gt;</span>&#123;&#123;selectData&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">""</span> <span class="attr">id</span>=<span class="string">""</span> <span class="attr">ng-options</span>=<span class="string">"myData.subject for myData in datas"</span> <span class="attr">ng-model</span>=<span class="string">"selectData"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">select</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="actionscript"></span></div><div class="line"><span class="keyword">var</span> myApp = angular.module(<span class="string">'myApp'</span>,[]);</div><div class="line">myApp.controller(<span class="string">'Aa'</span>, [<span class="string">'$scope'</span>, <span class="function"><span class="keyword">function</span><span class="params">($scope)</span></span>&#123;</div><div class="line">	$scope.datas = [&#123;<span class="string">'subject'</span>:<span class="string">'english'</span>,<span class="string">'score'</span>:<span class="number">90</span>&#125;,&#123;<span class="string">'subject'</span>:<span class="string">'chinese'</span>,<span class="string">'score'</span>:<span class="number">80</span>&#125;];</div><div class="line">	$scope.selectData = $scope.datas[<span class="number">0</span>];</div><div class="line">&#125;]);</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<h5 id="form"><a href="#form" class="headerlink" title="form"></a><code>form</code></h5><ol>
<li><code>novalidate</code> 或<code>&lt;ng-form&gt;&lt;/ng-form&gt;</code> 加上后会阻止静表单的默认样式和行为</li>
</ol>
<h4 id="表单验证指令"><a href="#表单验证指令" class="headerlink" title="表单验证指令"></a>表单验证指令</h4><ol>
<li>要通过<code>name</code>的方式进行查找</li>
<li>配合<code>ng-model</code>来使用</li>
<li>当验证不通过时，数据是不会渲染在视图上的</li>
<li><code>$error</code> 在取值的时候会有一个优先值，如果优先级高的那个为true，那个其余的条件会变成false</li>
</ol>
<h5 id="验证选项"><a href="#验证选项" class="headerlink" title="验证选项"></a>验证选项</h5><ol>
<li>“type=’number’” 数字类型</li>
<li>“type=’email’” 邮箱类型</li>
<li>“type=’url’” 网址类型</li>
</ol>
<h5 id="验证属性"><a href="#验证属性" class="headerlink" title="验证属性"></a>验证属性</h5><table>
<thead>
<tr>
<th>Property</th>
<th>class</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>$valid</td>
<td>ng-valid</td>
<td>{Boolean} 当验证规则通过则为true</td>
</tr>
<tr>
<td>$invalid</td>
<td>ng-invalid</td>
<td>{Boolean} 当验证规则不通过是为true</td>
</tr>
<tr>
<td>$pristine</td>
<td>ng-pristine</td>
<td>{Boolean} 当输入元素没被填写时</td>
</tr>
<tr>
<td>$dirty</td>
<td>ng-dirty</td>
<td>{Boolean} 当输入元素没填写时</td>
</tr>
</tbody>
</table>
<p>当条件符合时，会自动在验证元素上加上对应的class,如当input的验证通过时，input会被添加<code>ng-valid</code>样式</p>
<h5 id="访问表单的属性"><a href="#访问表单的属性" class="headerlink" title="访问表单的属性"></a>访问表单的属性</h5><ol>
<li><p>访问表格 <code>&lt;form name&gt;.&lt;angular property&gt;</code><br>如当表单验证不通过时，让提交按钮失效<code>ng-disable=&quot;myForm.$invalid&quot;</code></p>
</li>
<li><p>访问input <code>&lt;form name&gt;.&lt;input name&gt;.&lt;angular property&gt;</code><br>如：当input内容验证不通过时，显示错误信息<code>ng-show=&quot;myForm.userName.$dirty &amp;&amp; myForm.userName.$invalid &quot;</code></p>
</li>
</ol>
<p><a href="http://runjs.cn/detail/2u0zuhou" target="_blank" rel="external">张治中V -AngularJS的表单验证</a></p>
<h5 id="required为空，当为空时，返回true"><a href="#required为空，当为空时，返回true" class="headerlink" title="required为空，当为空时，返回true"></a><code>required</code>为空，当为空时，返回true</h5><h5 id="valid有效值，当表单通过时，这个值为true"><a href="#valid有效值，当表单通过时，这个值为true" class="headerlink" title="$valid有效值，当表单通过时，这个值为true"></a><code>$valid</code>有效值，当表单通过时，这个值为true</h5><h5 id="invalid无效值，不通过时，这个值为true"><a href="#invalid无效值，不通过时，这个值为true" class="headerlink" title="$invalid无效值，不通过时，这个值为true"></a><code>$invalid</code>无效值，不通过时，这个值为true</h5><h5 id="pristine原始值未经改动时-为true"><a href="#pristine原始值未经改动时-为true" class="headerlink" title="$pristine原始值未经改动时,为true"></a><code>$pristine</code>原始值未经改动时,为true</h5><h5 id="dirty原始值改动时-为true"><a href="#dirty原始值改动时-为true" class="headerlink" title="$dirty原始值改动时,为true"></a><code>$dirty</code>原始值改动时,为true</h5><h5 id="ng-minlength-最小长度"><a href="#ng-minlength-最小长度" class="headerlink" title="ng-minlength 最小长度"></a><code>ng-minlength</code> 最小长度</h5><h5 id="ng-maxlength-最大长度"><a href="#ng-maxlength-最大长度" class="headerlink" title="ng-maxlength 最大长度"></a><code>ng-maxlength</code> 最大长度</h5><h5 id="ng-pattern-正则"><a href="#ng-pattern-正则" class="headerlink" title="ng-pattern 正则"></a><code>ng-pattern</code> 正则</h5><h5 id="touched-表单被触发过"><a href="#touched-表单被触发过" class="headerlink" title="$touched 表单被触发过"></a><code>$touched</code> 表单被触发过</h5><h5 id="error记录所有的验证信息-只有这个值有true就证明验证失败了"><a href="#error记录所有的验证信息-只有这个值有true就证明验证失败了" class="headerlink" title="$error记录所有的验证信息,只有这个值有true就证明验证失败了"></a><code>$error</code>记录所有的验证信息,只有这个值有<code>true</code>就证明验证失败了</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">ng-controller</span>=<span class="string">"Aa"</span> <span class="attr">ng-app</span>=<span class="string">"myApp"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">""</span> <span class="attr">name</span>=<span class="string">"myForm"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"email"</span> <span class="attr">ng-model</span>=<span class="string">"myEmail"</span> <span class="attr">name</span>=<span class="string">"myEmail"</span> <span class="attr">required</span> <span class="attr">ng-minlength</span>=<span class="string">"8"</span>  <span class="attr">ng-maxlength</span>=<span class="string">"12"</span> <span class="attr">ng-pattern</span>=<span class="string">"/^[a-zA-Z]+$/"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">p</span>&gt;</span>$valid有效值:&#123;&#123;myForm.myEmail.$valid&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">p</span>&gt;</span>$invalid无效值:&#123;&#123;myForm.myEmail.$invalid&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">p</span>&gt;</span>$pristine原始值:&#123;&#123;myForm.myEmail.$pristine&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">p</span>&gt;</span>$dirty非原始值:&#123;&#123;myForm.myEmail.$dirty&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">p</span>&gt;</span>$error错误信息:&#123;&#123;myForm.myEmail.$error&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">form</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="actionscript"></span></div><div class="line"><span class="keyword">var</span> myApp = angular.module(<span class="string">'myApp'</span>,[]);</div><div class="line">myApp.controller(<span class="string">'Aa'</span>, [<span class="string">'$scope'</span>, <span class="function"><span class="keyword">function</span><span class="params">($scope)</span></span>&#123;</div><div class="line">	$scope.myEmail = <span class="string">'explame@text.com'</span>;</div><div class="line">&#125;]);</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<h4 id="验证样式"><a href="#验证样式" class="headerlink" title="验证样式"></a>验证样式</h4><ol>
<li><code>.ng-valid{}</code> 验证通过 </li>
<li><code>.ng-invalid</code> 验证不通过</li>
<li><code>.ng-pristine{}</code> 保持着初始值</li>
<li><code>.ng-dirty{}</code> 值已被修改过</li>
</ol>
<h4 id="实例-表单验证"><a href="#实例-表单验证" class="headerlink" title="实例 表单验证"></a>实例 表单验证</h4><ol>
<li>利用<code>name</code>进行元素的查找</li>
<li>选取表单需要验证的内容</li>
<li>根据验证规则来确定验证提示</li>
<li>通过<code>ng-model</code>进行双向数据绑定</li>
<li>当表单内容失去焦点<code>ng-blur</code>时出发验证函数</li>
<li>在验证函数中，获取表单传递的<code>$error</code>数据，通过<code>for in</code>方法来判断验证规则是否通过</li>
<li>通过<code>filter</code>过滤出所需要显示的内容</li>
</ol>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">ng-controller</span>=<span class="string">"Aa"</span> <span class="attr">ng-app</span>=<span class="string">"myApp"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">""</span> <span class="attr">name</span>=<span class="string">"myForm"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">div</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">label</span>&gt;</span>手机号码：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"myTel"</span> <span class="attr">ng-model</span>=<span class="string">"regForm.tel.val"</span> <span class="attr">required</span> <span class="attr">ng-maxlength</span>=<span class="string">"11"</span> <span class="attr">ng-pattern</span>=<span class="string">"/^(0|86|17951)?(13[0-9]|15[012356789]|17[678]|18[0-9]|14[57])[0-9]&#123;8&#125;$/"</span> <span class="attr">ng-blur</span>=<span class="string">"change('tel',myForm.myTel.$error)"</span>&gt;</span><span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">span</span> <span class="attr">ng-repeat</span>=<span class="string">"tips in regForm.tel.tips | filter : regForm.tel.validTips"</span> <span class="attr">ng-bind</span>=<span class="string">"tips.tipsTxt"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">div</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">label</span>&gt;</span>密码：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">name</span>=<span class="string">"myPw"</span> <span class="attr">ng-model</span>=<span class="string">"regForm.pw.val"</span> <span class="attr">required</span> <span class="attr">ng-minlength</span>=<span class="string">"6"</span> <span class="attr">ng-blur</span>=<span class="string">"change('pw',myForm.myPw.$error)"</span>&gt;</span><span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">span</span> <span class="attr">ng-repeat</span>=<span class="string">"tips in regForm.pw.tips | filter : regForm.pw.validTips"</span> <span class="attr">ng-bind</span>=<span class="string">"tips.tipsTxt"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">div</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">label</span>&gt;</span>确认密码：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">name</span>=<span class="string">"myPwAgain"</span> <span class="attr">ng-model</span>=<span class="string">"regForm.myPwAgain.val"</span> <span class="attr">required</span> <span class="attr">ng-blur</span>=<span class="string">"change('myPwAgain',myForm.myPwAgain.$error)"</span> &gt;</span><span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">span</span> <span class="attr">ng-repeat</span>=<span class="string">"tips in regForm.myPwAgain.tips | filter : regForm.myPwAgain.validTips"</span> <span class="attr">ng-bind</span>=<span class="string">"tips.tipsTxt"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">form</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line"><span class="keyword">var</span> myApp = angular.module(<span class="string">'myApp'</span>,[]);</div><div class="line">myApp.controller(<span class="string">'Aa'</span>, [<span class="string">'$scope'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">$scope</span>)</span>&#123;</div><div class="line">	$scope.regForm = &#123;</div><div class="line">		<span class="attr">tel</span> : &#123;</div><div class="line">			<span class="string">'val'</span> : <span class="string">''</span>,</div><div class="line">			<span class="string">'validTips'</span> : <span class="string">'default'</span>,</div><div class="line">			<span class="string">'tips'</span> : [</div><div class="line">				&#123; <span class="string">'name'</span>:<span class="string">'default'</span> , <span class="string">'tipsTxt'</span>: <span class="string">'请输入验证码'</span>&#125;,</div><div class="line">				&#123; <span class="string">'name'</span>: <span class="string">'required'</span> , <span class="string">'tipsTxt'</span>: <span class="string">'请输入验证码'</span>&#125;,</div><div class="line">				&#123; <span class="string">'name'</span>:<span class="string">'pattern'</span> , <span class="string">'tipsTxt'</span>: <span class="string">'请输入正确的手机号码'</span>&#125;,</div><div class="line">				&#123; <span class="string">'name'</span>:<span class="string">'maxlength'</span> , <span class="string">'tipsTxt'</span>: <span class="string">'请输入11位的手机号码'</span>&#125;,</div><div class="line">				&#123; <span class="string">'name'</span>:<span class="string">'pass'</span> , <span class="string">'tipsTxt'</span>: <span class="string">'√'</span>&#125;,</div><div class="line">			]</div><div class="line">		&#125;,</div><div class="line">		<span class="attr">pw</span> : &#123;</div><div class="line">			<span class="string">'val'</span> : <span class="string">''</span>,</div><div class="line">			<span class="string">'validTips'</span> : <span class="string">'default'</span>,</div><div class="line">			<span class="string">'tips'</span> : [</div><div class="line">				&#123; <span class="string">'name'</span>:<span class="string">'default'</span> , <span class="string">'tipsTxt'</span>: <span class="string">'请输入密码'</span>&#125;,</div><div class="line">				&#123; <span class="string">'name'</span>: <span class="string">'required'</span> , <span class="string">'tipsTxt'</span>: <span class="string">'密码不能为空'</span>&#125;,</div><div class="line">				&#123; <span class="string">'name'</span>:<span class="string">'minlength'</span> , <span class="string">'tipsTxt'</span>: <span class="string">'密码长度不小于6位'</span>&#125;,</div><div class="line">				&#123; <span class="string">'name'</span>:<span class="string">'pass'</span> , <span class="string">'tipsTxt'</span>: <span class="string">'√'</span>&#125;,</div><div class="line">			]</div><div class="line">		&#125;,</div><div class="line">		<span class="attr">myPwAgain</span> : &#123;</div><div class="line">			<span class="string">'val'</span> : <span class="string">''</span>,</div><div class="line">			<span class="string">'validTips'</span> : <span class="string">'default'</span>,</div><div class="line">			<span class="string">'tips'</span> : [</div><div class="line">				&#123; <span class="string">'name'</span>:<span class="string">'default'</span> , <span class="string">'tipsTxt'</span>: <span class="string">'请再次输入密码'</span>&#125;,</div><div class="line">				&#123; <span class="string">'name'</span>:<span class="string">'required'</span> , <span class="string">'tipsTxt'</span>: <span class="string">'请再次输入密码'</span>&#125;,</div><div class="line">				&#123; <span class="string">'name'</span>:<span class="string">'pattern'</span> , <span class="string">'tipsTxt'</span>: <span class="string">'密码不一致'</span>&#125;,</div><div class="line">				&#123; <span class="string">'name'</span>:<span class="string">'pass'</span> , <span class="string">'tipsTxt'</span>: <span class="string">'√'</span>&#125;,</div><div class="line">			]</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	$scope.change = <span class="function"><span class="keyword">function</span>(<span class="params">ele,err</span>)</span>&#123;</div><div class="line">		<span class="comment">// alert($scope.regForm.myPwAgain.val);</span></div><div class="line">		<span class="keyword">if</span>(ele == <span class="string">'myPwAgain'</span> ||  ele == <span class="string">'pw'</span>)&#123;</div><div class="line">			<span class="keyword">if</span>($scope.regForm.pw.val == $scope.regForm.myPwAgain.val )&#123;</div><div class="line">				err.pattern = <span class="literal">false</span>;</div><div class="line">			&#125;<span class="keyword">else</span>&#123;</div><div class="line">				err.pattern = <span class="literal">true</span>;</div><div class="line">				$scope.regForm.myPwAgain.validTips = <span class="string">'pattern'</span>;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		<span class="built_in">console</span>.log(err);</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">var</span> attr <span class="keyword">in</span> err)&#123;</div><div class="line">			<span class="keyword">if</span>(err[attr] == <span class="literal">true</span>)&#123;</div><div class="line">				$scope.regForm[ele].validTips = attr;</div><div class="line">				<span class="keyword">return</span>;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		$scope.regForm[ele].validTips = <span class="string">'pass'</span>;</div><div class="line">	&#125; </div><div class="line">	</div><div class="line">&#125;]);</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<h4 id="自定义指令"><a href="#自定义指令" class="headerlink" title="自定义指令"></a>自定义指令</h4><p>注意指令在声明时使用的是驼峰式写法，而在html中应用要写成连字符的形式<br>例如指令名称为<code>myTab</code>，那么在html中应用则写成<code>my-tab</code></p>
<h4 id="angularjs指令编译的三个阶段"><a href="#angularjs指令编译的三个阶段" class="headerlink" title="angularjs指令编译的三个阶段"></a>angularjs指令编译的三个阶段</h4><ol>
<li>标签浏览器的API转换,将html转换成DOM</li>
<li>Angular compile ,搜索匹配的directive,按照priority(优先级)排序，并执行directive上的<code>compile</code>方法</li>
<li>执行directive上的<code>link</code>方法，进行scope绑定及事件绑定</li>
</ol>
<h5 id="restrict-指定指令的类型"><a href="#restrict-指定指令的类型" class="headerlink" title="restrict 指定指令的类型"></a>restrict 指定指令的类型</h5><p>区分大小写，而且是可以一直用的</p>
<ol>
<li><code>E</code> element 标签指令 <hello></hello>，主要实现模板替代</li>
<li><code>A</code> attribute 属性指令 <div hello=""></div>,主要用来实现功能性</li>
<li><code>C</code> class 样式指令 <div class="hello"></div></li>
<li><code>M</code> 注释形式 ,要配合replace:true来使用 <!-- directive:hello --></li>
</ol>
<h5 id="template-模板代码"><a href="#template-模板代码" class="headerlink" title="template 模板代码"></a><code>template</code> 模板代码</h5><h5 id="transclude-保留内容不被覆盖"><a href="#transclude-保留内容不被覆盖" class="headerlink" title="transclude 保留内容不被覆盖"></a><code>transclude</code> 保留内容不被覆盖</h5><p>加上后，会把指令内部原有的数据保留到transclude的标签内</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line">  transclude : <span class="literal">true</span>,</div><div class="line">  <span class="attr">template</span> : <span class="string">'&lt;div&gt;&lt;h1 ng-transclude&gt;&lt;/h1&gt;&lt;/div&gt;'</span></div><div class="line">&lt;<span class="regexp">/script&gt;</span></div></pre></td></tr></table></figure>
<h5 id="replace-以替换的形式来替代html"><a href="#replace-以替换的形式来替代html" class="headerlink" title="replace 以替换的形式来替代html"></a><code>replace</code> 以替换的形式来替代html</h5><p>假如未声明，它都会它template的内容放到指令的内部，而如果是<code>replace=true</code>，就会以替换的形式来解释代码</p>
<h5 id="templateUrl-使用路径引入html"><a href="#templateUrl-使用路径引入html" class="headerlink" title="templateUrl 使用路径引入html"></a><code>templateUrl</code> 使用路径引入html</h5><h5 id="scope"><a href="#scope" class="headerlink" title="scope"></a><code>scope</code></h5><ol>
<li><code>scope:false</code>,默认值,这样会与父级共享作用域</li>
<li><p><code>scope:true</code>，独立的作用域,每个指令互不影响，</p>
</li>
<li><p>隔离作用域{}，不再与外层的作用域有关系，它是独立的一个作用域，scope:{}<br>绑定策略</p>
</li>
</ol>
<ul>
<li><code>@</code> 单向绑定父级作用域名下的简单类型（String,Number,Boolean）数据</li>
<li><code>=</code> 相向绑定，任意一方的修改都会影响对方</li>
<li><code>&amp;</code> 绑定父级的函数,以把父级作用域的属性封装成一个函数，从而以函数的形式来读取父级的属性</li>
</ul>
<h5 id="controller-创建内部数据绑定"><a href="#controller-创建内部数据绑定" class="headerlink" title="controller 创建内部数据绑定"></a><code>controller</code> 创建内部数据绑定</h5><h5 id="controllerAs-为指令中的controller指定一个别名，当方便指令之间的数据和方法共用时调用"><a href="#controllerAs-为指令中的controller指定一个别名，当方便指令之间的数据和方法共用时调用" class="headerlink" title="controllerAs 为指令中的controller指定一个别名，当方便指令之间的数据和方法共用时调用"></a><code>controllerAs</code> 为指令中的controller指定一个别名，当方便指令之间的数据和方法共用时调用</h5><h5 id="require-引入的指令，实现指令之间的互相交互，进行跨指令之间的数据获取及方法共享"><a href="#require-引入的指令，实现指令之间的互相交互，进行跨指令之间的数据获取及方法共享" class="headerlink" title="require 引入的指令，实现指令之间的互相交互，进行跨指令之间的数据获取及方法共享"></a><code>require</code> 引入的指令，实现指令之间的互相交互，进行跨指令之间的数据获取及方法共享</h5><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div></pre></td><td class="code"><pre><div class="line"> require :'hello'; // =&gt; 在这个元素身上的这个指令的对象</div><div class="line"> require :'^hello'; // =&gt; 加上`^`后，会这个元素父级身上的这个指令的对象</div><div class="line"> require :'？hello'; // =&gt; 加上`？`后，如果找不到这个指令也不会报错，是一个容错机制</div><div class="line"> ```` </div><div class="line">##### `link` 进行DOM操作</div><div class="line">- `scope` 内部scope的值</div><div class="line">- `element` 每个最外层的DIV</div><div class="line">- `attr` 当前元素的所有属性</div><div class="line">- `reController`</div><div class="line">利用`require`所引用的指令,将该指令下的controller的方法和属性进行共用。由于scope仅内部使用，因为要使用this来进行数据共享</div><div class="line"></div><div class="line">````html</div><div class="line">&lt;div t1 t2&gt;&lt;/div&gt;</div><div class="line">&lt;script&gt;</div><div class="line">	var myApp = angular.module('myApp',[]);</div><div class="line">	myApp.controller('t1', ['$scope', function ($scope) &#123;</div><div class="line">		$scope.con = "指令下的con"</div><div class="line">		$scope.show = function(str)&#123;</div><div class="line">			alert(str);</div><div class="line">		&#125;</div><div class="line">	&#125;])</div><div class="line">	.directive('t1', [function () &#123;</div><div class="line">		return &#123;·</div><div class="line">			restrict: 'A',</div><div class="line">			controller : function($scope)&#123;</div><div class="line">				this.name = 'a';</div><div class="line">				this.say = function()&#123;</div><div class="line">					console.log(this.name);</div><div class="line">				&#125;</div><div class="line">			&#125;,</div><div class="line">			link: function (scope, iElement, iAttrs) &#123;</div><div class="line">				</div><div class="line">			&#125;</div><div class="line">		&#125;;</div><div class="line">	&#125;])</div><div class="line">	.directive('t2', [function () &#123;</div><div class="line">		return &#123;</div><div class="line">			restrict: 'A',</div><div class="line">			require : 't1',</div><div class="line">			link: function (scope, iElement, iAttrs,reController) &#123;</div><div class="line">				reController.say()</div><div class="line">			&#125;</div><div class="line">		&#125;;</div><div class="line">	&#125;])</div><div class="line">	.directive('tab', [function () &#123;</div><div class="line">		return &#123;</div><div class="line">			restrict: 'E',</div><div class="line">			scope : &#123;</div><div class="line">				myId : '@',</div><div class="line">				myFn : '&amp;',</div><div class="line">				myCon : '='</div><div class="line">			&#125;,</div><div class="line">			// replace : true,</div><div class="line">			templateUrl : 'tab2.html',</div><div class="line">			link: function (scope, iElement, iAttrs) &#123;</div><div class="line">				console.log(scope);</div><div class="line">			&#125;</div><div class="line">		&#125;;</div><div class="line">	&#125;])</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"div1"</span> <span class="attr">ng-controller</span>=<span class="string">"Aa"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">hello</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">hello</span>&gt;</span><span class="tag">&lt;/<span class="name">hello</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"hello"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">	<span class="comment">&lt;!-- directive:hello --&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="actionscript"></span></div><div class="line"><span class="keyword">var</span> m1 = angular.module(<span class="string">'myApp'</span>,[]);</div><div class="line">m1.directive(<span class="string">'hello'</span>, [<span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</div><div class="line">	<span class="keyword">return</span> &#123;</div><div class="line">		restrict: <span class="string">'AECM'</span>,</div><div class="line">		template:<span class="string">'&lt;div&gt;hello angular&lt;/div&gt;'</span>,</div><div class="line">		replace : <span class="literal">true</span>,	</div><div class="line">		link: <span class="function"><span class="keyword">function</span> <span class="params">(scope, iElement, iAttrs)</span> </span>&#123;</div><div class="line">			</div><div class="line">		&#125;</div><div class="line">	&#125;;</div><div class="line">&#125;])</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<h6 id="选项卡指令"><a href="#选项卡指令" class="headerlink" title="选项卡指令"></a>选项卡指令</h6><ol>
<li>主页</li>
</ol>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"angular.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">ng-app</span>=<span class="string">"myApp"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">ng-controller</span>=<span class="string">"t1"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">tab</span>  <span class="attr">my-fn</span>=<span class="string">"show(str)"</span>  <span class="attr">my-id</span>=<span class="string">"tab1"</span> <span class="attr">my-con</span>=<span class="string">"con"</span>&gt;</span><span class="tag">&lt;/<span class="name">tab</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">tab</span>  <span class="attr">my-fn</span>=<span class="string">"show(str)"</span> <span class="attr">my-id</span>=<span class="string">"tab2"</span> <span class="attr">my-con</span>=<span class="string">"con"</span>&gt;</span><span class="tag">&lt;/<span class="name">tab</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">		<span class="keyword">var</span> myApp = angular.module(<span class="string">'myApp'</span>,[]);</div><div class="line">		myApp.controller(<span class="string">'t1'</span>, [<span class="string">'$scope'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">$scope</span>) </span>&#123;</div><div class="line">			$scope.con = <span class="string">"指令下的con"</span></div><div class="line">			$scope.show = <span class="function"><span class="keyword">function</span>(<span class="params">str</span>)</span>&#123;</div><div class="line">				alert(str);</div><div class="line">			&#125;</div><div class="line">		&#125;])</div><div class="line">		.directive(<span class="string">'tab'</span>, [<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">			<span class="keyword">return</span> &#123;</div><div class="line">				<span class="attr">restrict</span>: <span class="string">'E'</span>,</div><div class="line">				<span class="attr">scope</span> : &#123;</div><div class="line">					<span class="attr">myId</span> : <span class="string">'@'</span>,</div><div class="line">					<span class="attr">myFn</span> : <span class="string">'&amp;'</span>,</div><div class="line">					<span class="attr">myCon</span> : <span class="string">'='</span></div><div class="line">				&#125;,</div><div class="line">				<span class="comment">// replace : true,</span></div><div class="line">				templateUrl : <span class="string">'tab2.html'</span>,</div><div class="line">				<span class="attr">link</span>: <span class="function"><span class="keyword">function</span> (<span class="params">scope, iElement, iAttrs</span>) </span>&#123;</div><div class="line">					<span class="built_in">console</span>.log(scope);</div><div class="line">				&#125;</div><div class="line">			&#125;;</div><div class="line">		&#125;])</div><div class="line">	<span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<ol>
<li>templateUrl页<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></div><div class="line"><span class="selector-tag">ul</span>&#123;</div><div class="line">	<span class="attribute">list-style</span>:none;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.tab-h-b</span>&#123;</div><div class="line">	<span class="attribute">float</span>: left;</div><div class="line">	<span class="attribute">width</span>: <span class="number">150px</span>;</div><div class="line">	<span class="attribute">height</span>: <span class="number">32px</span>;</div><div class="line">	<span class="attribute">line-height</span>: <span class="number">32px</span>;</div><div class="line">	<span class="attribute">text-align</span>: center;</div><div class="line">	<span class="attribute">border</span>:<span class="number">1px</span> solid <span class="number">#ccc</span>;</div><div class="line">	<span class="attribute">margin-right</span>: -<span class="number">1px</span>;</div><div class="line">	<span class="attribute">cursor</span>: pointer;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.tab-h</span> <span class="selector-class">.active</span>&#123;</div><div class="line">	<span class="attribute">background</span>: <span class="number">#333</span>;</div><div class="line">	<span class="attribute">color</span>: <span class="number">#fff</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.tab-b</span>&#123;</div><div class="line">	<span class="attribute">clear</span>: both;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.tab-b</span> <span class="selector-class">.active</span>&#123;</div><div class="line">	<span class="attribute">display</span>: block;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.tab-b-b</span>&#123;</div><div class="line">	<span class="attribute">width</span>: <span class="number">450px</span>;</div><div class="line">	<span class="attribute">background</span>: <span class="number">#ccc</span>;</div><div class="line">	<span class="attribute">height</span>: <span class="number">500px</span>;</div><div class="line">	<span class="attribute">text-align</span>: center;</div><div class="line">	<span class="attribute">font-size</span>: <span class="number">60px</span>;</div><div class="line">	<span class="attribute">line-height</span>: <span class="number">500px</span>;</div><div class="line">	<span class="attribute">display</span>: none;</div><div class="line">&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"tab"</span> <span class="attr">id</span>=<span class="string">"&#123;&#123;myId&#125;&#125;"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"tab-h"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"tab-h-b active"</span> <span class="attr">ng-click</span>=<span class="string">"myFn(&#123;str:123&#125;)"</span> &gt;</span>t1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"tab-h-b"</span>&gt;</span>t2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"tab-h-b"</span>&gt;</span>t3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"tab-b"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"tab-b-b active"</span>&gt;</span>&#123;&#123;myCon&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"tab-b-b"</span>&gt;</span>b2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"tab-b-b"</span>&gt;</span>b3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
</ol>
<h4 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h4><h5 id="tab"><a href="#tab" class="headerlink" title="tab"></a>tab</h5><h5 id="dragg-拖拽"><a href="#dragg-拖拽" class="headerlink" title="dragg 拖拽"></a>dragg 拖拽</h5><h6 id="PC"><a href="#PC" class="headerlink" title="PC"></a>PC</h6><ol>
<li><code>mousedown</code> 时</li>
</ol>
<ul>
<li><code>ev.pageX</code>,<code>ev.pageY</code>记录鼠标相对于document边缘的位置</li>
<li><code>ele.offset().left</code> ，<code>ele.offset().top</code> 记录当前元素距离document左侧和顶部的距离</li>
</ul>
<h6 id="mobile"><a href="#mobile" class="headerlink" title="mobile"></a>mobile</h6><ol>
<li>针对单指操作的 <code>ontouchstart</code> <code>ontouchmove</code> <code>ontouchend</code></li>
<li>手指操作的集合 <code>ev.changedTouches</code>,它是一个类数组的对象，有几个手指在操作,length就有几个</li>
<li><code>ev.pageX</code> 记录手指距离整个页面的顶部位置</li>
<li><code>offsetLeft</code> 读取元素距离页面左边的距离</li>
<li>通过判断元素的<code>offsetLeft</code>加上当前元素的一半宽度<code>ele.offsetWidth/2</code>来确定元素靠左还是右</li>
</ol>
<figure class="highlight xml"><figcaption><span>html</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"angular.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"jquery-1.11.1.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></div><div class="line">  <span class="selector-id">#box</span>&#123;</div><div class="line">    <span class="attribute">width</span>: <span class="number">200px</span>;</div><div class="line">    <span class="attribute">height</span>: <span class="number">200px</span>;</div><div class="line">    <span class="attribute">border-radius</span>: <span class="number">100px</span>;</div><div class="line">    <span class="attribute">background</span>: red;</div><div class="line">    <span class="attribute">position</span>: fixed;</div><div class="line">    <span class="attribute">left </span>:<span class="number">0</span>;</div><div class="line">    <span class="attribute">top</span>:<span class="number">0</span>;</div><div class="line">  &#125;</div><div class="line">  <span class="selector-tag">body</span>&#123;</div><div class="line">    <span class="attribute">height</span>: <span class="number">800px</span>;</div><div class="line">    <span class="attribute">background</span>: <span class="number">#ccc</span>;</div><div class="line">  &#125;</div><div class="line">  <span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">ng-app</span>=<span class="string">"myApp"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">ng-controller</span>=<span class="string">"Aa"</span> <span class="attr">ng-app</span>=<span class="string">"myApp"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"box"</span> <span class="attr">my-drag</span> <span class="attr">sticky</span>=<span class="string">'true'</span> &gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line"><span class="keyword">var</span> myApp = angular.module(<span class="string">'myApp'</span>,[]);</div><div class="line">myApp.controller(<span class="string">'Aa'</span>, [<span class="string">'$scope'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">$scope</span>)</span>&#123;</div><div class="line"></div><div class="line">&#125;])</div><div class="line">.directive(<span class="string">'myDrag'</span>, [<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> &#123;</div><div class="line">    <span class="attr">restrict</span>: <span class="string">'A'</span>,</div><div class="line">    <span class="attr">scope</span> : &#123;</div><div class="line">      <span class="attr">sticky</span> : <span class="string">'@'</span>, <span class="comment">//是否自动贴近边缘</span></div><div class="line">    &#125;,</div><div class="line">    <span class="attr">link</span>: <span class="function"><span class="keyword">function</span> (<span class="params">scope, iElement, iAttrs,ctrl</span>) </span>&#123;</div><div class="line">      <span class="comment">//获取屏幕宽度</span></div><div class="line">      <span class="keyword">var</span> winWidth = <span class="built_in">document</span>.documentElement.offsetWidth;</div><div class="line"></div><div class="line">      <span class="comment">//用于保存初始的距离值</span></div><div class="line">      <span class="keyword">var</span> dirX = <span class="number">0</span>; </div><div class="line">      <span class="keyword">var</span> dirY = <span class="number">0</span>;</div><div class="line"></div><div class="line">      <span class="comment">//按下时触发事件</span></div><div class="line">      iElement[<span class="number">0</span>].ontouchstart = <span class="function"><span class="keyword">function</span>(<span class="params">ev</span>)</span>&#123;</div><div class="line">        <span class="keyword">var</span> ev = ev.changedTouches[<span class="number">0</span>];</div><div class="line">        dirX = ev.pageX - <span class="keyword">this</span>.offsetLeft;</div><div class="line">        dirY = ev.pageY - <span class="keyword">this</span>.offsetTop;</div><div class="line">        <span class="keyword">this</span>.style.transition = <span class="number">0</span>;</div><div class="line"></div><div class="line">        <span class="comment">//阻止系统默认行为</span></div><div class="line">        <span class="built_in">document</span>.ontouchmove = <span class="function"><span class="keyword">function</span>(<span class="params">ev</span>)</span>&#123;</div><div class="line">          ev.preventDefault();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">//移动时改变位置</span></div><div class="line">        iElement[<span class="number">0</span>].ontouchmove = <span class="function"><span class="keyword">function</span>(<span class="params">ev</span>)</span>&#123;</div><div class="line">          <span class="keyword">var</span> ev = ev.changedTouches[<span class="number">0</span>];</div><div class="line">          <span class="keyword">this</span>.style.left = ev.pageX - dirX + <span class="string">'px'</span>;</div><div class="line">          <span class="keyword">this</span>.style.top = ev.pageY - dirY + <span class="string">'px'</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="comment">//手指抬起时解决事件</span></div><div class="line">        iElement[<span class="number">0</span>].ontouchend = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">          <span class="keyword">if</span>(scope.sticky == <span class="string">'true'</span>)&#123;</div><div class="line">            <span class="keyword">this</span>.style.transition = <span class="string">'0.5s'</span>;</div><div class="line">            <span class="keyword">if</span>(<span class="keyword">this</span>.offsetLeft &lt;= (winWidth/<span class="number">2</span>-<span class="keyword">this</span>.offsetWidth/<span class="number">2</span>) )&#123;</div><div class="line">                 <span class="keyword">this</span>.style.left = <span class="number">0</span>;</div><div class="line">            &#125;<span class="keyword">else</span>&#123;</div><div class="line">                <span class="keyword">this</span>.style.left = winWidth - <span class="keyword">this</span>.offsetWidth + <span class="string">'px'</span>;</div><div class="line">            &#125;</div><div class="line">          &#125;</div><div class="line"></div><div class="line">          <span class="comment">//解决事件绑定</span></div><div class="line">          iElement[<span class="number">0</span>].ontouchmove = <span class="literal">null</span>;</div><div class="line">          iElement[<span class="number">0</span>].ontouchend = <span class="literal">null</span>;</div><div class="line">          <span class="built_in">document</span>.ontouchmove = <span class="literal">null</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;;</div><div class="line">&#125;])</div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="servier服务"><a href="#servier服务" class="headerlink" title="servier服务"></a><code>servier</code>服务</h3><p>定义好的方法</p>
<h4 id="http"><a href="#http" class="headerlink" title="$http"></a><code>$http</code></h4><h4 id="location"><a href="#location" class="headerlink" title="$location"></a><code>$location</code></h4><p>对原生的location的网址信息进行了二次封装</p>
<h5 id="absUrl-网址信息的绝对地址"><a href="#absUrl-网址信息的绝对地址" class="headerlink" title="absUrl() 网址信息的绝对地址"></a>absUrl() 网址信息的绝对地址</h5><h5 id="path-跟路由挂钩的路径信息，可以实现前进后退"><a href="#path-跟路由挂钩的路径信息，可以实现前进后退" class="headerlink" title="path() 跟路由挂钩的路径信息，可以实现前进后退"></a>path() 跟路由挂钩的路径信息，可以实现前进后退</h5><h5 id="replace-以替换路径的方式实现页面跳转，使路由的前进后退失效"><a href="#replace-以替换路径的方式实现页面跳转，使路由的前进后退失效" class="headerlink" title="replace() 以替换路径的方式实现页面跳转，使路由的前进后退失效"></a>replace() 以替换路径的方式实现页面跳转，使路由的前进后退失效</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line">	$localtion.path(<span class="string">'/aa/bb'</span>).replace();</div><div class="line"><span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></div></pre></td></tr></table></figure>
<h5 id="hash-设置hash值"><a href="#hash-设置hash值" class="headerlink" title="hash() 设置hash值"></a>hash() 设置hash值</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line">$location.hash(<span class="string">'hello'</span>);</div><div class="line"><span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></div></pre></td></tr></table></figure>
<h5 id="search-设置搜索内容"><a href="#search-设置搜索内容" class="headerlink" title="search() 设置搜索内容"></a>search() 设置搜索内容</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line">$location.search(&#123;<span class="string">'age'</span> : <span class="string">'20'</span>&#125;);</div><div class="line"><span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></div></pre></td></tr></table></figure>
<h5 id="url-获取页面路径"><a href="#url-获取页面路径" class="headerlink" title="url() 获取页面路径"></a>url() 获取页面路径</h5><h5 id="host-获取主机名"><a href="#host-获取主机名" class="headerlink" title="host() 获取主机名"></a>host() 获取主机名</h5><h5 id="post-获取端口号"><a href="#post-获取端口号" class="headerlink" title="post() 获取端口号"></a>post() 获取端口号</h5><h5 id="protocol-获取协议"><a href="#protocol-获取协议" class="headerlink" title="protocol() 获取协议"></a>protocol() 获取协议</h5><h4 id="anchorScroll-锚点跳转功能"><a href="#anchorScroll-锚点跳转功能" class="headerlink" title="$anchorScroll 锚点跳转功能"></a><code>$anchorScroll</code> 锚点跳转功能</h4><ol>
<li>为每个主要内容添加id标识(ng-attr-id)</li>
<li>生成对应的点击元素，并一一对应到主要内容</li>
<li>注入<code>$anchorScroll</code>服务 </li>
<li>当导航元素被点击时，利用<code>$location.hash()</code>实现跳转</li>
<li>同时为了避免当页面跳转特定的位置（#c），然后滚屏，再点击相同的导航失效时，可以每次点击都默认带上<code>$anchorScroll()</code>;</li>
</ol>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></div><div class="line">	<span class="selector-tag">li</span>&#123;</div><div class="line">		<span class="attribute">list-style</span>: none;</div><div class="line">		<span class="attribute">text-align</span>: center;</div><div class="line">	&#125;</div><div class="line">	<span class="selector-class">.parent</span> <span class="selector-tag">li</span>&#123;</div><div class="line">		<span class="attribute">height</span>: <span class="number">300px</span>;</div><div class="line">		<span class="attribute">border</span>:<span class="number">1px</span> solid <span class="number">#ccc</span>;</div><div class="line">		<span class="attribute">margin-top</span>: <span class="number">30px</span>;</div><div class="line">		<span class="attribute">font-size</span>: <span class="number">90px</span>;</div><div class="line">		<span class="attribute">line-height</span>: <span class="number">300px</span>;</div><div class="line">	&#125;</div><div class="line">	<span class="selector-class">.nav</span>&#123;</div><div class="line">		<span class="attribute">position</span>: fixed;</div><div class="line">		<span class="attribute">right</span>:<span class="number">10px</span>;</div><div class="line">		<span class="attribute">top</span>:<span class="number">10px</span>;</div><div class="line">	&#125;</div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">ng-controller</span>=<span class="string">"Aa"</span> <span class="attr">ng-app</span>=<span class="string">"myApp"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"parent"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">ul</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">li</span> <span class="attr">ng-repeat</span>=<span class="string">"id in [1,2,3,4,5]"</span> <span class="attr">ng-attr-id</span>=<span class="string">"div&#123;&#123;id&#125;&#125;"</span>&gt;</span>id&#123;&#123;id&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"nav"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">li</span> <span class="attr">ng-repeat</span>=<span class="string">"id in [1,2,3,4,5]"</span> <span class="attr">ng-click</span>=<span class="string">"scrollTo('div'+id)"</span>&gt;</span>&#123;&#123;id&#125;&#125;link<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="actionscript"></span></div><div class="line"><span class="keyword">var</span> myApp = angular.module(<span class="string">'myApp'</span>,[]);</div><div class="line">myApp.controller(<span class="string">'Aa'</span>, [<span class="string">'$scope'</span>,<span class="string">'$location'</span>,<span class="string">'$anchorScroll'</span>,<span class="function"><span class="keyword">function</span><span class="params">($scope,$location,$anchorScroll)</span></span>&#123;</div><div class="line">	$scope.scrollTo = <span class="function"><span class="keyword">function</span><span class="params">(url)</span></span>&#123;</div><div class="line">		$location.hash(url);</div><div class="line">		$anchorScroll();</div><div class="line">	&#125;</div><div class="line">&#125;]);</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<h4 id="cacheFactory-缓存操作方式"><a href="#cacheFactory-缓存操作方式" class="headerlink" title="$cacheFactory 缓存操作方式"></a><code>$cacheFactory</code> 缓存操作方式</h4><p>要注意的是这个应用程序缓存，而不是浏览器本地的缓存，当页面刷新或者初始化时数据会丢失</p>
<h5 id="info-打印缓存信息"><a href="#info-打印缓存信息" class="headerlink" title="info() 打印缓存信息"></a><code>info()</code> 打印缓存信息</h5><h5 id="put-设置信息"><a href="#put-设置信息" class="headerlink" title="put() 设置信息"></a><code>put()</code> 设置信息</h5><h5 id="get-获取信息"><a href="#get-获取信息" class="headerlink" title="get() 获取信息"></a><code>get()</code> 获取信息</h5><h5 id="remove-删除信息"><a href="#remove-删除信息" class="headerlink" title="remove() 删除信息"></a><code>remove()</code> 删除信息</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line"><span class="keyword">var</span> myApp = angular.module(<span class="string">'myApp'</span>,[]);</div><div class="line">myApp.controller(<span class="string">'Aa'</span>, [<span class="string">'$scope'</span>,<span class="string">'$cacheFactory'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">$scope,$cacheFactory</span>)</span>&#123;</div><div class="line">	<span class="keyword">var</span> cache = $cacheFactory(<span class="string">'myCache'</span>);</div><div class="line">	<span class="comment">// 使用put方法设置</span></div><div class="line">	cache.put(<span class="string">'name'</span>,<span class="string">'weison'</span>);</div><div class="line">	cache.put(<span class="string">'job'</span>,<span class="string">'dev'</span>);</div><div class="line">	<span class="built_in">console</span>.log(cache.info());</div><div class="line"></div><div class="line">	<span class="comment">// 使用get方法设置</span></div><div class="line">	<span class="built_in">console</span>.log(cache.get(<span class="string">'name'</span>));</div><div class="line"></div><div class="line">	<span class="comment">//利用remove删除属性</span></div><div class="line">	cache.remove(<span class="string">'name'</span>);</div><div class="line"></div><div class="line">	<span class="comment">// 使用get方法设置</span></div><div class="line">	<span class="built_in">console</span>.log(cache.get(<span class="string">'name'</span>));</div><div class="line">&#125;]);</div><div class="line"><span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></div></pre></td></tr></table></figure>
<h4 id="interpolate-插值服务"><a href="#interpolate-插值服务" class="headerlink" title="$interpolate 插值服务"></a><code>$interpolate</code> 插值服务</h4><h4 id="q-对异步操作进行了扩展"><a href="#q-对异步操作进行了扩展" class="headerlink" title="$q 对异步操作进行了扩展"></a><code>$q</code> 对异步操作进行了扩展</h4><p>是一种promise的实现方式，类似于jquery的def延迟对象</p>
<ul>
<li>defer() 定义一个延迟对象</li>
<li>resolve() 成功时触发</li>
<li>reject() 失败时触发</li>
<li>notify() 实时的通知处理</li>
<li>then() 监听成功失败的回调处理</li>
</ul>
<ol>
<li>先定义一个延时对象<code>var dfd = $q.defer();</code></li>
<li>然后当执行函数时假如成功就定义成<code>dfd.reject()</code>，失败就<code>dfd.resolve()</code></li>
<li>函数执行完返回一个promise对象<code>return dfd.promise</code></li>
<li>利用<code>then</code>方法进行处理<br>执行函数名.then(function(){成功时的处理},function(){失败时的处理});</li>
</ol>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">ng-controller</span>=<span class="string">"c1"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="actionscript"></span></div><div class="line"><span class="keyword">var</span> m1 = angular.module(<span class="string">'myApp'</span>,[]);</div><div class="line">m1.controller(<span class="string">'c1'</span>, [<span class="string">'$scope'</span>,<span class="string">'$q'</span>, <span class="function"><span class="keyword">function</span> <span class="params">($scope,$q)</span> </span>&#123;</div><div class="line">	<span class="comment">//定义一下延时对象</span></div><div class="line">	<span class="keyword">var</span> dfd = $q.defer();</div><div class="line">	<span class="function"><span class="keyword">function</span> <span class="title">test</span><span class="params">()</span></span>&#123;</div><div class="line">		setTimeout(<span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</div><div class="line">			dfd.reject(); <span class="comment">//代表执行成功</span></div><div class="line">		&#125;,<span class="number">1000</span>);</div><div class="line">		<span class="keyword">return</span> dfd.promise;</div><div class="line">	&#125;</div><div class="line">	test().then(<span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</div><div class="line">		<span class="comment">//当def时resolve时触发</span></div><div class="line">		alert(<span class="string">'成功'</span>);</div><div class="line">	&#125;,<span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</div><div class="line">		<span class="comment">//当def时reject时触发</span></div><div class="line">		alert(<span class="string">'失败'</span>);</div><div class="line">	&#125;);</div><div class="line">&#125;]);</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<h4 id="provider供应商"><a href="#provider供应商" class="headerlink" title="provider供应商"></a><code>provider</code>供应商</h4><ol>
<li>服务本来就是任意对象</li>
<li>angular是通过<code>$provider</code>来实现依赖注入的，注入机制是通过调用一个<code>provider</code>的<code>get()</code>方法，把得到的对象作为相关参数进行调用</li>
</ol>
<p>服务的相关初始配置操作<br>要写到模块下的<code>config</code>当中<br>基本上大部分的服务都有供应商,在服务后加上<code>Provider</code>即可变成供应商</p>
<ul>
<li>startSymbol()表达式开始标记</li>
<li>endSymbol()表达式结束标记<br>其它供应商查看官方API</li>
</ul>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">ng-controller</span>=<span class="string">"Aa"</span> <span class="attr">ng-app</span>=<span class="string">"myApp"</span>&gt;</span></div><div class="line">@@name@@</div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="actionscript"></span></div><div class="line"><span class="keyword">var</span> myApp = angular.module(<span class="string">'myApp'</span>,[]);</div><div class="line">myApp.config([<span class="string">'$interpolateProvider'</span>,<span class="function"><span class="keyword">function</span><span class="params">($interpolateProvider)</span> </span>&#123;</div><div class="line">	$interpolateProvider.startSymbol(<span class="string">"@@"</span>);</div><div class="line">	$interpolateProvider.endSymbol(<span class="string">"@@"</span>);</div><div class="line">&#125;]);</div><div class="line">myApp.controller(<span class="string">'Aa'</span>, [<span class="string">'$scope'</span>,<span class="function"><span class="keyword">function</span><span class="params">($scope)</span></span>&#123;</div><div class="line">	$scope.name = <span class="string">"testConfig"</span>;</div><div class="line">&#125;]);</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<h4 id="自定义服务"><a href="#自定义服务" class="headerlink" title="自定义服务"></a>自定义服务</h4><h5 id="factory"><a href="#factory" class="headerlink" title="factory()"></a><code>factory()</code></h5><p>它返回的数据类型可以是任意的<br>参数：</p>
<pre><code>1. 服务名字
    - 不要使用`$`开头，因为`$`开头一般用于内部服务
    - 先写内部服务，再写自定义的服务
1. 回调，可以是一个函数，如果需要引入其它服务，最好是写成一个数组的形式
</code></pre><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">模块名.factory(<span class="string">'服务名称'</span>,[<span class="string">'依赖的服务1'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">依赖的服务<span class="number">1</span></span>)</span>&#123;</div><div class="line">	<span class="keyword">return</span> &#123;</div><div class="line">		返回的内容</div><div class="line">	&#125;</div><div class="line">&#125;]);</div></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">ng-controller</span>=<span class="string">"c1"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line"><span class="keyword">var</span> myApp = angular.module(<span class="string">'myApp'</span>,[]);</div><div class="line">myApp.factory(<span class="string">'myRamdonNumber'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	<span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">n1,n2</span>)</span>&#123;</div><div class="line">		<span class="keyword">return</span> <span class="built_in">Math</span>.random()*(n2-n1)+n1;</div><div class="line">	&#125;</div><div class="line">&#125;);</div><div class="line">myApp.factory(<span class="string">'mySever'</span>, [<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">	<span class="keyword">return</span> &#123;</div><div class="line">		<span class="attr">name</span> : <span class="string">'hello'</span>,</div><div class="line">		<span class="attr">show</span> : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">			alert(<span class="keyword">this</span>.name + <span class="string">' angular'</span>);</div><div class="line">		&#125;</div><div class="line">	&#125;;</div><div class="line">&#125;])</div><div class="line">myApp.controller(<span class="string">'c1'</span>, [<span class="string">'$scope'</span>,<span class="string">'myRamdonNumber'</span>,<span class="string">'mySever'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">$scope,myRamdonNumber,mySever</span>) </span>&#123;</div><div class="line">	<span class="built_in">console</span>.log(myRamdonNumber(<span class="number">3</span>,<span class="number">9</span>));</div><div class="line">	mySever.show()</div><div class="line">&#125;]);</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<h5 id="provider-service-自定义服务"><a href="#provider-service-自定义服务" class="headerlink" title="$provider.service 自定义服务"></a><code>$provider.service</code> 自定义服务</h5><p>返回的必须是引用类型的对象<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">ng-controller</span>=<span class="string">"c1"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line"><span class="keyword">var</span> myApp = angular.module(<span class="string">'myApp'</span>,[],<span class="function"><span class="keyword">function</span>(<span class="params">$provide</span>)</span>&#123;</div><div class="line">	<span class="comment">//作为模块初始化后的函数调用</span></div><div class="line">	$provide.service(<span class="string">'job'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">		<span class="keyword">return</span> &#123;</div><div class="line">			<span class="attr">job</span> : <span class="string">'fontEnd developer'</span></div><div class="line">		&#125;</div><div class="line">	&#125;);</div><div class="line">&#125;);</div><div class="line">myApp.factory(<span class="string">'testFactory'</span>, [<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">	<span class="comment">//自定义工厂 可以是任意内容</span></div><div class="line">	<span class="keyword">return</span> <span class="string">'testFactory'</span>;</div><div class="line">&#125;])</div><div class="line">myApp.service(<span class="string">'testService'</span>, [<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">	<span class="comment">//自定义服务  返回的必须是引用类型的，不能为基本类型的</span></div><div class="line">	<span class="keyword">return</span> &#123;</div><div class="line">		<span class="attr">sex</span> : <span class="string">'male'</span></div><div class="line">	&#125;</div><div class="line">&#125;])</div><div class="line">myApp.provider(<span class="string">'Myservice'</span>, [<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">	<span class="keyword">this</span>.$get = [<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">		<span class="keyword">return</span> &#123;</div><div class="line">				<span class="attr">name</span> :<span class="string">'weison'</span></div><div class="line">		&#125;;</div><div class="line">	&#125;];</div><div class="line">&#125;])</div><div class="line">myApp.controller(<span class="string">'c1'</span>, [<span class="string">'$scope'</span>,<span class="string">'testFactory'</span>,<span class="string">'job'</span>,<span class="string">'testService'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">$scope,testFactory,job,testService</span>) </span>&#123;</div><div class="line">	<span class="built_in">console</span>.log(<span class="string">'testFactory'</span>,testFactory);</div><div class="line">	<span class="built_in">console</span>.log(<span class="string">'job'</span>,job);</div><div class="line">	<span class="built_in">console</span>.log(<span class="string">'testService'</span>,testService);</div><div class="line">&#125;])</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h5 id="provider"><a href="#provider" class="headerlink" title="provider()"></a><code>provider()</code></h5><ul>
<li><code>factory</code>不支持利用cofig进行服务配置，而<code>provider</code>支持</li>
</ul>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">ng-controller</span>=<span class="string">"c1"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="actionscript"></span></div><div class="line"><span class="keyword">var</span> m1 = angular.module(<span class="string">'myApp'</span>,[]);</div><div class="line">m1.provider(<span class="string">'showHi'</span>, [<span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</div><div class="line">	<span class="keyword">return</span> &#123;</div><div class="line">		name : <span class="string">'wesion'</span>,</div><div class="line">		$<span class="keyword">get</span> : <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> &#123;</div><div class="line">			name : <span class="keyword">this</span>.name,</div><div class="line">			sayhi : <span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</div><div class="line">				alert(<span class="keyword">this</span>.name + <span class="string">' say hi'</span>);</div><div class="line">			&#125;</div><div class="line">		&#125;;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;]);</div><div class="line"><span class="comment">//利用config来重新配置服务</span></div><div class="line">m1.config([<span class="string">'showHiProvider'</span>,<span class="function"><span class="keyword">function</span><span class="params">(showHiProvider)</span></span>&#123;</div><div class="line">	showHiProvider.name = <span class="string">'newPerson'</span>;</div><div class="line">&#125;]);</div><div class="line">m1.controller(<span class="string">'c1'</span>, [<span class="string">'$scope'</span>,<span class="string">'showHi'</span>, <span class="function"><span class="keyword">function</span> <span class="params">($scope,showHi)</span> </span>&#123;</div><div class="line">	showHi.sayhi();</div><div class="line">&#125;])</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<h5 id="多个控制器之间数据共享"><a href="#多个控制器之间数据共享" class="headerlink" title="多个控制器之间数据共享"></a>多个控制器之间数据共享</h5><p>通过供应商的service服务，将内容注入到控制器当中<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">ng-controller</span>=<span class="string">"c1"</span> <span class="attr">title</span>=<span class="string">"控制器 c1"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">h1</span>&gt;</span>控制器 c1<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">ng-model</span>=<span class="string">"data.name"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">p</span> <span class="attr">ng-bind</span>=<span class="string">"data.name"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">ng-controller</span>=<span class="string">"c2"</span> <span class="attr">title</span>=<span class="string">"控制器 c2"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">h1</span>&gt;</span>控制器 c2<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">ng-model</span>=<span class="string">"data.name"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">p</span> <span class="attr">ng-bind</span>=<span class="string">"data.name"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="actionscript"></span></div><div class="line"><span class="keyword">var</span> m1 = angular.module(<span class="string">'myApp'</span>,[]);</div><div class="line"><span class="comment">// 通过service来创建公共的数据，要注意返回的内容要是对象</span></div><div class="line">m1.service(<span class="string">'myData'</span>, [<span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> &#123;</div><div class="line">			name : <span class="string">'weison'</span></div><div class="line">		&#125;</div><div class="line">&#125;])</div><div class="line">m1.controller(<span class="string">'c1'</span>, [<span class="string">'$scope'</span>,<span class="string">'myData'</span>,<span class="function"><span class="keyword">function</span> <span class="params">($scope,myData)</span> </span>&#123;</div><div class="line">	 <span class="comment">//注入服务后进行数据绑定</span></div><div class="line">		$scope.data = myData;</div><div class="line">&#125;]);</div><div class="line">m1.controller(<span class="string">'c2'</span>, [<span class="string">'$scope'</span>,<span class="string">'myData'</span>,<span class="function"><span class="keyword">function</span> <span class="params">($scope,myData)</span> </span>&#123;</div><div class="line">	 <span class="comment">//注入服务后进行数据绑定</span></div><div class="line">		$scope.data = myData;</div><div class="line">&#125;]);</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h6 id="模块之间的通信"><a href="#模块之间的通信" class="headerlink" title="模块之间的通信"></a>模块之间的通信</h6><p>把模块名称写在模块声明后的依赖模块名字即可。跟引入插件的方式一样<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">ng-controller</span>=<span class="string">"c1"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="actionscript"></span></div><div class="line"><span class="comment">//把module2模块引入的myApp中实现模块之间的通信，这样myApp就可以调用m2下的服务</span></div><div class="line"><span class="keyword">var</span> myApp = angular.module(<span class="string">'myApp'</span>,[<span class="string">'module2'</span>]);</div><div class="line"><span class="keyword">var</span> m2 = angular.module(<span class="string">'module2'</span>,[]);</div><div class="line">m2.provider(<span class="string">'mySever'</span>, [<span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</div><div class="line">	<span class="keyword">return</span> &#123;</div><div class="line">		$<span class="keyword">get</span> : <span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</div><div class="line">			<span class="keyword">return</span> &#123;</div><div class="line">				name : <span class="string">'hello'</span>,</div><div class="line">				show : <span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</div><div class="line">					<span class="keyword">return</span> <span class="keyword">this</span>.name + <span class="string">' angular'</span>;</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;])</div><div class="line">myApp.controller(<span class="string">'c1'</span>, [<span class="string">'$scope'</span>,<span class="string">'mySever'</span>, <span class="function"><span class="keyword">function</span> <span class="params">($scope,mySever)</span> </span>&#123;</div><div class="line">	console.log(mySever.show());</div><div class="line">&#125;])</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure></p>
<ul>
<li>服务是共享的，但是在不同模块之间进行通信可以利用config来对<code>provider</code>声明的服务进行配置</li>
</ul>
<h5 id="service-针对面向对象的一种方式，支持构造函数"><a href="#service-针对面向对象的一种方式，支持构造函数" class="headerlink" title="service()  针对面向对象的一种方式，支持构造函数"></a><code>service()</code>  针对面向对象的一种方式，支持构造函数</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">ng-controller</span>=<span class="string">"c1"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line"><span class="keyword">var</span> myApp = angular.module(<span class="string">'myApp'</span>,[]);</div><div class="line">myApp.service(<span class="string">'mySever2'</span>,serviceFn);</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">serviceFn</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	<span class="keyword">this</span>.name = <span class="string">'service'</span>;</div><div class="line">&#125;</div><div class="line">serviceFn.prototype.show = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	alert(<span class="keyword">this</span>.name);</div><div class="line">&#125;</div><div class="line">myApp.controller(<span class="string">'c1'</span>, [<span class="string">'$scope'</span>,<span class="string">'mySever2'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">$scope,mySever2</span>) </span>&#123;</div><div class="line">	<span class="built_in">console</span>.log(mySever2.name);</div><div class="line">	mySever2.show();</div><div class="line">&#125;])</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<h5 id="constant-value-设置常量"><a href="#constant-value-设置常量" class="headerlink" title="constant() value()设置常量"></a><code>constant()</code> <code>value()</code>设置常量</h5><p>区别在于<code>constant()</code>可以利用config进行配置获取,而<code>config()</code>不可以</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">ng-controller</span>=<span class="string">"c1"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line"><span class="keyword">var</span> m1 = angular.module(<span class="string">'myApp'</span>,[]);</div><div class="line">m1.constant(<span class="string">'myName'</span>, <span class="string">'weison'</span>);</div><div class="line">m1.value(<span class="string">'myJob'</span>, [<span class="string">'fe'</span>,<span class="string">'designer'</span>]);</div><div class="line"><span class="comment">//注意constant来获取配置项是不用加provider</span></div><div class="line">m1.config([<span class="string">'myName'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">myName</span>)</span>&#123;</div><div class="line">	<span class="built_in">console</span>.log(myName);</div><div class="line">&#125;]);</div><div class="line">m1.controller(<span class="string">'c1'</span>, [<span class="string">'$scope'</span>,<span class="string">'myName'</span>,<span class="string">'myJob'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">$scope,myName,myJob</span>) </span>&#123;</div><div class="line">	<span class="built_in">console</span>.log(myName); <span class="comment">// =&gt; weison</span></div><div class="line">	<span class="built_in">console</span>.log(myJob); <span class="comment">//  =&gt; ['fe','designer']</span></div><div class="line"></div><div class="line">&#125;])</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="事件内部传播"><a href="#事件内部传播" class="headerlink" title="事件内部传播"></a>事件内部传播</h3><p>事件默认的传播传播行为</p>
<h4 id="emit向上传播的机制，类似于冒泡的操作"><a href="#emit向上传播的机制，类似于冒泡的操作" class="headerlink" title="$emit向上传播的机制，类似于冒泡的操作"></a><code>$emit</code>向上传播的机制，类似于冒泡的操作</h4><h4 id="broadcast向下传播，类似于捕获的操作"><a href="#broadcast向下传播，类似于捕获的操作" class="headerlink" title="$broadcast向下传播，类似于捕获的操作"></a><code>$broadcast</code>向下传播，类似于捕获的操作</h4><p>传播是意思是只要用<code>$on</code>绑定过的相同命名的函数都会向上/向下触发<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">ng-controller</span>=<span class="string">"c1"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">p</span> &gt;</span>&#123;&#123;account&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">ng-controller</span>=<span class="string">"c2"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">p</span> <span class="attr">ng-click</span>=<span class="string">"$emit('myEvent')"</span>&gt;</span>&#123;&#123;account&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">ng-controller</span>=<span class="string">"c2"</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">p</span> <span class="attr">ng-click</span>=<span class="string">"account=account+1"</span>&gt;</span>&#123;&#123;account&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line"><span class="keyword">var</span> m1 = angular.module(<span class="string">'myApp'</span>,[]);</div><div class="line">m1.controller(<span class="string">'c2'</span>, [<span class="string">'$scope'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">$scope</span>) </span>&#123;</div><div class="line">	$scope.title = <span class="string">"haha"</span>;</div><div class="line">	$scope.account = <span class="number">1</span>;</div><div class="line">	$scope.$on(<span class="string">'myEvent'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;</div><div class="line">		<span class="built_in">console</span>.log(event);</div><div class="line">		$scope.account ++;</div><div class="line">	&#125;);</div><div class="line">&#125;]);</div><div class="line">m1.controller(<span class="string">'c1'</span>, [<span class="string">'$scope'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">$scope</span>) </span>&#123;</div><div class="line">	$scope.title = <span class="string">"haha"</span>;</div><div class="line">	$scope.$on(<span class="string">'myEvent'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;</div><div class="line">		<span class="built_in">console</span>.log(event);</div><div class="line">		$scope.account = <span class="number">10</span>;</div><div class="line">	&#125;);</div><div class="line">	$scope.account = <span class="number">0</span>;</div><div class="line">&#125;]);</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h4 id="event事件对象"><a href="#event事件对象" class="headerlink" title="event事件对象"></a><code>event</code>事件对象</h4><ol>
<li><code>event.targetScope</code> 发出或者传播原始事件的作用域</li>
<li><code>event.currentScope</code> 目前正在处理的事件的作用域</li>
<li><code>event.name</code> 事件的名字</li>
<li><code>event.stopPropagation()</code> 阻止事件进一步传播 </li>
</ol>
<h3 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h3><h4 id="ngRouter"><a href="#ngRouter" class="headerlink" title="ngRouter"></a><code>ngRouter</code></h4><h4 id="ngAnimate"><a href="#ngAnimate" class="headerlink" title="ngAnimate"></a><code>ngAnimate</code></h4><h4 id="ngResoure"><a href="#ngResoure" class="headerlink" title="ngResoure"></a><code>ngResoure</code></h4><h4 id="uiRouter"><a href="#uiRouter" class="headerlink" title="uiRouter"></a><code>uiRouter</code></h4><p>核心是通过url里面hash来替换<code>ui-view</code>里面的内容</p>
<h5 id="urlRouterProvider"><a href="#urlRouterProvider" class="headerlink" title="$urlRouterProvider"></a><code>$urlRouterProvider</code></h5><p>主要用于url的跳转、重定向或者在访问页面时给它一个默认的url</p>
<h5 id="stateProvider"><a href="#stateProvider" class="headerlink" title="$stateProvider"></a><code>$stateProvider</code></h5><p>用于定义路由规则</p>
<ol>
<li><p>方式1</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$stateProvider.state(<span class="string">'main'</span>,&#123;</div><div class="line"> <span class="attr">url</span> :<span class="string">'/main'</span>,</div><div class="line"> <span class="attr">template</span>:<span class="string">'&lt;div&gt;main&#123;&#123;title&#125;&#125;&lt;/div&gt;'</span>,</div><div class="line"> <span class="attr">controller</span> : <span class="function"><span class="keyword">function</span>(<span class="params">$scope</span>)</span>&#123; $scope.title = <span class="string">'hello'</span>; &#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
</li>
<li><p>方式2</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">$stateProvider.state(</div><div class="line"> &#123;</div><div class="line"> <span class="attr">name</span> : <span class="string">'main'</span>,</div><div class="line"> <span class="attr">url</span> :<span class="string">'/main'</span>,</div><div class="line"> <span class="attr">template</span>:<span class="string">'&lt;div&gt;main&#123;&#123;title&#125;&#125;&lt;/div&gt;'</span>,</div><div class="line"> <span class="attr">controller</span> : <span class="function"><span class="keyword">function</span>(<span class="params">$scope</span>)</span>&#123; $scope.title = <span class="string">'hello'</span>; &#125;</div><div class="line">&#125;</div><div class="line">)</div></pre></td></tr></table></figure>
</li>
</ol>
<h5 id="激活路由的3种方式"><a href="#激活路由的3种方式" class="headerlink" title="激活路由的3种方式"></a>激活路由的3种方式</h5><ol>
<li><p><code>ui-sref=&#39;state的名称&#39;</code></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;a ui-sref=<span class="string">"main"</span> &gt;<span class="xml"><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></div></pre></td></tr></table></figure>
</li>
<li><p>通过url地址</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;a href=<span class="string">"#/main"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></div></pre></td></tr></table></figure>
</li>
<li><p>通过<code>$state.go(state名称)</code></p>
</li>
</ol>
<figure class="highlight pf"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">#### 定义父子级来定义路由</span></div><div class="line">当直接访问父级时不会有子级的内容，当访问子级时，它会插到父级`template`里的`<span class="variable">&lt;ui-view&gt;</span>&lt;/ui-view&gt;`中</div><div class="line"><span class="number">1</span>. 在`<span class="keyword">state</span>`中带上子级名称 </div><div class="line">````javascript</div><div class="line"> <span class="variable">&lt;script&gt;</span></div><div class="line">   <span class="variable">$stateProvider</span>.<span class="keyword">state</span>('main',&#123;</div><div class="line">       url : '/main',</div><div class="line">       template:'<span class="variable">&lt;div&gt;</span>&#123;&#123;title&#125;&#125;<span class="variable">&lt;ui-view&gt;</span>&lt;/ui-view&gt;&lt;/div&gt;',</div><div class="line">       controller : function()&#123;</div><div class="line">       //执行内容</div><div class="line">     &#125;</div><div class="line">   &#125;)</div><div class="line">   .<span class="keyword">state</span>('main.sub',&#123;</div><div class="line">    url : '/sub',</div><div class="line">    template : '<span class="variable">&lt;p&gt;</span>&#123;&#123;title&#125;&#125;&lt;/p&gt;',</div><div class="line">    controller : function()&#123;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">   &#125;)</div><div class="line"> &lt;/script&gt;</div></pre></td></tr></table></figure>
<p>它的访问方式是<code>&lt;a ui-sref=&quot;main.sub&quot;&gt;&lt;/a&gt;</code></p>
<ol>
<li>在属性中添加<code>parent</code><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line">  $stateProvider.state(<span class="string">'main'</span>,&#123;</div><div class="line">      <span class="attr">url</span> : <span class="string">'/main'</span>,</div><div class="line">      <span class="attr">template</span>:<span class="string">'&lt;div&gt;&#123;&#123;title&#125;&#125;&lt;ui-view&gt;&lt;/ui-view&gt;&lt;/div&gt;'</span>,</div><div class="line">      <span class="attr">controller</span> : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">      <span class="comment">//执行内容</span></div><div class="line">    &#125;</div><div class="line">  &#125;)</div><div class="line">  .state(<span class="string">'sub2'</span>,&#123;</div><div class="line">   <span class="attr">url</span> : <span class="string">'/sub2'</span>,</div><div class="line">   <span class="attr">template</span> : <span class="string">'&lt;p&gt;&#123;&#123;title&#125;&#125;&lt;/p&gt;'</span>,</div><div class="line">   <span class="attr">parent</span> : <span class="string">'main'</span>，</div><div class="line">   controller : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line"></div><div class="line">   &#125;</div><div class="line">  &#125;)</div><div class="line">&lt;<span class="regexp">/script&gt;</span></div></pre></td></tr></table></figure>
</li>
</ol>
<p>它的访问方式是<code>&lt;a ui-sref=&quot;sub2&quot;&gt;&lt;/a&gt;</code></p>
<h4 id="在url中添加参数"><a href="#在url中添加参数" class="headerlink" title="在url中添加参数"></a>在url中添加参数</h4><ol>
<li>在路由的<code>url</code>中添加<code>:参数1名称&amp;参数2名称</code></li>
<li>在页面上注入<code>$stateParams</code>来读取页面上的参数</li>
</ol>
<p>若应用在项目的<code>rpc</code>框架中写法为<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line">  <span class="comment">// config的路径配置</span></div><div class="line">  <span class="string">'articleDetail/:id&amp;:type'</span>:basePath+<span class="string">"/helpCenter/articleDetail/articleDetail.html"</span>,</div><div class="line">  <span class="comment">// 注入到读取页面中然后打印属性可看到 </span></div><div class="line">  <span class="built_in">console</span>.log($stateParams);</div><div class="line">  <span class="comment">// 超链接的写法</span></div><div class="line">  <span class="comment">// &lt;li ui-sref-active="active"&gt;&lt;a href="#/articleDetail/id=35&amp;type=2"  &gt;关于我们&lt;/a&gt;&lt;/li&gt;</span></div><div class="line">&lt;<span class="regexp">/script&gt;</span></div></pre></td></tr></table></figure></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line">  .state(<span class="string">'tab.shop-detail'</span>, &#123;</div><div class="line">      <span class="attr">url</span>: <span class="string">'/shops/:shop_id'</span>,</div><div class="line">      <span class="attr">views</span>: &#123;</div><div class="line">        <span class="string">'tab-shops'</span>: &#123;</div><div class="line">          <span class="attr">templateUrl</span>: <span class="string">'templates/shop-detail.html'</span>,</div><div class="line">          <span class="attr">controller</span>: <span class="string">'ShopDetailCtrl'</span></div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line">    &#125;)</div><div class="line">    </div><div class="line">  <span class="comment">//shop controller</span></div><div class="line">  $<span class="built_in">window</span>.location.href = <span class="string">'#/tab/shops/'</span>+shop_id;    </div><div class="line">  <span class="comment">//ShopDetailCtrl </span></div><div class="line">  controller(<span class="string">'ShopDetailCtrl'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">$scope,$stateParams</span>) </span>&#123;</div><div class="line">      <span class="keyword">if</span> ($stateParams.shop_id) &#123;</div><div class="line">          </div><div class="line">      &#125;</div><div class="line">&lt;<span class="regexp">/script&gt;</span></div></pre></td></tr></table></figure>
<h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><ol>
<li><a href="https://github.com/kittencup" target="_blank" rel="external">kittencup</a></li>
<li><a href="http://www.html-js.com/article/1863" target="_blank" rel="external">创建你自己的AngularJS</a></li>
<li><a href="http://www.cnblogs.com/liulangmao/p/4110137.html" target="_blank" rel="external">angular指令中使用ngModelController</a></li>
<li><a href="http://i.youku.com/i/UNTQzNzEzOTk2/videos" target="_blank" rel="external">angular-ui-router视频教程</a></li>
<li><a href="http://www.tuicool.com/articles/qIBNve" target="_blank" rel="external">AngularJS的学习–$on、$emit和$broadcast的使用 - 疯狂的原始人</a></li>
<li><a href="http://www.jianshu.com/p/1e1aaf0fd30a" target="_blank" rel="external">AngularJS中如何对Controller与Service进行分层设计与编码</a></li>
<li><a href="http://www.aliued.com/?p=3199" target="_blank" rel="external">angular路由</a></li>
<li><a href="https://ui-router.github.io/tutorial/ng1/helloworld" target="_blank" rel="external">官网ui-router教学</a></li>
<li><a href="http://angular-ui.github.io/bootstrap/versioned-docs/1.3.3/#/" target="_blank" rel="external">angular-ui</a></li>
<li><a href="http://sentsin.com/web/659.html" target="_blank" rel="external">AngularJS指令进阶 – ngModelController详解</a></li>
<li><a href="http://ngmodules.org/" target="_blank" rel="external">angluar各种相关插件网站</a></li>
<li><a href="http://www.jackpu.com/qu-diao-dan-ye-ying-yong-zhong-de-ke-e-de-hashbang/" target="_blank" rel="external">去掉单页应用 (SPA) 中的可恶的’#’号</a></li>
<li><a href="http://www.jackpu.com/shi-ge-jing-chang-yu-jian-de-angular-jsmian-shi-wen-ti/" target="_blank" rel="external">十个由浅入深的Angular.js面试问题</a></li>
<li><a href="https://segmentfault.com/q/1010000003839574" target="_blank" rel="external">angualr ui router 如何传递参数</a></li>
<li><a href="http://www.cnblogs.com/JustRun1983/p/3936371.html" target="_blank" rel="external">AngularJs中，如何在render完成之后，执行Js脚本</a></li>
<li><a href="http://www.cnblogs.com/wangmeijian/p/5141266.html" target="_blank" rel="external">利用angular指令监听ng-repeat渲染完成后执行脚本</a></li>
<li><a href="https://segmentfault.com/a/1190000006612247" target="_blank" rel="external">ngVerify - 更高效的 angular 表单验证</a></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[function函数]]></title>
      <url>weison.org/2016/05/10/function/</url>
      <content type="html"><![CDATA[<p>通过函数可以封装多条语句，在任意地方，任何时间来调用执行。ECMAScript中使用function来声明函数。<br>函数在执行的时候会创建一个私有的作用域（栈内存，用于存取基本类型的数据和执行代码）</p>
<p>在刚开始加载页面的时候，浏览器会天生自带一个供js执行的环境（栈内存），称之为作用域。而且加载页面时的那个作用域叫全局作用域。当开始加载js代码之前，会把带有var和function的进行提前的声明或定义。我们把这种机制叫“预解释(变量提升)”</p>
<a id="more"></a>
<h1 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">functionName</span>(<span class="params">arg0,arg1,arg2</span>)</span>&#123;</div><div class="line">	statements</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="堆和栈"><a href="#堆和栈" class="headerlink" title="堆和栈"></a>堆和栈</h1><ol>
<li>引用类型的数据会先在内存中开辟一个新的空间用于把数据存起来，我们把这个存储数据的空间叫<code>堆内存</code></li>
<li><code>栈内存（作用域）</code>是用于执行js代码和保存基本类型的数据 </li>
</ol>
<h1 id="函数执行过程"><a href="#函数执行过程" class="headerlink" title="函数执行过程"></a>函数执行过程</h1><h2 id="1-预解释"><a href="#1-预解释" class="headerlink" title="1.预解释"></a>1.预解释</h2><p>在当前作用域下，js会把var声明（把它的默认值为undefined）或function定义及声明(整个函数提前，并为这个函数创建一个栈空间存放函数内的代码)的函数进行提前解释。</p>
<h3 id="当遇到重复的，就不再进行声明操作了"><a href="#当遇到重复的，就不再进行声明操作了" class="headerlink" title="当遇到重复的，就不再进行声明操作了"></a>当遇到重复的，就不再进行声明操作了</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line">	<span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>)</span>&#123;&#125;;</div><div class="line">   <span class="keyword">var</span> a;</div><div class="line">   <span class="built_in">console</span>.log(a); <span class="comment">// =&gt; function a()&#123;&#125;</span></div><div class="line"> &lt;<span class="regexp">/script&gt;</span></div></pre></td></tr></table></figure>
<h3 id="它是不管条件的"><a href="#它是不管条件的" class="headerlink" title="它是不管条件的"></a>它是不管条件的</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line">   <span class="keyword">if</span>(!(<span class="string">"a"</span> <span class="keyword">in</span> <span class="built_in">window</span>))&#123;</div><div class="line">   	<span class="keyword">var</span> a = <span class="number">12</span>;</div><div class="line">   	<span class="built_in">console</span>.log(<span class="number">1</span>);</div><div class="line">   &#125;<span class="keyword">else</span>&#123;</div><div class="line">   	<span class="built_in">console</span>.log(<span class="number">2</span>);</div><div class="line">   &#125;</div><div class="line">   <span class="comment">// =&gt; 2 因为预解释时是不管if语句的，因为它还会是把a进行提前声明，当进行判断后，因为a已经被声明在window下了，所有window.a是true，取反变成false，所有是2</span></div><div class="line"> &lt;<span class="regexp">/script&gt;</span></div></pre></td></tr></table></figure>
<h3 id="等号右边不进行预解释"><a href="#等号右边不进行预解释" class="headerlink" title="等号右边不进行预解释"></a>等号右边不进行预解释</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line">  <span class="built_in">console</span>.log(fn); <span class="comment">// =&gt;  undefined</span></div><div class="line">  <span class="built_in">console</span>.log(a); <span class="comment">// =&gt; not defined</span></div><div class="line">   <span class="keyword">var</span> fn = <span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>)</span>&#123;</div><div class="line"></div><div class="line">   &#125;</div><div class="line"> &lt;<span class="regexp">/script&gt;</span></div></pre></td></tr></table></figure>
<h3 id="return后带的内容不会被提前声明"><a href="#return后带的内容不会被提前声明" class="headerlink" title="return后带的内容不会被提前声明"></a>return后带的内容不会被提前声明</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line">   <span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>)</span>&#123;</div><div class="line">   	<span class="built_in">console</span>.log(a);</div><div class="line">   	<span class="built_in">console</span>.log(b);</div><div class="line">   	<span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="title">b</span>(<span class="params"></span>)</span>&#123;&#125;</div><div class="line">   	<span class="keyword">var</span> a = <span class="number">12</span>;</div><div class="line">   &#125;</div><div class="line">   fn(); <span class="comment">//=&gt; undefined not defined ;因为return后面的内容不会提前声明，所以function b 没被提前，只是var a进行提前了。</span></div><div class="line"> &lt;<span class="regexp">/script&gt;</span></div></pre></td></tr></table></figure>
<h3 id="预解释发生在一个脚本块里面，不同的脚本块不进行预解释"><a href="#预解释发生在一个脚本块里面，不同的脚本块不进行预解释" class="headerlink" title="预解释发生在一个脚本块里面，不同的脚本块不进行预解释"></a>预解释发生在一个脚本块里面，不同的脚本块不进行预解释</h3><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line">   console.log(a); // =&gt; not defined</div><div class="line"> &lt;/script&gt;</div><div class="line"> &lt;script&gt;</div><div class="line"> 	var a = 12;</div><div class="line"> &lt;/script&gt;</div><div class="line"> &lt;script&gt;</div><div class="line"> 	console.log(a);</div><div class="line"> &lt;/script&gt;</div></pre></td></tr></table></figure>
<h2 id="2-从上到下代码执行"><a href="#2-从上到下代码执行" class="headerlink" title="2.从上到下代码执行"></a>2.从上到下代码执行</h2><ul>
<li>在函数执行的时候，会有一个私有的作用域，定义在里面的变量都是私有变量，它保护里面的私有变量不受外界的干扰，我们把这种机制称为<code>闭包</code></li>
<li>函数每次执行都会创建一个新的私有作用域</li>
</ul>
<h1 id="函数的生命周期"><a href="#函数的生命周期" class="headerlink" title="函数的生命周期"></a>函数的生命周期</h1><ol>
<li>一个函数从全局作用域预解释的时候，把这个函数提前的进行声明与定义的时候就产生了。</li>
<li>当代码从上到下执行的时候，函数会创建一个新的作用域保护这个内部的变量，</li>
<li>一般情况下（内部变量没被外部引用），当函数执行完毕后，它所在的私用作用域会消失 </li>
<li>如果一个私有作用域下，返回一个函数，而这个函数又被外部的变量所引用，那么这个私有作用域代码执行完也不会被销毁。</li>
<li>函数每被执行一次，都会产生新的作用域</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line">	<span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>)</span>&#123;</div><div class="line">		<span class="keyword">var</span> n = <span class="number">12</span>;</div><div class="line">		<span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">			n++;</div><div class="line">			<span class="built_in">console</span>.log(n);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">var</span> fn2 = fn();</div><div class="line">	fn2(); <span class="comment">// =&gt; 13    </span></div><div class="line">	fn2(); <span class="comment">// =&gt; 14    </span></div><div class="line">	<span class="keyword">var</span> fn3 = fn(); <span class="comment">// 执行一次后，又会新开一个新的内存区域</span></div><div class="line">	fn(); <span class="comment">// =&gt; 13</span></div><div class="line"> &lt;<span class="regexp">/script&gt;</span></div></pre></td></tr></table></figure>
<h1 id="匿名函数"><a href="#匿名函数" class="headerlink" title="匿名函数"></a>匿名函数</h1><ol>
<li>函数声明,把函数定义部分当做一个值给变量或者元素的绑定事件</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line">	<span class="keyword">var</span> fn1 = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;    </div><div class="line">	oDiv.onclick= <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;</div><div class="line">	setInterval(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;,<span class="number">1000</span>);</div><div class="line"> <span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></div></pre></td></tr></table></figure>
<ol>
<li>自执行函数，定义完成了就直接执行的函数<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line">   ;(<span class="function"><span class="keyword">function</span>(<span class="params">name</span>)</span>&#123;<span class="built_in">console</span>.log(name)&#125;)(<span class="string">'weison'</span>);</div><div class="line">	<span class="comment">//前面加分号是为了避免前面的变量没加分号，js会错误解释</span></div><div class="line">   <span class="comment">/*</span></div><div class="line">   	  var a = 12</div><div class="line">   	  (function()&#123;&#125;)();</div><div class="line">   	  //被错误解释为</div><div class="line">   	   var a = 12(function()&#123;&#125;)();</div><div class="line">    */</div><div class="line"></div><div class="line">   ~<span class="function"><span class="keyword">function</span>(<span class="params">name</span>)</span>&#123;<span class="built_in">console</span>.log(name)&#125;(<span class="string">'weison'</span>);</div><div class="line">   +<span class="function"><span class="keyword">function</span>(<span class="params">name</span>)</span>&#123;<span class="built_in">console</span>.log(name)&#125;(<span class="string">'weison'</span>);</div><div class="line">   !<span class="function"><span class="keyword">function</span>(<span class="params">name</span>)</span>&#123;<span class="built_in">console</span>.log(name)&#125;(<span class="string">'weison'</span>);</div><div class="line"> <span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></div></pre></td></tr></table></figure>
</li>
</ol>
<h1 id="return通过它来返回值"><a href="#return通过它来返回值" class="headerlink" title="return通过它来返回值"></a><code>return</code>通过它来返回值</h1><ul>
<li>要注意return后面的不会被继续执行</li>
<li>假如return后面不带任何内容，会默认返回<code>undefined</code>,而且依然不会执行下面的语句<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params">n1,n2</span>)</span>&#123;</div><div class="line">	<span class="keyword">return</span> n1 + n2;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<h1 id="this"><a href="#this" class="headerlink" title="this"></a><code>this</code></h1><p>this的指向，与在哪里定义或在哪里执行都没有关系，和函数执行时的主体有关，而且this只出现在function中（或全局作用当中）</p>
<ol>
<li>默认情况下，闭包内的this指向widnow</li>
<li>如果闭包内有return的函数，那个闭包的作用域不会被销毁，同时，这个return的function上一级的作用域是这个闭包</li>
<li>自执行函数会在定义的同时执行,<code>;(function(){})</code>部分相当于函数名<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line">  <span class="keyword">var</span> num = <span class="number">10</span>;</div><div class="line">   <span class="keyword">var</span> obj = &#123;</div><div class="line">   	<span class="attr">num</span>  : <span class="number">30</span>,</div><div class="line">   	<span class="attr">fn</span> : (<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">			    	<span class="built_in">console</span>.log(<span class="keyword">this</span>);</div><div class="line">			    	<span class="keyword">this</span>.num++;</div><div class="line">			    	<span class="built_in">console</span>.log(num);</div><div class="line">			    	<span class="keyword">var</span> num = <span class="number">1</span>;</div><div class="line">			    	<span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">			    		num++;</div><div class="line">			    		<span class="keyword">this</span>.num ++;</div><div class="line">			    		<span class="built_in">console</span>.log(<span class="keyword">this</span>);</div><div class="line">			    		<span class="built_in">console</span>.log(num);</div><div class="line">		    	&#125;</div><div class="line">		    &#125;)()</div><div class="line">   &#125;</div><div class="line">   <span class="keyword">var</span> fn = obj.fn;</div><div class="line">   fn();</div><div class="line">   obj.fn();</div><div class="line">   <span class="built_in">console</span>.log(number);</div><div class="line">   <span class="built_in">console</span>.log(obj.number);</div><div class="line"></div><div class="line"> <span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></div></pre></td></tr></table></figure>
</li>
</ol>
<h1 id="anguments参数组"><a href="#anguments参数组" class="headerlink" title="anguments参数组"></a><code>anguments</code>参数组</h1><p>可以向ECMAScript函数传递任意数量的参数，并且可以通过<code>arguments</code>对象来访问这些参数。</p>
<ol>
<li>ECMAScript不介意所传递参数的数量，也不在乎传进来的参数是什么数据类型。也就是说，在定义函数时，只接受两个参数，在调用的时候也未必一定要传送两个参数，可以是一个，也可以三个，而解释器不会有什么怨言。因为在ESCMAScript中，参数是用anguments一个数组来表示的。函数接受的始终是这个数组。它不包含或者包含多个元素都无所谓。函数体内，可以通过访问<code>arguments</code>来访问参数组中的数据。如可以通过arguments[0]来访问第一个参数的内容，使用Length可以计算出传入参数的数量。</li>
</ol>
<ul>
<li><p>通过<code>length</code>计算输入参数个数，只与传入的参数个数有关，而且意在定义的参数无关</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">howManyArgs</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	alert(<span class="built_in">arguments</span>.length);</div><div class="line">&#125;</div><div class="line">howManyArgs(<span class="string">'hello'</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>); <span class="comment">//=&gt;4</span></div></pre></td></tr></table></figure>
</li>
<li><p><code>arguments</code>对象可以与命名参数一起使用</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">doAdd</span>(<span class="params">num1,num2</span>)</span>&#123;</div><div class="line">	<span class="keyword">if</span>(<span class="built_in">arguments</span>.length == <span class="number">1</span>)&#123;</div><div class="line">		alert(<span class="built_in">arguments</span>[<span class="number">0</span>] + <span class="number">10</span>);</div><div class="line">	&#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">arguments</span>.length == <span class="number">2</span>)&#123;</div><div class="line">		alert(<span class="built_in">arguments</span>[<span class="number">0</span>] + <span class="built_in">arguments</span>[<span class="number">1</span>]);</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line">doAdd(<span class="number">10</span>); <span class="comment">// =&gt;20</span></div><div class="line">doAdd(<span class="number">100</span>,<span class="number">200</span>); <span class="comment">//=&gt;300</span></div></pre></td></tr></table></figure>
</li>
<li><p>它的永远跟对应的命名参数值保持同步</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">doAdd</span>(<span class="params">n1,n2</span>)</span>&#123;</div><div class="line">	<span class="built_in">arguments</span>[<span class="number">1</span>] = <span class="number">10</span>;</div><div class="line">	alert(<span class="built_in">arguments</span>[<span class="number">0</span>] + n2);</div><div class="line">&#125;</div><div class="line"> doAdd(<span class="number">1</span>);</div></pre></td></tr></table></figure>
</li>
<li><p>function没有重截，当有两个一样的函数名时，会后面的覆盖前面的函数。</p>
</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[canvas]]></title>
      <url>weison.org/2016/05/07/canvas/</url>
      <content type="html"><![CDATA[<p><code>getContext()</code>设置画布类型<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> canvas = <span class="built_in">document</span>.querySelect(<span class="string">'#canvas'</span>);</div><div class="line"><span class="keyword">var</span> c2d = canvas.getContext(<span class="string">'2d'</span>); <span class="comment">//创建一个2d画布</span></div></pre></td></tr></table></figure></p>
<h1 id="绘制矩形"><a href="#绘制矩形" class="headerlink" title="绘制矩形"></a>绘制矩形</h1><p><code>obj.fllRect(L,T,W,H)</code> 填充一个矩形<br><code>obj.strokeRect(L,T,W,H)</code>创建一个带边框的矩形</p>
<h2 id="设置样式"><a href="#设置样式" class="headerlink" title="设置样式"></a>设置样式</h2><p><code>fillStyle</code>   填充颜色<br><code>lineWidth</code>   线宽度<br><code>strokeStyle</code> 边框颜色<br><code>lineJoin</code>    边界连接点样式 </p>
<ul>
<li><code>round</code>  圆角矩形</li>
<li><code>bevel</code>  斜角</li>
<li><code>butt</code>   默认，直角</li>
</ul>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">canvas</span> <span class="attr">id</span>=<span class="string">"canvas"</span> <span class="attr">width</span>=<span class="string">"500"</span> <span class="attr">height</span>=<span class="string">"500"</span>&gt;</span></div><div class="line">	浏览器不支持canvas</div><div class="line"><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">	<span class="keyword">var</span> c = <span class="built_in">document</span>.querySelector(<span class="string">'#canvas'</span>);</div><div class="line"></div><div class="line">	<span class="comment">//getContext创建场景</span></div><div class="line">	<span class="keyword">var</span> c2d = c.getContext(<span class="string">'2d'</span>);</div><div class="line"></div><div class="line">	c2d.fillStyle = <span class="string">'red'</span>;</div><div class="line">	c2d.fillRect(<span class="number">50.5</span>,<span class="number">50.5</span>,<span class="number">100</span>,<span class="number">100</span>);</div><div class="line"></div><div class="line">	c2d.lineWidth = <span class="number">20</span>;</div><div class="line">	c2d.lineJoin = <span class="string">'bevel'</span></div><div class="line">	c2d.strokeStyle = <span class="string">'blue'</span>;</div><div class="line">	c2d.strokeRect(<span class="number">50.5</span>,<span class="number">50.5</span>,<span class="number">100</span>,<span class="number">100</span>);</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="大小设置"><a href="#大小设置" class="headerlink" title="大小设置"></a>大小设置</h2><p>要注意的是，定义的样式必须要是绘制图形前设置完成<br>在设置canvas的宽高时，建议写在canvas的行内，如果通过样式来写，<br>它不会按实际定义的样式，而是通过计算style内的值与原来的大小<br>(w:300,h:150)来进行等比缩放<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></div><div class="line">	<span class="selector-tag">html</span>&#123;</div><div class="line">		<span class="attribute">background</span>: <span class="number">#000</span>;</div><div class="line">	&#125;</div><div class="line">	<span class="selector-id">#canvas</span>&#123;</div><div class="line">		<span class="attribute">background</span>: <span class="number">#fff</span>;</div><div class="line">		<span class="attribute">width</span>:<span class="number">600px</span>;</div><div class="line">		<span class="attribute">height</span>:<span class="number">200px</span>;</div><div class="line">	&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">canvas</span> <span class="attr">id</span>=<span class="string">"canvas"</span> &gt;</span><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h1 id="绘制路径"><a href="#绘制路径" class="headerlink" title="绘制路径"></a>绘制路径</h1><ul>
<li><code>beginPath</code>   开始绘制路径</li>
<li><code>closePath</code>   结束绘制路径，有连接始点和终点的作用</li>
<li><code>moveTo(x,y)</code> 移动到绘制的新目标点</li>
<li><code>lineTo(x,y)</code> 新目标点</li>
<li><code>stroke()</code>    绘制线条</li>
<li><code>fill()</code>      填充图形</li>
</ul>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></div><div class="line">	<span class="selector-tag">html</span>&#123;</div><div class="line">		<span class="attribute">background</span>: <span class="number">#000</span>;</div><div class="line">	&#125;</div><div class="line">	<span class="selector-id">#canvas</span>&#123;</div><div class="line">		<span class="attribute">background</span>: <span class="number">#fff</span>;</div><div class="line">	&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">canvas</span> <span class="attr">id</span>=<span class="string">"canvas"</span> <span class="attr">width</span>=<span class="string">"500"</span> <span class="attr">height</span>=<span class="string">"500"</span>&gt;</span><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">	<span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">		<span class="keyword">var</span> oC= <span class="built_in">document</span>.querySelector(<span class="string">'#canvas'</span>);</div><div class="line">		<span class="keyword">var</span> o2d = oC.getContext(<span class="string">'2d'</span>);</div><div class="line">		o2d.beginPath();</div><div class="line">		o2d.moveTo(<span class="number">100</span>,<span class="number">100</span>);</div><div class="line">		o2d.lineTo(<span class="number">200</span>,<span class="number">300</span>);</div><div class="line">		o2d.lineTo(<span class="number">200</span>,<span class="number">100</span>);</div><div class="line">		o2d.closePath();</div><div class="line">		o2d.stroke();</div><div class="line"></div><div class="line">		o2d.beginPath();</div><div class="line">		o2d.moveTo(<span class="number">300</span>,<span class="number">100</span>);</div><div class="line">		o2d.lineTo(<span class="number">400</span>,<span class="number">100</span>);</div><div class="line">		o2d.lineTo(<span class="number">400</span>,<span class="number">300</span>);</div><div class="line">		o2d.closePath();</div><div class="line">		o2d.fill();</div><div class="line">	&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h2><ol>
<li><code>beginPath()</code>            开始绘制路径</li>
<li><code>moveTo(x,y)</code>            确认始点</li>
<li><code>lineTo(x,y)</code>            创建另一个节点</li>
<li><code>closePath()</code>            连接始点和终点</li>
<li><code>stroke[fill]()</code>     绘制线条||填充</li>
</ol>
<h2 id="rect-L-T-W-H-绘制矩形"><a href="#rect-L-T-W-H-绘制矩形" class="headerlink" title="rect(L,T,W,H) 绘制矩形"></a><code>rect(L,T,W,H)</code> 绘制矩形</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></div><div class="line">	<span class="selector-tag">html</span>&#123;</div><div class="line">		<span class="attribute">background</span>: <span class="number">#000</span>;</div><div class="line">	&#125;</div><div class="line">	<span class="selector-id">#canvas</span>&#123;</div><div class="line">		<span class="attribute">background</span>: <span class="number">#fff</span>;</div><div class="line">	&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">canvas</span> <span class="attr">id</span>=<span class="string">"canvas"</span> <span class="attr">width</span>=<span class="string">"500"</span> <span class="attr">height</span>=<span class="string">"500"</span>&gt;</span><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">	<span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">		<span class="keyword">var</span> oC= <span class="built_in">document</span>.querySelector(<span class="string">'#canvas'</span>);</div><div class="line">		<span class="keyword">var</span> o2d = oC.getContext(<span class="string">'2d'</span>);</div><div class="line">		o2d.beginPath();</div><div class="line">		o2d.fillStyle = <span class="string">'red'</span>;</div><div class="line">		o2d.rect(<span class="number">100</span>,<span class="number">100</span>,<span class="number">200</span>,<span class="number">200</span>);</div><div class="line">		o2d.closePath();</div><div class="line">		o2d.fill();</div><div class="line">	&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="clearRect-L-T-W-H-清除画布"><a href="#clearRect-L-T-W-H-清除画布" class="headerlink" title="clearRect(L,T,W,H)清除画布"></a><code>clearRect(L,T,W,H)</code>清除画布</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></div><div class="line">	<span class="selector-tag">html</span>&#123;</div><div class="line">		<span class="attribute">background</span>: <span class="number">#000</span>;</div><div class="line">	&#125;</div><div class="line">	<span class="selector-id">#canvas</span>&#123;</div><div class="line">		<span class="attribute">background</span>: <span class="number">#fff</span>;</div><div class="line">	&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">canvas</span> <span class="attr">id</span>=<span class="string">"canvas"</span> <span class="attr">width</span>=<span class="string">"500"</span> <span class="attr">height</span>=<span class="string">"500"</span>&gt;</span><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">	<span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">		<span class="keyword">var</span> oC= <span class="built_in">document</span>.querySelector(<span class="string">'#canvas'</span>);</div><div class="line">		<span class="keyword">var</span> o2d = oC.getContext(<span class="string">'2d'</span>);</div><div class="line">		o2d.beginPath();</div><div class="line">		o2d.fillStyle = <span class="string">'red'</span>;</div><div class="line">		o2d.rect(<span class="number">100</span>,<span class="number">100</span>,<span class="number">200</span>,<span class="number">200</span>);</div><div class="line">		o2d.closePath();</div><div class="line">		o2d.stroke();</div><div class="line">		o2d.clearRect(<span class="number">0</span>,<span class="number">0</span>,oC.clientWidth,oC.clientHeight);</div><div class="line">	&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="save-保存路径与restore-恢复路径"><a href="#save-保存路径与restore-恢复路径" class="headerlink" title="save()保存路径与restore()恢复路径"></a><code>save()</code>保存路径与<code>restore()</code>恢复路径</h2><p>相当于创建一个独立的路径，内部所做的改变路径样式的操作不影响外部其它范围。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></div><div class="line"><span class="selector-tag">html</span>&#123;<span class="attribute">background</span>: <span class="number">#000</span>;&#125;</div><div class="line"><span class="selector-id">#canvas</span>&#123;<span class="attribute">background</span>: <span class="number">#fff</span>;&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">canvas</span> <span class="attr">id</span>=<span class="string">"canvas"</span> <span class="attr">width</span>=<span class="string">"500"</span> <span class="attr">height</span>=<span class="string">"500"</span>&gt;</span><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	<span class="keyword">var</span> oC= <span class="built_in">document</span>.querySelector(<span class="string">'#canvas'</span>);</div><div class="line">	<span class="keyword">var</span> o2d = oC.getContext(<span class="string">'2d'</span>);</div><div class="line">	o2d.save();</div><div class="line">	o2d.beginPath();</div><div class="line">	o2d.moveTo(<span class="number">100</span>,<span class="number">100</span>);</div><div class="line">	o2d.lineTo(<span class="number">200</span>,<span class="number">300</span>);</div><div class="line">	o2d.lineTo(<span class="number">200</span>,<span class="number">100</span>);</div><div class="line">	o2d.fillStyle = <span class="string">'red'</span>;</div><div class="line">	o2d.closePath();</div><div class="line">	o2d.fill();</div><div class="line">	o2d.restore();</div><div class="line"></div><div class="line">	o2d.beginPath();</div><div class="line">	o2d.moveTo(<span class="number">300</span>,<span class="number">100</span>);</div><div class="line">	o2d.lineTo(<span class="number">400</span>,<span class="number">100</span>);</div><div class="line">	o2d.lineTo(<span class="number">400</span>,<span class="number">300</span>);</div><div class="line">	o2d.closePath();</div><div class="line">	o2d.fill();</div><div class="line">&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h2 id="lineCap-端点样式"><a href="#lineCap-端点样式" class="headerlink" title="lineCap 端点样式"></a><code>lineCap</code> 端点样式</h2><ul>
<li><code>butt</code> 默认</li>
<li><code>round</code> 圆形</li>
<li><code>square</code> 多出宽度的一半，比如说lineWidth是10像素，<br>那么加上<code>square</code>后，会多5像素的长度</li>
</ul>
<h1 id="绘制圆形arc-x-y-半径-起始弧度，结束弧度，旋转方向"><a href="#绘制圆形arc-x-y-半径-起始弧度，结束弧度，旋转方向" class="headerlink" title="绘制圆形arc(x,y,半径,起始弧度，结束弧度，旋转方向)"></a>绘制圆形<code>arc(x,y,半径,起始弧度，结束弧度，旋转方向)</code></h1><ul>
<li>弧度与角度的换算关系 弧度 = 角度 * Math.PI / 180;</li>
<li>旋转方向，默认为false（顺时针），true（逆时针）</li>
</ul>
<h1 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h1><h2 id="鼠标移动画线"><a href="#鼠标移动画线" class="headerlink" title="鼠标移动画线"></a><code>鼠标移动画线</code></h2><p>当鼠标点击在画布上时，记录当前位置作为线的<code>moveTo()</code>起点值，然后记录文档移动的位置，当作<code>lineTo()</code>的新节点，调用<code>stroke</code>绘制线条，而最后鼠标释放时，将<code>onmousemove</code>和<code>document.mouseup</code>重置为null<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></div><div class="line"><span class="selector-tag">html</span>&#123;<span class="attribute">background</span>: <span class="number">#000</span>;&#125;</div><div class="line"><span class="selector-id">#canvas</span>&#123;<span class="attribute">background</span>: <span class="number">#fff</span>;&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">canvas</span> <span class="attr">id</span>=<span class="string">"canvas"</span> <span class="attr">width</span>=<span class="string">"500"</span> <span class="attr">height</span>=<span class="string">"500"</span>&gt;</span><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	<span class="keyword">var</span> oC= <span class="built_in">document</span>.querySelector(<span class="string">'#canvas'</span>);</div><div class="line">	<span class="keyword">var</span> o2d = oC.getContext(<span class="string">'2d'</span>);</div><div class="line">	oC.onmousedown = <span class="function"><span class="keyword">function</span>(<span class="params">ev</span>)</span>&#123;</div><div class="line">		<span class="keyword">var</span> ev = ev || <span class="built_in">window</span>.event;</div><div class="line">		o2d.moveTo(ev.clientX - oC.offsetLeft,ev.clientY - oC.offsetTop);</div><div class="line">		<span class="built_in">document</span>.onmousemove = <span class="function"><span class="keyword">function</span>(<span class="params">ev</span>)</span>&#123;</div><div class="line">			<span class="keyword">var</span> ev = ev || <span class="built_in">window</span>.event;</div><div class="line">			o2d.lineTo(ev.clientX - oC.offsetLeft,ev.clientY - oC.offsetTop);</div><div class="line">			o2d.stroke();</div><div class="line">		&#125;</div><div class="line">		<span class="built_in">document</span>.onmouseup = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">			<span class="built_in">document</span>.onmousemove = <span class="literal">null</span>;</div><div class="line">			<span class="built_in">document</span>.onmouseup = <span class="literal">null</span>;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h2 id="移动的矩形"><a href="#移动的矩形" class="headerlink" title="移动的矩形"></a>移动的矩形</h2><ol>
<li>利用<code>fillRect(x,y,w,h)</code>创建一个填充矩形</li>
<li>通过<code>setInterval()</code>来定时更新矩形的left,top值</li>
<li><code>clearRect()</code>清空上一次的画布内容</li>
</ol>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></div><div class="line"><span class="selector-tag">html</span>&#123;<span class="attribute">background</span>: <span class="number">#000</span>;&#125;</div><div class="line"><span class="selector-id">#canvas</span>&#123;<span class="attribute">background</span>: <span class="number">#fff</span>;&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">canvas</span> <span class="attr">id</span>=<span class="string">"canvas"</span> <span class="attr">width</span>=<span class="string">"500"</span> <span class="attr">height</span>=<span class="string">"500"</span>&gt;</span><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	<span class="keyword">var</span> oC = <span class="built_in">document</span>.querySelector(<span class="string">'#canvas'</span>),</div><div class="line">	    c2d = oC.getContext(<span class="string">'2d'</span>),</div><div class="line">	    num = <span class="number">20</span>,</div><div class="line">	    timer = <span class="literal">null</span>;</div><div class="line">	 c2d.fillStyle = <span class="string">'red'</span>;</div><div class="line">	 c2d.fillRect(<span class="number">10</span>,<span class="number">10</span>,<span class="number">100</span>,<span class="number">100</span>);</div><div class="line">	 timer = setInterval(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	 	c2d.clearRect(<span class="number">0</span>,<span class="number">0</span>,oC.width,oC.height);</div><div class="line">	 	num ++;</div><div class="line">	 	c2d.fillRect(num,num,<span class="number">100</span>,<span class="number">100</span>);</div><div class="line">	 	<span class="keyword">if</span>(num &gt; oC.width - <span class="number">100</span>)&#123;</div><div class="line">	 		clearInterval(timer)</div><div class="line">	 	&#125;</div><div class="line">	 &#125;,<span class="number">20</span>);</div><div class="line">&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="绘制实行的钟表"><a href="#绘制实行的钟表" class="headerlink" title="绘制实行的钟表"></a>绘制实行的钟表</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div></pre></td><td class="code"><pre><div class="line">html&#123;background: #000;&#125;</div><div class="line">#canvas&#123;background: #fff;&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">canvas</span> <span class="attr">id</span>=<span class="string">"canvas"</span> <span class="attr">width</span>=<span class="string">"500"</span> <span class="attr">height</span>=<span class="string">"500"</span>&gt;</span><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	<span class="keyword">var</span> oC = <span class="built_in">document</span>.querySelector(<span class="string">'#canvas'</span>),</div><div class="line">	    c2d = oC.getContext(<span class="string">'2d'</span>),</div><div class="line">	   </div><div class="line">	    x = <span class="number">200</span>,</div><div class="line">	    y = <span class="number">200</span>,</div><div class="line">	    r = <span class="number">150</span>;</div><div class="line">	c2d.moveTo(<span class="number">200</span>,<span class="number">200</span>);</div><div class="line"></div><div class="line">	<span class="comment">//绘制外圆和秒钟刻度</span></div><div class="line">	<span class="comment">//rad 代表每次旋转角度</span></div><div class="line">	<span class="function"><span class="keyword">function</span> <span class="title">toDraw</span>(<span class="params">rad</span>)</span>&#123;</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">var</span> num =<span class="number">0</span>;num &lt;(<span class="number">360</span>/rad);num++)&#123;</div><div class="line">			c2d.moveTo(x,y);</div><div class="line">			c2d.arc(x,y,r,(<span class="number">-90</span>+num*rad)*<span class="built_in">Math</span>.PI/<span class="number">180</span>,(<span class="number">-90</span>+(num+<span class="number">1</span>)*rad)*<span class="built_in">Math</span>.PI/<span class="number">180</span>,<span class="literal">false</span>);</div><div class="line">			c2d.stroke();</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">function</span> <span class="title">conver</span>(<span class="params">size</span>)</span>&#123;</div><div class="line">		c2d.fillStyle = <span class="string">'#fff'</span>;</div><div class="line">		c2d.beginPath();</div><div class="line">		c2d.moveTo(x,y);</div><div class="line">		c2d.arc(x,y,size/<span class="number">20</span>*r,<span class="number">0</span>,<span class="number">360</span>*<span class="built_in">Math</span>.PI/<span class="number">180</span>);</div><div class="line">		c2d.fill();</div><div class="line">		c2d.closePath();</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="comment">// width   线的宽度</span></div><div class="line">	<span class="comment">// len     长度</span></div><div class="line">	<span class="comment">// nowTime 采用的单位</span></div><div class="line">	<span class="function"><span class="keyword">function</span> <span class="title">drawPoint</span>(<span class="params">width,len,nowTime</span>)</span>&#123;</div><div class="line"></div><div class="line">		c2d.lineCap = <span class="string">'round'</span>;</div><div class="line">		c2d.lineWidth = width;</div><div class="line">		c2d.beginPath();</div><div class="line">		c2d.moveTo(x,y);</div><div class="line">		nowTime = (<span class="number">-90</span> + nowTime)*<span class="built_in">Math</span>.PI/<span class="number">180</span>;</div><div class="line">		c2d.arc(x,y,len/<span class="number">20</span>*r,nowTime,nowTime);</div><div class="line">		c2d.stroke();</div><div class="line">		c2d.closePath();</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">function</span> <span class="title">drawClock</span>(<span class="params"></span>)</span>&#123;</div><div class="line">		c2d.clearRect(<span class="number">0</span>,<span class="number">0</span>,oC.width,oC.height);</div><div class="line">		<span class="comment">//获取时间</span></div><div class="line">		<span class="keyword">var</span> d = <span class="keyword">new</span> <span class="built_in">Date</span>();</div><div class="line">		<span class="keyword">var</span> dHour = d.getHours(),</div><div class="line">			dMin = d.getMinutes(),</div><div class="line">			dSec = d.getSeconds()</div><div class="line">		c2d.beginPath();</div><div class="line">		toDraw(<span class="number">6</span>);</div><div class="line">		c2d.closePath();</div><div class="line">			<span class="comment">//绘制一个白色圆形，覆盖在上面</span></div><div class="line">			conver(<span class="number">19</span>);</div><div class="line">		</div><div class="line">		<span class="comment">//绘制分钟表盘</span></div><div class="line">		c2d.lineWidth = <span class="number">4</span>;</div><div class="line">		c2d.beginPath();</div><div class="line">		toDraw(<span class="number">30</span>);</div><div class="line">		c2d.closePath();</div><div class="line">		conver(<span class="number">17</span>)</div><div class="line"></div><div class="line">		<span class="comment">//绘制时针，当分针走到一半时，时钟应该走了两个时间期间中</span></div><div class="line">		<span class="comment">//所以就相当于30分钟15度，2小钟1度，所以把分钟/2就可以</span></div><div class="line">		<span class="comment">//算出当前分钟数时针的指向</span></div><div class="line">		drawPoint(<span class="number">5</span>,<span class="number">10</span>,dHour*<span class="number">30</span>+dMin/<span class="number">2</span>);</div><div class="line">		<span class="comment">//绘制分针</span></div><div class="line">		drawPoint(<span class="number">3</span>,<span class="number">14</span>,dMin*<span class="number">6</span>);</div><div class="line">		<span class="comment">//绘制秒针</span></div><div class="line">		drawPoint(<span class="number">1</span>,<span class="number">16</span>,dSec*<span class="number">6</span>);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	drawClock();</div><div class="line">	setInterval(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;drawClock()&#125;,<span class="number">1000</span>);</div><div class="line">&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[dom 文档对象模型]]></title>
      <url>weison.org/2016/04/14/dom/</url>
      <content type="html"><![CDATA[<p>文档： html页面<br>文档对象：页面中的元素<br>为了让js能操作html元素的一套标准。它把会DOM看成一棵树，把html折分成各种节点类型，并把树状的元素根据层级来定义了不同的关系。</p>
<h3 id="获取元素"><a href="#获取元素" class="headerlink" title="获取元素"></a>获取元素</h3><h4 id="document-getElementById-id值"><a href="#document-getElementById-id值" class="headerlink" title="document.getElementById(id值)"></a><code>document.getElementById(id值)</code></h4><p>通过元素的id获取这个元素对象</p>
<ol>
<li>如果页面中的id重复了，默认只会获取第一个符合的元素</li>
<li>如果没有获取到元素，会返回null</li>
<li><p>在ie6,ie7中，会把表单元素（input）的name属性值当作是ID来使用</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"tab"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"tab"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">    <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">      <span class="built_in">console</span>.log(<span class="built_in">document</span>.getElementById(<span class="string">'tab'</span>).tagName); <span class="comment">//正宗情况下是div ,ie7下是INPUT</span></div><div class="line">    &#125;</div><div class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>在ie6,7中不区分ID的大小写<br>因此在项目中要注意不要让input的name与其它元素的id值一样，也不要使用大小写（tab,Tab）来区分不同的元素</p>
</li>
<li>可以直接写元素的id来充当这个元素（不推荐）<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"tab"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"> <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">   <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">     <span class="built_in">console</span>.log(tab); <span class="comment">//&lt;div id="tab"&gt;&lt;/div&gt;</span></div><div class="line">   &#125;</div><div class="line"> <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
</ol>
<h4 id="document-getElementsByTagName-quot-元素标签名-quot"><a href="#document-getElementsByTagName-quot-元素标签名-quot" class="headerlink" title="document.getElementsByTagName(&quot;元素标签名&quot;)"></a><code>document.getElementsByTagName(&quot;元素标签名&quot;)</code></h4><p>通过元素的标签名来获取一组元素<br><code>document</code>称之为上下文，它决定元素选择时的范围，如<code>document.geElementsByTagName()</code>就是在整个文档中查找元素，<br><code>tab.geElementsByTagName()</code>只有tab范围内查找元素，<code>document.getElementById()</code>的上下文中只能是<code>document</code></p>
<ul>
<li>获取的是一个对象数据类似的结果，并且是一个类数组（以数字作为索引，从0开始，逐级递增，索引值对应当前的某一个元素，并且有一个<code>length</code>属性代表获取的个数）<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span><span class="tag">&lt;<span class="name">u</span>&gt;</span><span class="tag">&lt;/<span class="name">u</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">  <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> oLi = <span class="built_in">document</span>.getElementsByTagName(<span class="string">'li'</span>);</div><div class="line">    <span class="built_in">console</span>.dir(oLi);</div><div class="line">    <span class="comment">// 获取li的个数</span></div><div class="line">    <span class="built_in">console</span>.log(oLi.length); <span class="comment">// =&gt; 3</span></div><div class="line">    <span class="comment">// 获取第n个li</span></div><div class="line">    <span class="built_in">console</span>.log(oLi[<span class="number">1</span>]);  <span class="comment">// =&gt;   &lt;li&gt;2&lt;/li&gt;</span></div><div class="line">    <span class="built_in">console</span>.log(oLi.item(<span class="number">1</span>));  <span class="comment">// =&gt;   &lt;li&gt;2&lt;/li&gt;</span></div><div class="line">  &#125;</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="content-getElementsByName-39-name-39-通过元素的name值来获取元素"><a href="#content-getElementsByName-39-name-39-通过元素的name值来获取元素" class="headerlink" title="content.getElementsByName(&#39;name&#39;) 通过元素的name值来获取元素"></a><code>content.getElementsByName(&#39;name&#39;)</code> 通过元素的name值来获取元素</h4><ul>
<li>在IE下只对表单元素起作用</li>
<li>这个方法应用于获取具有相同name的表单元素</li>
</ul>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">""</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"sex"</span> <span class="attr">value</span>=<span class="string">"男"</span>&gt;</span>男</div><div class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"sex"</span> <span class="attr">value</span>=<span class="string">"女"</span>&gt;</span>女</div><div class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">id</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"提交"</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">  <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">   <span class="keyword">var</span> oBtn = <span class="built_in">document</span>.getElementById(<span class="string">'submit'</span>);</div><div class="line">   <span class="keyword">var</span> oSex = <span class="built_in">document</span>.getElementsByName(<span class="string">'sex'</span>);</div><div class="line">   oBtn.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> cur = <span class="string">''</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;oSex.length;i++)&#123;</div><div class="line">      <span class="keyword">if</span>(oSex[i].checked == <span class="literal">true</span>)&#123;</div><div class="line">        <span class="built_in">console</span>.log(oSex[i].value);</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">   &#125;</div><div class="line">  &#125;</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<h4 id="content-getElementsByClassName-39-name-39-通过元素的class类名来获取元素"><a href="#content-getElementsByClassName-39-name-39-通过元素的class类名来获取元素" class="headerlink" title="content.getElementsByClassName(&#39;name&#39;) 通过元素的class类名来获取元素"></a><code>content.getElementsByClassName(&#39;name&#39;)</code> 通过元素的class类名来获取元素</h4><p>是项目中最常用的一种方法，但是在ie6~ie8不兼容</p>
<h4 id="document-documentElement获取整个html"><a href="#document-documentElement获取整个html" class="headerlink" title="document.documentElement获取整个html"></a><code>document.documentElement</code>获取整个html</h4><h4 id="document-body获取body"><a href="#document-body获取body" class="headerlink" title="document.body获取body"></a><code>document.body</code>获取body</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">	<span class="comment">// 常用于获取屏幕尺寸</span></div><div class="line">	<span class="keyword">var</span> windowWidth = <span class="built_in">document</span>.documentElement.clientWidth || <span class="built_in">document</span>.body.clientWidth;</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<h4 id="在移动端获取元素的常用方法"><a href="#在移动端获取元素的常用方法" class="headerlink" title="在移动端获取元素的常用方法"></a>在移动端获取元素的常用方法</h4><ul>
<li><code>document.querySelector()</code> 获取一个</li>
</ul>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">scritp</span>&gt;</span></div><div class="line">var oDiv = document.querySelector('#div1');</div><div class="line"><span class="tag">&lt;/<span class="name">scritp</span>&gt;</span></div></pre></td></tr></table></figure>
<ul>
<li><code>document.querySelectorAll()</code> 获取多个，类数组<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">scritp</span>&gt;</span></div><div class="line">var oDiv = document.querySelectorAll('#tab li');</div><div class="line">var oRadio = document.querySelectorAll("input[type='radio']");</div><div class="line"><span class="tag">&lt;/<span class="name">scritp</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
</ul>
<p>jquery和querySelector的选择器是参考css选择器来做的</p>
<h3 id="节点"><a href="#节点" class="headerlink" title="节点"></a>节点</h3><p>一个页面上的标签，文字、注释…都是节点</p>
<ol>
<li><code>childNodes</code>子节点列表集合（只读），它只包含一级子节点，不包含更内部的孙节点<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">"oUl"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">li</span>&gt;</span>1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">li</span>&gt;</span>2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">li</span>&gt;</span>3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">li</span>&gt;</span>4<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">  <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  	<span class="keyword">var</span> oUl = <span class="built_in">document</span>.getElementById(<span class="string">'oUl'</span>);</div><div class="line">  	<span class="built_in">console</span>.log(oUl.childNodes.length); </div><div class="line">  	<span class="comment">// =》标准浏览器下是9 ，因为节点包含很多种类型，这里面有文本节点（5）和标签节点</span></div><div class="line">  	<span class="comment">// =》ie6,7下是4 ，因为它只计算了标签节点</span></div><div class="line">  &#125;</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
</ol>
<p>DOM节点一共有12种类型，可以通过nodeType来判断节点类型<br><a href="http://www.w3school.com.cn/jsref/prop_node_nodetype.asp" target="_blank" rel="external">HTML DOM nodeType 属性</a></p>
<ul>
<li>元素节点 1</li>
<li>属性节点 2</li>
<li>文本节点 3<br>| 节点名称  | nodeType | nodeName  | nodeValue |<br>| – | – | – | – |<br>| 元素节点 |  1  | 大写的标签名 | null |<br>| 文本节点(文字) |  3  | #text | 文本内容 |<br>| 注释节点 |  8  | #comment | 注释内容 |<br>| document |  9  | #document | null |</li>
</ul>
<h4 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">ul</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!-- 测试childNodes --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span> &gt;</span>li0<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span> &gt;</span>li1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">id</span>=<span class="string">"myList"</span>&gt;</span>li2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>li3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>li4<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>li5<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">    <span class="keyword">var</span> oLi = <span class="built_in">document</span>.getElementById(<span class="string">'myList'</span>);</div><div class="line"></div><div class="line">    <span class="comment">/*</span></div><div class="line">      eleId 当前元素</div><div class="line">     */</div><div class="line">    <span class="keyword">var</span> prev = <span class="function"><span class="keyword">function</span>(<span class="params">eleId</span>)</span>&#123;</div><div class="line">        <span class="keyword">var</span> ele = <span class="built_in">document</span>.getElementById(eleId),</div><div class="line">             preEle = ele.previousSibling;</div><div class="line">        <span class="keyword">while</span>(preEle &amp;&amp; preEle.nodeType != <span class="number">1</span>)&#123;</div><div class="line">          preEle = preEle.previousSibling;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> preEle;</div><div class="line">      &#125;</div><div class="line">      <span class="comment">// prev('myList');</span></div><div class="line"></div><div class="line">    <span class="comment">//所有的哥哥元素</span></div><div class="line">    <span class="keyword">var</span> prevAll = <span class="function"><span class="keyword">function</span>(<span class="params">eleId</span>)</span>&#123;</div><div class="line">        <span class="keyword">var</span> ele = <span class="built_in">document</span>.getElementById(eleId),</div><div class="line">             preEle = ele.previousSibling,</div><div class="line">             eleArr = [];</div><div class="line">        <span class="keyword">while</span>(preEle)&#123;</div><div class="line">          <span class="keyword">if</span>(preEle.nodeType == <span class="number">1</span>)&#123;</div><div class="line">            eleArr.unshift(preEle);</div><div class="line">          &#125;</div><div class="line">           preEle = preEle.previousSibling;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> eleArr;</div><div class="line">      &#125;</div><div class="line">    <span class="comment">// prevAll('myList');</span></div><div class="line"></div><div class="line">    <span class="comment">//下一个弟弟元素</span></div><div class="line">    <span class="keyword">var</span> next = <span class="function"><span class="keyword">function</span>(<span class="params">eleId</span>)</span>&#123;</div><div class="line">        <span class="keyword">var</span> ele = <span class="built_in">document</span>.getElementById(eleId),</div><div class="line">             nextEle = ele.nextSibling,</div><div class="line">             eleArr = [];</div><div class="line">        <span class="keyword">while</span>(nextEle)&#123;</div><div class="line">          <span class="keyword">if</span>(nextEle.nodeType == <span class="number">1</span>)&#123;</div><div class="line">            eleArr.unshift(nextEle);</div><div class="line">          &#125;</div><div class="line">           nextEle = nextEle.nextSibling;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> nextEle;</div><div class="line">      &#125;</div><div class="line">    <span class="comment">// next('myList');</span></div><div class="line"></div><div class="line">    <span class="comment">//所有弟弟元素</span></div><div class="line">     <span class="keyword">var</span> nextAll = <span class="function"><span class="keyword">function</span>(<span class="params">eleId</span>)</span>&#123;</div><div class="line">         <span class="keyword">var</span> ele = <span class="built_in">document</span>.getElementById(eleId),</div><div class="line">              preEle = ele.nextSibling,</div><div class="line">              eleArr = [];</div><div class="line">         <span class="keyword">while</span>(preEle)&#123;</div><div class="line">           <span class="keyword">if</span>(preEle.nodeType == <span class="number">1</span>)&#123;</div><div class="line">             eleArr.push(preEle);</div><div class="line">           &#125;</div><div class="line">            preEle = preEle.nextSibling;</div><div class="line">         &#125;</div><div class="line">         <span class="keyword">return</span> eleArr;</div><div class="line">       &#125;</div><div class="line">     <span class="comment">// nextAll('myList');</span></div><div class="line"></div><div class="line">     <span class="comment">//所有的兄弟元素</span></div><div class="line">     <span class="keyword">var</span> siblings = <span class="function"><span class="keyword">function</span>(<span class="params">eleId</span>)</span>&#123;</div><div class="line">         <span class="keyword">var</span> all = prevAll(eleId).concat(nextAll(eleId))</div><div class="line">         <span class="built_in">console</span>.dir(all);</div><div class="line">        <span class="keyword">return</span>  all;</div><div class="line">     &#125;</div><div class="line">     siblings(<span class="string">'myList'</span>);</div><div class="line">    </div><div class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="DOM的操作"><a href="#DOM的操作" class="headerlink" title="DOM的操作"></a>DOM的操作</h3><h4 id="creatElement"><a href="#creatElement" class="headerlink" title="creatElement"></a><code>creatElement</code></h4><p><code>document.createElement(tagName)</code>创建一个元素标签</p>
<h4 id="appendChild"><a href="#appendChild" class="headerlink" title="appendChild"></a><code>appendChild</code></h4><ul>
<li><code>node.appendChild(child)</code>将节点插入到父节点的最末尾处，也就是父节点的最后一个子元素</li>
<li>如果被插入的节点已经存在于当前文档的文档树中,则那个节点会首先从原先的位置移除,然后再插入到新的位置.</li>
<li>appendChild 方法会把要插入的这个节点引用作为返回值返回</li>
</ul>
<h4 id="insertBefore"><a href="#insertBefore" class="headerlink" title="insertBefore"></a><code>insertBefore</code></h4><p><code>node.insertBeofore(newNode,referenceNode)</code>在当前节点内的子节点前插入新节点</p>
<h4 id="replaceChild"><a href="#replaceChild" class="headerlink" title="replaceChild"></a><code>replaceChild</code></h4><p><code>parentNode.replaceChild(newChild,oldChild)</code><br>用指定的节点替换当前节点的一个子节点，并返回被替换掉的节点。</p>
<h4 id="设置属性"><a href="#设置属性" class="headerlink" title="设置属性"></a>设置属性</h4><ol>
<li><p><code>setAttribute</code>添加一个属性到元素上，或改变一个已经存在的属性值。这会改变html的内容，直接体现在html中。用<code>setAttribute</code>设置的值只能通过<code>getAttribute</code>来获取，用<code>removeAttribute</code>来进行删除。要注意的是，在ie6,7,8下，不能使用这种方式来修改<code>class</code>，应该使用<code>ele.classNmae = &quot;样式名&quot;</code>来进行修改。 </p>
</li>
<li><p><code>ele.attr = value</code>该方法相当于把元素当成一个对象，然后在对象开辟的内存中添加属性，它不会体验在Html中，而且访问这种形式的内容也只能通过<code>ele.attr</code>。</p>
</li>
</ol>
<h4 id="node-cloneNode-deep"><a href="#node-cloneNode-deep" class="headerlink" title="node.cloneNode(deep)"></a><code>node.cloneNode(deep)</code></h4><p>复制节点,deep为是否深度克隆，默认为false，假如为<code>true</code>，则把元素内部的元素也复制</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></div><div class="line">  <span class="selector-tag">html</span>,</div><div class="line">  <span class="selector-tag">body</span>,</div><div class="line">  <span class="selector-tag">button</span>,</div><div class="line">  <span class="selector-tag">ul</span>,</div><div class="line">  <span class="selector-tag">li</span>&#123;</div><div class="line">    <span class="attribute">margin</span>:<span class="number">0</span>;</div><div class="line">    <span class="attribute">padding</span>: <span class="number">0</span>；</div><div class="line">  &#125;</div><div class="line"> </div><div class="line">  <span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">"oUl"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">id</span>=<span class="string">"li2"</span>&gt;</span>2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">id</span>=<span class="string">"btn1"</span>&gt;</span>在后面添加一个Li<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">id</span>=<span class="string">"btn2"</span>&gt;</span>在后面添加一个Li<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">id</span>=<span class="string">"btn3"</span>&gt;</span>替换id为li2的内容<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">id</span>=<span class="string">"btn4"</span>&gt;</span>使用setAttirbute为ul增加属性<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">  <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> oUl = <span class="built_in">document</span>.getElementById(<span class="string">'oUl'</span>),</div><div class="line">        btn1 = <span class="built_in">document</span>.getElementById(<span class="string">'btn1'</span>),</div><div class="line">        btn2 = <span class="built_in">document</span>.getElementById(<span class="string">'btn2'</span>),</div><div class="line">        btn3 = <span class="built_in">document</span>.getElementById(<span class="string">'btn3'</span>),</div><div class="line">        btn4 = <span class="built_in">document</span>.getElementById(<span class="string">'btn4'</span>),</div><div class="line">        li2 = <span class="built_in">document</span>.getElementById(<span class="string">'li2'</span>);</div><div class="line"></div><div class="line">    <span class="comment">//在后面添加一个Li</span></div><div class="line">    btn1.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">      <span class="keyword">var</span> newList = <span class="built_in">document</span>.createElement(<span class="string">'li'</span>);</div><div class="line">      <span class="keyword">var</span> newTxt = <span class="built_in">document</span>.createTextNode(<span class="string">"4"</span>);</div><div class="line">      newList.appendChild(newTxt);</div><div class="line">      oUl.appendChild(newList);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="built_in">console</span>.log(btn2);</div><div class="line"></div><div class="line">    <span class="comment">//在前面添加一个Li</span></div><div class="line">    btn2.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">      <span class="keyword">var</span> newList = <span class="built_in">document</span>.createElement(<span class="string">'li'</span>);</div><div class="line">      <span class="keyword">var</span> newTxt = <span class="built_in">document</span>.createTextNode(<span class="string">"0"</span>);</div><div class="line">      newList.appendChild(newTxt);</div><div class="line">      oUl.insertBefore(newList,oUl.firstChild);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//替换id为li2的内容</span></div><div class="line">    btn3.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">      <span class="keyword">var</span> newList = <span class="built_in">document</span>.createElement(<span class="string">'li'</span>);</div><div class="line">      <span class="keyword">var</span> newTxt = <span class="built_in">document</span>.createTextNode(<span class="string">"替换"</span>);</div><div class="line">      newList.appendChild(newTxt);</div><div class="line">      oUl.replaceChild(newList,li2);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//使用setAttirbute为元素增加属性</span></div><div class="line">    btn4.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">      oUl.setAttribute(<span class="string">'data'</span>,<span class="string">'setAttribute'</span>);</div><div class="line">    &#125;</div><div class="line"> &#125;</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<h4 id="设置属性-1"><a href="#设置属性-1" class="headerlink" title="设置属性"></a>设置属性</h4><ol>
<li><code>ele.</code></li>
<li><code>setAttirbute</code><br>  <code>getAttriute</code><br>  <code>removeAttribute</code></li>
</ol>
<p><code>Attributs</code>获取元素的属性节点</p>
<ul>
<li><code>attributs.name()</code>获取元素属性节点的名称</li>
<li><code>attributes.value()</code>获取元素属性节点的值<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"> 	&lt;ul id="oUl" class="ulClass"&gt;&lt;/ul&gt;</div><div class="line"> 	&lt;script&gt;</div><div class="line"> 		window.onload = function()&#123;</div><div class="line"> 			var oUl = document.getElementById('oUl');</div><div class="line"> 			console.log(oUl.attributes[0].name+':'+oUl.attributes[0].value); //id:oUl</div><div class="line"> 		&#125;</div><div class="line"> 	&lt;/script&gt;</div><div class="line"> ```` </div><div class="line">`元素.children` 获取第一个子节点</div><div class="line">- 标准下，会包含文本节点</div><div class="line">- 非标准下，只包含元素节点 </div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">`元素.firstElementChild`获取第一个元素类型的子节点</div><div class="line">- 非标准的浏览器下是没有这个属性的</div><div class="line">````javascript</div><div class="line">	var oFirst = oUl.firstElementChild || oUl.firstChild; //兼容写法,但有时会触发错误，当</div><div class="line">	oFirst.style.background = 'red';</div></pre></td></tr></table></figure>
</li>
</ul>
<table>
<thead>
<tr>
<th>属性</th>
<th>功能</th>
<th>标准下</th>
<th>ie6,7</th>
</tr>
</thead>
<tbody>
<tr>
<td>childNodes</td>
<td>获取子节点集合</td>
<td>包含文本和元素类型的节点，和非法嵌套的子节点(ul下的p)</td>
<td>只包含元素类型的节点，ie7以下不会包含非法嵌套的子节点</td>
</tr>
<tr>
<td>children</td>
<td>只包含元素节点列表集合</td>
<td>通用</td>
<td>通用</td>
</tr>
<tr>
<td>firstChild</td>
<td>获取第一个子节点</td>
<td>包含文本类型的节点</td>
<td>只包含元素节点</td>
</tr>
<tr>
<td>firstElementChild</td>
<td>获取元素下第一个元素类型的子节点</td>
<td>元素类型的子节点</td>
<td>不支持</td>
</tr>
<tr>
<td>lastChild</td>
<td>获取最后一个子节点</td>
<td></td>
<td></td>
</tr>
<tr>
<td>lastElementChild</td>
<td>获取最后一个子节点</td>
<td></td>
<td>没有该属性</td>
</tr>
<tr>
<td>nextSibling</td>
<td>当前元素的下一个兄弟节点</td>
<td></td>
<td></td>
</tr>
<tr>
<td>nextlElementSibling</td>
<td>下一个元素节点</td>
<td></td>
<td>没有该属性</td>
</tr>
<tr>
<td>previousSibling</td>
<td>当前元素的上一个兄弟节点</td>
<td></td>
<td></td>
</tr>
<tr>
<td>previousElementSibling</td>
<td>上一个元素节点</td>
<td></td>
<td>没有该属性</td>
</tr>
<tr>
<td>previousElementSibling</td>
<td>上一个元素节点</td>
<td></td>
<td>没有该属性</td>
</tr>
<tr>
<td>parentNode</td>
<td>父级元素节点</td>
<td>通用</td>
<td>通用</td>
</tr>
<tr>
<td>offsetParent</td>
<td>离当前元素最近的有定义过定位属性的父节点</td>
<td>如果没有定义过的话，默认是body</td>
<td>如果当前元素本身设置了定位属性，那么，它默认的offsetParent是html;如果它的父级有触发过layout（如设置了zoom），那么offsetParent的值是这个父级</td>
</tr>
</tbody>
</table>
<h1 id="获取元素的宽高"><a href="#获取元素的宽高" class="headerlink" title="获取元素的宽高"></a>获取元素的宽高</h1><p><code>offsetLeft[top]</code>当前元素距离定位父级的距离</p>
<h1 id="节点操作方式"><a href="#节点操作方式" class="headerlink" title="节点操作方式"></a>节点操作方式</h1><p>参考资料</p>
<ul>
<li>珠峰培训</li>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Node/appendChild" target="_blank" rel="external">Node.appendChild</a></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[banner design]]></title>
      <url>weison.org/2016/04/09/banner-design/</url>
      <content type="html"><![CDATA[<h1 id="分析需求"><a href="#分析需求" class="headerlink" title="分析需求"></a>分析需求</h1><h2 id="背景，比如这个banner因为什么原因而产生的"><a href="#背景，比如这个banner因为什么原因而产生的" class="headerlink" title="背景，比如这个banner因为什么原因而产生的"></a>背景，比如这个banner因为什么原因而产生的</h2><ol>
<li>尺寸大小</li>
</ol>
<h2 id="文案内容"><a href="#文案内容" class="headerlink" title="文案内容"></a>文案内容</h2><ol>
<li>想达到的目标</li>
<li>用户群体</li>
</ol>
<h2 id="摆放位置"><a href="#摆放位置" class="headerlink" title="摆放位置"></a>摆放位置</h2><ol>
<li>端口，pc/mobile/线下</li>
<li>注意是否跟它的周边环境是否协调，如是否跟周围的颜色协调，避免视觉刺激，进而提升视觉感受</li>
</ol>
<h2 id="需求方要求"><a href="#需求方要求" class="headerlink" title="需求方要求"></a>需求方要求</h2><ol>
<li>尺寸</li>
<li>文案</li>
<li>需要添加的图形元素</li>
</ol>
<h1 id="表现技法"><a href="#表现技法" class="headerlink" title="表现技法"></a>表现技法</h1><p>参考资料</p>
<ol>
<li><a href="http://www.chuanke.com/v4272850-156609-625105.html" target="_blank" rel="external">PC端 百度传课-需求解析和技法表现</a></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[瀑布流布局]]></title>
      <url>weison.org/2016/04/06/waterfall/</url>
      <content type="html"></content>
    </entry>
    
    <entry>
      <title><![CDATA[页面布局]]></title>
      <url>weison.org/2016/04/02/css-layout/</url>
      <content type="html"><![CDATA[<p>所谓布局就是浏览器以正确的大小在内容放在正确的位置上。</p>
<h1 id="影响布局的属性"><a href="#影响布局的属性" class="headerlink" title="影响布局的属性"></a>影响布局的属性</h1><h2 id="display呈现方式"><a href="#display呈现方式" class="headerlink" title="display呈现方式"></a><code>display</code>呈现方式</h2><ol>
<li>设置元素的显示方式</li>
<li>display:block|inline-block|inline|none</li>
</ol>
<table>
<thead>
<tr>
<th>属性</th>
<th>特征</th>
<th>默认元素</th>
</tr>
</thead>
<tbody>
<tr>
<td>block</td>
<td>可设宽高，默认宽度为父级元素的宽度 独占一行</td>
<td>div,p,h1-h6</td>
</tr>
<tr>
<td>inline</td>
<td>设置宽高无效，宽度为内部内容的宽度，文本流形式</td>
<td>a,span,img</td>
</tr>
<tr>
<td>inline-block</td>
<td>可设宽高，默认为内部内容的宽度，文本流形式,注意假如inline-block内部内容的宽度加上这行内容的宽度超过整行的宽度时，inline-block元素会独占一行</td>
<td>input,textarea,select,button</td>
</tr>
<tr>
<td>none</td>
<td>设置元素不可显示</td>
</tr>
</tbody>
</table>
<p>display:none与visibility:hidden的区别</p>
<ol>
<li>display为none时，相当于脱离了文本流，后面的元素会占据它原来的位置</li>
<li>visibility：hidden，它只是隐藏了内容，但还是会占据着它原来的位置<h2 id="position定位"><a href="#position定位" class="headerlink" title="position定位"></a><code>position</code>定位</h2></li>
<li>通过top,right,bottom,left设置元素边缘距离参照物的距离，z-index设置层级</li>
<li>当同时设置2个相对的值时而且未设置宽高值的情况,如top和bottom值时<br>|relative|会根据先后定位顺序来覆盖|<br>|absolute或fixed|会改变元素的尺寸直到符合规则|<br>而如果设置了宽高，则按定义的顺序来，如先定义left,后定义right,则使用right<h3 id="relative-相对定位"><a href="#relative-相对定位" class="headerlink" title="relative 相对定位"></a><code>relative</code> 相对定位</h3>相对于其自身的原来位置的距离</li>
</ol>
<h3 id="absolute-绝对定位"><a href="#absolute-绝对定位" class="headerlink" title="absolute 绝对定位"></a><code>absolute</code> 绝对定位</h3><p>相对于其最近定位了positon:absolute|fixed的元素的距离</p>
<h3 id="fixed-固定定位"><a href="#fixed-固定定位" class="headerlink" title="fixed  固定定位"></a><code>fixed</code>  固定定位</h3><p>相对于浏览器来进行定位</p>
<h3 id="sticky-粘性布局"><a href="#sticky-粘性布局" class="headerlink" title="sticky 粘性布局"></a><code>sticky</code> 粘性布局</h3><h2 id="BFC"><a href="#BFC" class="headerlink" title="BFC"></a>BFC</h2><h1 id="常见布局"><a href="#常见布局" class="headerlink" title="常见布局"></a>常见布局</h1><h2 id="块壮元素的水平居中"><a href="#块壮元素的水平居中" class="headerlink" title="块壮元素的水平居中"></a>块壮元素的水平居中</h2><p>1.添加margin: 0 auto，属性后，浏览器就会平分剩余宽度的内容，从而实现水平居中<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"content"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h1 id="常见的兼容问题"><a href="#常见的兼容问题" class="headerlink" title="常见的兼容问题"></a>常见的兼容问题</h1>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[内存泄露]]></title>
      <url>weison.org/2016/04/01/memory-leak/</url>
      <content type="html"><![CDATA[<p>由于程序设计的缺陷，让我们不需要的内容不受控制的驻留在内存当中，造成了资源的浪费。js的内存泄露很大一部分由于引用清理了，内存没清除掉</p>
<p>内存模型分为两部分，堆和栈，堆用于存放复杂类型的数据，栈用于存放基本类型的数据</p>
<h1 id="检查工具"><a href="#检查工具" class="headerlink" title="检查工具"></a>检查工具</h1><h2 id="chrome-timeline"><a href="#chrome-timeline" class="headerlink" title="chrome timeline"></a>chrome timeline</h2><h2 id="chrome-timeline-cg"><a href="#chrome-timeline-cg" class="headerlink" title="chrome timeline cg"></a>chrome timeline cg</h2><h2 id="chrome-profile-Take-Heap-Snapshot"><a href="#chrome-profile-Take-Heap-Snapshot" class="headerlink" title="chrome profile Take Heap Snapshot"></a>chrome profile Take Heap Snapshot</h2><h1 id="如何避免内存泄露"><a href="#如何避免内存泄露" class="headerlink" title="如何避免内存泄露"></a>如何避免内存泄露</h1><h2 id="避免使用eval，它可以把字符当成函数来调用，但它的作用域全都是挂在window的全局下面的"><a href="#避免使用eval，它可以把字符当成函数来调用，但它的作用域全都是挂在window的全局下面的" class="headerlink" title="避免使用eval，它可以把字符当成函数来调用，但它的作用域全都是挂在window的全局下面的"></a>避免使用eval，它可以把字符当成函数来调用，但它的作用域全都是挂在window的全局下面的</h2><h2 id="谨慎使用全局全量，尤其是全局变量存在DOM引用"><a href="#谨慎使用全局全量，尤其是全局变量存在DOM引用" class="headerlink" title="谨慎使用全局全量，尤其是全局变量存在DOM引用"></a>谨慎使用全局全量，尤其是全局变量存在DOM引用</h2><h2 id="绑定事件的时候，要注意当DOM被移除时解绑事件"><a href="#绑定事件的时候，要注意当DOM被移除时解绑事件" class="headerlink" title="绑定事件的时候，要注意当DOM被移除时解绑事件"></a>绑定事件的时候，要注意当DOM被移除时解绑事件</h2><h2 id="注意闭包和循环引用时容易出现问题"><a href="#注意闭包和循环引用时容易出现问题" class="headerlink" title="注意闭包和循环引用时容易出现问题"></a>注意闭包和循环引用时容易出现问题</h2>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[JavaScript高级程序设计（第3版）]]></title>
      <url>weison.org/2016/03/30/Professional-JavaScript-for-Web/</url>
      <content type="html"><![CDATA[<p>JavaScript高级程序设计（第3版） [美] Nicholas C. Zakas<br><a id="more"></a></p>
<h1 id="javascript简介"><a href="#javascript简介" class="headerlink" title="javascript简介"></a>javascript简介</h1><p>javascript包含ECMAScript,DOM,BOM</p>
<h2 id="ECMAScript规定了"><a href="#ECMAScript规定了" class="headerlink" title="ECMAScript规定了"></a>ECMAScript规定了</h2><ol>
<li>语法</li>
<li>类型</li>
<li>语句</li>
<li>关键字</li>
<li>保留字</li>
<li>操作符</li>
<li>对象</li>
</ol>
<h2 id="DOM-Document-Object-Model-文档对象模型"><a href="#DOM-Document-Object-Model-文档对象模型" class="headerlink" title="DOM (Document Object Model)文档对象模型"></a>DOM (Document Object Model)文档对象模型</h2><p>它把HTML的每个组成部分看成某个类型的节点,这些节点又包含不同类型的数据。借助DOM提供的API（Application Programming Interface）可以增加(createElement)、删除（removeChild）、替换(replaceChild)或修改任何节点。</p>
<h2 id="BOM-Browser-Object-Model"><a href="#BOM-Browser-Object-Model" class="headerlink" title="BOM (Browser Object Model)"></a>BOM (Browser Object Model)</h2><p>人们习惯上也把所有针对浏览器的JavaScript 扩展算作BOM的一部分</p>
<ol>
<li>弹出新浏览器窗口的功能window.open()</li>
<li>移动、缩放和关闭(window.close())浏览器窗口的功能</li>
<li>像XMLHttpRequest 和IE 的ActiveXObject 这样的自定义对象。</li>
</ol>
<h1 id="在HTML-中使用JavaScript"><a href="#在HTML-中使用JavaScript" class="headerlink" title="在HTML 中使用JavaScript"></a>在HTML 中使用JavaScript</h1><h2 id="script元素"><a href="#script元素" class="headerlink" title="script元素"></a><code>script</code>元素</h2><ol>
<li>默认情况下，浏览器会根据script的先后顺序来加载</li>
<li><code>async</code>和<code>defer</code>都只能应用于外部引用的js</li>
<li><code>async</code>加载和渲染后续文档元素的过程将和 script.js 的加载与执行并行进行（异步）</li>
<li><code>defer</code> 同时加载后续内容及js文件，但执行要在所有元素元素解释完成后,遇到<code>&lt;/html&gt;</code>标签后执行，<code>DOMContentLoaded</code>事件触发前执行。</li>
<li>外部javascript应带有.js后缀。但这个后缀不是必须的，因为浏览器不会检测包含Javascript的文件扩展名。这样一来，使用jsp,php或者其它服务器端口语言动态生成的js代码也就成为可能。但必须确保服务器能返回正确的MIME类型.</li>
</ol>
<h3 id="延迟脚本defer"><a href="#延迟脚本defer" class="headerlink" title="延迟脚本defer"></a>延迟脚本<code>defer</code></h3><p>1.考虑默认情况下，js需要下载并执行完后再加载下面的内容(阻塞下载)，如果将script放在头部，那么在js下载的时候，页面会一片空白（页面会在遇到body时才开始渲染页面）。在现实当中，延迟脚本并不一定会按照顺序执行，也不一定会在DOMContentLoaded 事件触发前执行，因此最好只包含一个延迟脚本。</p>
<ol>
<li>不保证按照指定它们的先后顺序执行，因为要确保两个js互不依赖</li>
<li>指定async 属性的目的是不让页面等待两个脚本下载和执行，从而异步加载页面其他内容。<br>为此，建议异步脚本不要在加载期间修改DOM</li>
</ol>
<h2 id="嵌入代码与外部文件"><a href="#嵌入代码与外部文件" class="headerlink" title="嵌入代码与外部文件"></a>嵌入代码与外部文件</h2><p>虽然html没有硬性规定不可以在html中包含Js,不过考虑到以下优点，还是建议把js放在一个独立的文件中</p>
<ol>
<li>可维护性，如果将js遍及到不同页面，这样维护起来很麻烦。</li>
<li>可缓存，浏览器能够根据具体的设置缓存链接的所有外部JavaScript 文件。当两个页面使用同一份文件时，那么浏览器会只下载一次。加快网页加载速度</li>
</ol>
<h2 id="文档模式"><a href="#文档模式" class="headerlink" title="文档模式"></a>文档模式</h2><p>对于标准模式，可以通过使用下面任何一种文档类型来开启：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- HTML 4.01 严格型 --&gt;</span></div><div class="line"><span class="meta">&lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN"</span></div><div class="line">"http://www.w3.org/TR/html4/strict.dtd"&gt;</div><div class="line"><span class="comment">&lt;!-- XHTML 1.0 严格型 --&gt;</span></div><div class="line"><span class="meta">&lt;!DOCTYPE html PUBLIC</span></div><div class="line">"-//W3C//DTD XHTML 1.0 Strict//EN"</div><div class="line">"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd"&gt;</div><div class="line"><span class="comment">&lt;!-- HTML 5 --&gt;</span></div><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div></pre></td></tr></table></figure></p>
<!-- HTML 4.01 过渡型 -->
<p>&lt;!DOCTYPE HTML PUBLIC<br>“-//W3C//DTD HTML 4.01 Transitional//EN”<br>“<a href="http://www.w3.org/TR/html4/loose.dtd&quot;&gt;" target="_blank" rel="external">http://www.w3.org/TR/html4/loose.dtd&quot;&gt;</a><br><!-- HTML 4.01 框架集型 --><br>&lt;!DOCTYPE HTML PUBLIC<br>“-//W3C//DTD HTML 4.01 Frameset//EN”<br>“<a href="http://www.w3.org/TR/html4/frameset.dtd&quot;&gt;" target="_blank" rel="external">http://www.w3.org/TR/html4/frameset.dtd&quot;&gt;</a><br><!-- XHTML 1.0 过渡型 --><br>&lt;!DOCTYPE html PUBLIC<br>“-//W3C//DTD XHTML 1.0 Transitional//EN”<br>“<a href="http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;" target="_blank" rel="external">http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;</a><br><!-- XHTML 1.0 框架集型 --><br>&lt;!DOCTYPE html PUBLIC<br>“-//W3C//DTD XHTML 1.0 Frameset//EN”<br>“<a href="http://www.w3.org/TR/xhtml1/DTD/xhtml1-frameset.dtd&quot;&gt;" target="_blank" rel="external">http://www.w3.org/TR/xhtml1/DTD/xhtml1-frameset.dtd&quot;&gt;</a><br><figure class="highlight clean"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">## noscript</div><div class="line">当js不被支持或被禁用时，显示noscript里的内容</div><div class="line">````javascript</div><div class="line">&lt;noscript&gt;</div><div class="line">	&lt;p&gt;本页面需要浏览器支持（启用）JavaScript。&lt;/p&gt;</div><div class="line">&lt;/noscript&gt;</div></pre></td></tr></table></figure></p>
<h1 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h1><h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><h3 id="区分大小写"><a href="#区分大小写" class="headerlink" title="区分大小写"></a>区分大小写</h3><p>text 和 Text 是不同的变量</p>
<h3 id="标识符"><a href="#标识符" class="headerlink" title="标识符"></a>标识符</h3><p>标识符是指变量，函数、属性或者函数的参数名称。规则如何</p>
<ol>
<li>首字符以字母，_或$开头；</li>
<li>其他字符可以是字母、下划线、$或数字</li>
<li>按照惯例，命名方式应该采用驼峰式命名(newFun,myCar)</li>
</ol>
<h3 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h3><h4 id="单行"><a href="#单行" class="headerlink" title="单行"></a>单行</h4><p>以两个斜杠开头<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 单行注释</span></div></pre></td></tr></table></figure></p>
<h4 id="多行"><a href="#多行" class="headerlink" title="多行"></a>多行</h4><p>以一个斜杠和一个星号（/<em>）开头，以一个星号和一个斜杠（</em>/）,第2，第3行只是为了添加可读性而添加<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line">* 这是一个多行</div><div class="line">* （块级）注释</div><div class="line">*/</div></pre></td></tr></table></figure></p>
<h4 id="严格模式-quot-user-strict-quot"><a href="#严格模式-quot-user-strict-quot" class="headerlink" title="严格模式&quot;user strict&quot;"></a>严格模式<code>&quot;user strict&quot;</code></h4><p>它是一个编译指示，用于告诉浏览器切换到严格模式.一些不确定的行为将得到处理，某些不安全的操作将会抛错</p>
<ol>
<li>它可以在整个Js文件内使用 “user strict”</li>
<li>也可以单独在函数内使用<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	<span class="string">"user strict"</span>;</div><div class="line">	<span class="comment">//do some thing</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="语句"><a href="#语句" class="headerlink" title="语句"></a>语句</h3><p>javascript以”;”代表一个语句的结束。为了</p>
<ol>
<li>避免压缩时出错</li>
<li>不用系统在解释时需要推测是否要加“;”，提高性能</li>
<li>开发人员可放心地删除多余的空格</li>
</ol>
<h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><p>变量属于松散类型的数据，可以用来保存任何类型的数据。它不过是一个用于保存值的点位符而已。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> message; <span class="comment">//未经初始化的的变量，值为undefined</span></div></pre></td></tr></table></figure></p>
<h3 id="使用var-声明的变量，只会存在于它的作用域下"><a href="#使用var-声明的变量，只会存在于它的作用域下" class="headerlink" title="使用var 声明的变量，只会存在于它的作用域下"></a>使用var 声明的变量，只会存在于它的作用域下</h3><ol>
<li>如果把变量声明在函数内，那么这个变量将会在退出函数时(执行完)时失效<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	<span class="keyword">var</span> a = <span class="number">10</span>;</div><div class="line">&#125;</div><div class="line">fn();</div><div class="line"><span class="built_in">console</span>.log(a);</div></pre></td></tr></table></figure>
</li>
</ol>
<figure class="highlight clean"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">### 没有使用var声明的变量就会变成全局变量</div><div class="line">变量将会在函数执行完一次后生效</div><div class="line">````javascript</div><div class="line">function fn1()&#123;</div><div class="line">	a = <span class="number">10</span>;</div><div class="line">&#125;</div><div class="line">fn1();</div><div class="line">console.log(a); <span class="comment">// 10</span></div></pre></td></tr></table></figure>
<ul>
<li>不过为了避免全局污染，造成代码难以维护还是不建议使用全局变量的定义</li>
<li>给未声明的变量赋值，严格模式下会报错ReferenceError</li>
</ul>
<h3 id="同时声明多个变量"><a href="#同时声明多个变量" class="headerlink" title="同时声明多个变量"></a>同时声明多个变量</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> a = <span class="number">10</span>,</div><div class="line">    b = <span class="number">20</span>,</div><div class="line">    c = <span class="string">'text'</span>;</div></pre></td></tr></table></figure>
<h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><h3 id="基本类型"><a href="#基本类型" class="headerlink" title="基本类型"></a>基本类型</h3><ol>
<li>undefined 未定义</li>
<li>null 空</li>
<li>number 数字</li>
<li>string 字符串</li>
<li>boolean 布尔值</li>
</ol>
<h3 id="复杂数据类型"><a href="#复杂数据类型" class="headerlink" title="复杂数据类型"></a>复杂数据类型</h3><ol>
<li>object </li>
</ol>
<h3 id="typeof-判断数据类型"><a href="#typeof-判断数据类型" class="headerlink" title="typeof 判断数据类型"></a>typeof 判断数据类型</h3><ol>
<li>undefined 未定义</li>
<li>boolean 布尔值</li>
<li>string 字符串</li>
<li>number 数字</li>
<li>object 空或是对象</li>
<li>function 函数</li>
</ol>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://segmentfault.com/q/1010000000640869" target="_blank" rel="external">defer和async的区别</a></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[cookie]]></title>
      <url>weison.org/2016/03/27/cookie/</url>
      <content type="html"></content>
    </entry>
    
    <entry>
      <title><![CDATA[new Date 系统时间对象]]></title>
      <url>weison.org/2016/03/23/new-Date/</url>
      <content type="html"><![CDATA[<p>通过new Date来获取系统当前时间（本机 时间）<br><a id="more"></a></p>
<h4 id="时间属性"><a href="#时间属性" class="headerlink" title="时间属性"></a>时间属性</h4><h5 id="getFullYear-年份"><a href="#getFullYear-年份" class="headerlink" title="getFullYear() 年份"></a><code>getFullYear()</code> 年份</h5><h5 id="getMonth-月份"><a href="#getMonth-月份" class="headerlink" title="getMonth() 月份"></a><code>getMonth()</code> 月份</h5><p>返回从0-11的数字，它是把我们的一月份当成0了</p>
<h5 id="getDate-几号"><a href="#getDate-几号" class="headerlink" title="getDate() 几号"></a><code>getDate()</code> 几号</h5><h5 id="getDay-星期几"><a href="#getDay-星期几" class="headerlink" title="getDay() 星期几"></a><code>getDay()</code> 星期几</h5><p>返回从0-6的数字，0代表星期天</p>
<h5 id="getHours-小时"><a href="#getHours-小时" class="headerlink" title="getHours()  小时"></a><code>getHours()</code>  小时</h5><h5 id="getMinutes-分钟"><a href="#getMinutes-分钟" class="headerlink" title="getMinutes() 分钟"></a><code>getMinutes()</code> 分钟</h5><h5 id="getSeconds-秒数"><a href="#getSeconds-秒数" class="headerlink" title="getSeconds() 秒数"></a><code>getSeconds()</code> 秒数</h5><h5 id="getTime"><a href="#getTime" class="headerlink" title="getTime()"></a><code>getTime()</code></h5><p>返回从1970年1月1号 0时0分0秒到现在的时间点，单位是毫秒，一般用于检测性能，从开始加载到结束一共用了多长时间</p>
<h4 id="setDate"><a href="#setDate" class="headerlink" title="setDate()"></a><code>setDate()</code></h4><p>设定日期是当前月的几号<br><figure class="highlight xml"><figcaption><span>javascript</span><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Date/setDate" target="_blank" rel="external">mozilla Date.prototype.setDate</a></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">	<span class="keyword">var</span> date = <span class="keyword">new</span> <span class="built_in">Date</span>();</div><div class="line">	date.setDate(<span class="number">15</span>); <span class="comment">//把日期设置为15号</span></div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line"><span class="keyword">var</span> time= <span class="keyword">new</span> <span class="built_in">Date</span>(),</div><div class="line">	year  = time.getFullYear(),</div><div class="line">	month = time.getMonth()+<span class="number">1</span>,</div><div class="line">	date  = time.getDate(),</div><div class="line">	week  = time.getDay(),</div><div class="line">	hour  = time.getHours(),</div><div class="line">	min   = time.getMinutes(),</div><div class="line">	sec   = time.getSeconds();</div><div class="line">	<span class="keyword">switch</span>(week)&#123;</div><div class="line">		<span class="keyword">case</span> <span class="number">0</span> : week = <span class="string">'星期日'</span>; <span class="keyword">break</span>;</div><div class="line">		<span class="keyword">case</span> <span class="number">1</span> : week = <span class="string">'星期一'</span>; <span class="keyword">break</span>;</div><div class="line">		<span class="keyword">case</span> <span class="number">2</span> : week = <span class="string">'星期二'</span>; <span class="keyword">break</span>;</div><div class="line">		<span class="keyword">case</span> <span class="number">3</span> : week = <span class="string">'星期三'</span>; <span class="keyword">break</span>;</div><div class="line">		<span class="keyword">case</span> <span class="number">4</span> : week = <span class="string">'星期四'</span>; <span class="keyword">break</span>;</div><div class="line">		<span class="keyword">case</span> <span class="number">5</span> : week = <span class="string">'星期五'</span>; <span class="keyword">break</span>;</div><div class="line">		<span class="keyword">case</span> <span class="number">6</span> : week = <span class="string">'星期六'</span>; <span class="keyword">break</span>;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">//当位数不足时，在前面补0</span></div><div class="line">	<span class="keyword">var</span> doubleTime = <span class="function"><span class="keyword">function</span>(<span class="params">time</span>)</span>&#123;</div><div class="line">		<span class="keyword">return</span> time &lt; <span class="number">10</span> ?  <span class="string">'0'</span> + time : <span class="string">''</span> + time;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">var</span> str   = year + <span class="string">'年'</span> + </div><div class="line">				month + <span class="string">'月'</span> +</div><div class="line">				doubleTime(date) + <span class="string">'日 '</span> + </div><div class="line">				doubleTime(hour) + <span class="string">':'</span> + </div><div class="line">				doubleTime(min) + <span class="string">':'</span> + </div><div class="line">				doubleTime(sec) + <span class="string">' '</span> +</div><div class="line">				week;</div><div class="line"><span class="built_in">console</span>.log(str); <span class="comment">// 2016年7月24日 01:38:01 星期日</span></div></pre></td></tr></table></figure>
<h4 id="倒计时"><a href="#倒计时" class="headerlink" title="倒计时"></a>倒计时</h4><h5 id="在new-Date-中放入特定化的时间点，就会可以获取以字符串形式的时间点"><a href="#在new-Date-中放入特定化的时间点，就会可以获取以字符串形式的时间点" class="headerlink" title="在new Date()中放入特定化的时间点，就会可以获取以字符串形式的时间点"></a>在<code>new Date()</code>中放入特定化的时间点，就会可以获取以字符串形式的时间点</h5><ol>
<li><p>数字形式 <code>new Date(2016,6,25,9,48,12)</code><br>2016年7月25号 9点48分12秒,要注意的是月份是从0开始算的，所以加1 </p>
</li>
<li><p>字符串形式 new Date(‘june 10,2016 14:15:16’)<br>2016年6月10号 14点15分16秒</p>
</li>
</ol>
<ul>
<li>一月：January </li>
<li>二月：February</li>
<li>三月：March</li>
<li>四月：April</li>
<li>五月：May </li>
<li>六月：June </li>
<li>七月：July</li>
<li>八月：August </li>
<li>九月：September </li>
<li>十月：October </li>
<li>十一月：November</li>
<li>十二月：December</li>
</ul>
<h5 id="时间转换"><a href="#时间转换" class="headerlink" title="时间转换"></a>时间转换</h5><ul>
<li>天 <code>Math.floor(t/86400)</code></li>
<li>时 <code>Math.floor(t%86400/3600)</code></li>
<li>分 <code>Math.floor(t%86400%3600/60)</code></li>
<li>秒 <code>t%60</code></li>
</ul>
<h4 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h4><ol>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Date/setDate" target="_blank" rel="external">setDate方法</a></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[number 数字类型]]></title>
      <url>weison.org/2016/03/23/number/</url>
      <content type="html"><![CDATA[<h3 id="isNaN-检测类型是否非数字"><a href="#isNaN-检测类型是否非数字" class="headerlink" title="isNaN() 检测类型是否非数字"></a><code>isNaN()</code> 检测类型是否非数字</h3><ul>
<li>当内容是数字时，返回false,当内容是非数字时，返回true</li>
<li>0也是数字，所以也会返回false</li>
<li>注意NaN是不等于NaN的<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">isNaN</span>(<span class="number">123</span>); <span class="comment">// =&gt; 假如是数字，返回fasle</span></div><div class="line"><span class="built_in">isNaN</span>(<span class="number">0</span>); <span class="comment">// =&gt; 0也是数字，返回false</span></div><div class="line"><span class="built_in">isNaN</span>(<span class="string">'a'</span>); <span class="comment">// =&gt; 假如非数字，返回true</span></div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><p><a href="http://www.w3school.com.cn/jsref/jsref_isNaN.asp" target="_blank" rel="external">w3cSchool-JavaScript isNaN() 函数</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[从输入URL到网页呈现，发生了什么]]></title>
      <url>weison.org/2016/03/22/form-uri-to-page/</url>
      <content type="html"><![CDATA[<p>用户派浏览器去特定的地址（url）去取货（请求资源），浏览器收到地址后利用自己的知识找到它的门牌号码(ip地址)，然后帮用户打包好信息，通过各种手段（get,post,trace…）等方法跟主机进行3次握手(问：是否可以连接？答：可以。浏览器说那就发送了)。主人收到消息后，通过分析信息（cookie,请求的资源地址…）给信息打包给浏览器，通过获取本地文件是否存在（cache-control,expirse）或浏览器上的标识（etag,last-Modified)来让浏览器直接使用它原有的资源，浏览器接受到资源后，从上到下开始下载资源，并且是html和css并行下载与渲染，并遇到js时，为了不用重复搬砖（重新渲染DOM），所以它会让js下载完成后继续下载，然后再渲染页面。</p>
<a id="more"></a>
<h1 id="web本质"><a href="#web本质" class="headerlink" title="web本质"></a>web本质</h1><ol>
<li>浏览器向服务器请求资源</li>
<li>浏览器查找远程服务器，把包用户的请求并发送</li>
<li>服务器根据用户请求的资源和附带参数，配合自身逻辑生成相关内容发到浏览器</li>
<li>浏览器解决资源，呈现结果</li>
</ol>
<h1 id="详细过程"><a href="#详细过程" class="headerlink" title="详细过程"></a>详细过程</h1><h2 id="url-gt-host"><a href="#url-gt-host" class="headerlink" title="url -&gt; host"></a>url -&gt; host</h2><ul>
<li><p>一个网页访问的本质是向服务器请求资源，而这些资源要先找到网络上的服务器的地址才行，而网络主机的定位是通过IP地址</p>
</li>
<li><p>而我们一般情况下是通过域名来访问的，所以要依赖DNS（Domain Name System），来把IP和域名一一对应，这个就像一个人对应一个身份证号码一样</p>
</li>
</ul>
<ol>
<li>浏览器缓存，如果之前访问过该主机（不是url指定的资源），浏览器会缓存DNS一段时间，这时间由浏览器自行决定的</li>
<li>系统缓存，如果浏览器没有，就会做系统调用（本机），获取系统内的缓存数据</li>
<li>路由器缓存，如果系统缓存没有，查询路由器缓存</li>
<li>ISP DNS缓存，如果路由器缓存没有，服务商（电信，网通等）服务器查找</li>
<li>递归搜索，如果服务商也没有，从顶级域名服务器的根服务器开始递归查询，这个肯定能找到</li>
</ol>
<h2 id="创建http打包请求"><a href="#创建http打包请求" class="headerlink" title="创建http打包请求"></a>创建http打包请求</h2><p><img src="http://7xovt0.com1.z0.glb.clouddn.com/blog2016-03-23_002816.png" alt="浏览器会帮我们一次过打包请求"></p>
<h2 id="浏览器发送请求，创建TCP链接"><a href="#浏览器发送请求，创建TCP链接" class="headerlink" title="浏览器发送请求，创建TCP链接"></a>浏览器发送请求，创建TCP链接</h2><ul>
<li>浏览器一般都是通过TCP来传输数据的，UDP不可靠，所以响应信息要么就是全的，要么就得不到 </li>
<li>TCP三次握手，浏览器问服务器能连上？服务器说能连上，然后浏览器就说那我就发送请求啦~<br>发送请求的方式<ul>
<li><code>get</code>     获取数据</li>
<li><code>post</code>    向服务器发送数据，如表单请求</li>
<li><code>head</code>    只获取响应头，不取其它响应内容</li>
<li><code>trace</code>   告诉用户，从本地到服务器上经过了哪些节点</li>
<li><code>options</code> 向服务器询问哪几种请求方式</li>
<li><code>put</code>     在服务器上放一条资源</li>
<li><code>delete</code>  删除服务器上的资源</li>
</ul>
</li>
</ul>
<h2 id="服务器处理请求"><a href="#服务器处理请求" class="headerlink" title="服务器处理请求"></a>服务器处理请求</h2><p>   主机上运行多个程度，通过监听特定的端口来处理请求，服务器交换哪个程序来处理请求就是由端口号来决定的</p>
<ul>
<li>htpp  : 80</li>
<li>https : 443</li>
<li>ftp   : 21</li>
<li><p>ssh   : 22</p>
<p>影响服务器反馈结果的因素</p>
</li>
<li>请求的方式，如get和post反馈的结果也不一样</li>
<li>请求的地址，如baidu.com/a.html 与baidu.com/b.html</li>
<li>query string,传递的参数(问号后的内容)，如baidu.com/?name=xxx</li>
<li>cookie，用户身份的识别</li>
<li>服务器配置项</li>
<li>动态语言代码逻辑，（java或Php返回的内容）</li>
</ul>
<h2 id="服务器响应请求，发送浏览器"><a href="#服务器响应请求，发送浏览器" class="headerlink" title="服务器响应请求，发送浏览器"></a>服务器响应请求，发送浏览器</h2><p>   服务器响应的内容：响应头+响应文本<br>   <img src="http://7xovt0.com1.z0.glb.clouddn.com/blog2016-03-23_011053.png" alt="响应头"><br>   <img src="http://7xovt0.com1.z0.glb.clouddn.com/blog2016-03-23_011459.png" alt="响应文本"></p>
<h3 id="常见状态码"><a href="#常见状态码" class="headerlink" title="常见状态码"></a>常见状态码</h3><ul>
<li><code>200</code> 请求成功</li>
<li><code>301</code> 资源或页面已被永久移除</li>
<li><code>302</code> 资源被临时移除</li>
<li><code>304</code> 请求资源未修改</li>
<li><code>403</code> 无访问权限</li>
<li><code>404</code> 请求资源不存在</li>
<li><code>500</code> 服务器内部错误</li>
<li><code>502</code> 找不到主机（区别于404,404是可以找到主机，当没找到对应资源）</li>
</ul>
<h3 id="使用缓存"><a href="#使用缓存" class="headerlink" title="使用缓存"></a>使用缓存</h3><ol>
<li>本地缓存<br><img src="http://7xovt0.com1.z0.glb.clouddn.com/blogQQ%E6%88%AA%E5%9B%BE20160324002050.jpg" alt="1"><ul>
<li>expires 有效期，在这个时间前都可以直接使用本地缓存文件，不过这个时间指的是本地时间</li>
<li>cache-control http1.1的内容，相对时间，秒数，表示从多久内有效</li>
</ul>
</li>
<li>服务器验证<ul>
<li>last-Modified 最后修改时间<br><img src="http://7xovt0.com1.z0.glb.clouddn.com/blog12311.jpg" alt="服务器验证"><br>当本地的expries或cache-control时间过期时，服务器就会对比last-Modified时间，如果这个时间比本地的创建时间前，服务器就会发送个304状态（代表没修改过），则继续使用缓存</li>
<li>etags 是通过hash算法（一种类似于md5的加密方式），根据内容生成一个特定的值，然后通过碰撞（服务器明文加密后 和 本地的通过一样的算法加密出来的文件对比），如果一致，则继续使用缓存文件</li>
</ul>
</li>
</ol>
<h2 id="渲染页面"><a href="#渲染页面" class="headerlink" title="渲染页面"></a>渲染页面</h2><p>   1.从上到下渲染页面，下载与渲染是同步进行的，并不会等页面下载完再渲染，可以通过模拟网速来查看渲染过程<br>   <img src="http://7xovt0.com1.z0.glb.clouddn.com/blog2016-03-23_012219.png" alt="模拟网络慢，查看加载流程"></p>
<ol>
<li>DOM Tree和CSS Tree是边解释边生成页面的，所以会随着下面的内容不断调整<ul>
<li>在渲染的时候，会保证上面的部分都下载完成（标签解释完），图片、视频会另外下载</li>
<li>所谓的下载下来，并不是指图片下载完成，只不过是指下载了这个标签结构(<img src="a.jpg">，而不是下载了a.jpg)</li>
<li>同一域名的并行下载数限制，这也是为什么有些网站需要把图片放在另外的域名下的原因，通过放在不同的域名来提高并行下载数</li>
<li>当解释遇到javascript的时间，因为js有操作DOM的作用，为了保证DOM的稳定性，避免刚渲染完的DOM树因为js的修改而需要重新渲染，所以js会采用阻塞性下载，不允许下载其它内容（现代浏览器一般都会开另外一个线程来处理js文件）</li>
<li>遇到AJAX时，也会当拿到结果后再执行回调函数</li>
</ul>
<ol>
<li>样式表下载完成后，会和以前下载的所有样式进行合并解释完成后，再重新渲染所有元素（包括已经渲染的）。<br>这也是为什么css要放在head前面（css下载完成要跟之前的样式一起解释，然后再渲染一次，这样就会造成反复渲染），js放在后面的原因（避免阻塞，出现白屏）<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">css1 css2 dom 下载完css1,css2合并后渲染DOM</div><div class="line">css1 dom css2 下载完css1渲染dom，下载完css2再合并样式，再渲染多一个dom</div></pre></td></tr></table></figure>
</li>
</ol>
</li>
</ol>
<h2 id="处理页面嵌入资源和异步请求"><a href="#处理页面嵌入资源和异步请求" class="headerlink" title="处理页面嵌入资源和异步请求"></a>处理页面嵌入资源和异步请求</h2><h2 id="非常规的响应处理"><a href="#非常规的响应处理" class="headerlink" title="非常规的响应处理"></a>非常规的响应处理</h2><h1 id="备忘"><a href="#备忘" class="headerlink" title="备忘"></a>备忘</h1><h2 id="window-onload-与-function-‘document’-ready-function"><a href="#window-onload-与-function-‘document’-ready-function" class="headerlink" title="window.onload 与 $(function(){}),$(‘document’).ready(function(){})"></a>window.onload 与 $(function(){}),$(‘document’).ready(function(){})</h2><ol>
<li>window.onload会在Dom加载完成且所有文件下载完成再执行函数</li>
<li>$(function(){}),$(‘document’).ready(function(){})是加载完Dom树就可以执行函数</li>
<li>window.onload 只能写一个，$(functon(){})可以写多个</li>
</ol>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"http://huaban.com/pins/655217150/"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.bootcss.com/jquery/3.0.0-beta1/jquery.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">        <span class="comment">//window.onload先执行的话，会先弹出'window.onload'</span></div><div class="line">        <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">            alert(<span class="string">'window.onload'</span>); </div><div class="line">        &#125;</div><div class="line">     <span class="comment">//(function()&#123;&#125;）先执行的话，会先弹出'$(function()&#123;&#125;)'</span></div><div class="line">        $(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">            alert(<span class="string">'$(function()&#123;&#125;)'</span>)</div><div class="line">        &#125;);</div><div class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="ajax的success是指资源请求成功"><a href="#ajax的success是指资源请求成功" class="headerlink" title="ajax的success是指资源请求成功"></a>ajax的success是指资源请求成功</h2><p>即http 200状态，与文档加载无关</p>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="http://ke.qq.com/webcourse/index.html#course_id=52999&amp;term_id=100038429&amp;taid=182884002483975&amp;vid=j14007h9i4m" target="_blank" rel="external">从输入URL到网页呈现，发生了什么</a><br><a href="http://stackoverflow.com/questions/3698200/window-onload-vs-document-ready" target="_blank" rel="external">http://stackoverflow.com/questions/3698200/window-onload-vs-document-ready</a><br><a href="https://ke.qq.com/course/52999#term_id=100038429" target="_blank" rel="external">从页面输入URL到内容的呈现中间的奥秘</a><br><a href="http://delai.me/code/js-and-performance/" target="_blank" rel="external">JS一定要放在Body的最底部么？聊聊浏览器的渲染机制</a><br><a href="http://www.cnblogs.com/a546558309/p/3478344.html" target="_blank" rel="external">谈谈document.ready和window.onload的区别</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[angularjs1x]]></title>
      <url>weison.org/2016/03/20/angularjs1x/</url>
      <content type="html"><![CDATA[<h2 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h2><p>前端视图与后台数据结合得比较紧密</p>
<ol>
<li>CRUD（增加Create、读取Read、更新Update、删除Delete）应用程序</li>
<li>单页应用SPAS(single Page Applications)，利用路由进行整站式的开发<a id="more"></a>
</li>
</ol>
<h2 id="MVC设计模式"><a href="#MVC设计模式" class="headerlink" title="MVC设计模式"></a>MVC设计模式</h2><ol>
<li>model 数据模型，后台数据</li>
<li>viwe 视图，浏览器呈现的页面</li>
<li>controller M和V的连接器，负责逻辑运算<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line">	<span class="comment">&lt;!-- 将ng-app添加到整页面上 --&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span> <span class="attr">ng-app</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"angular.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">	<span class="comment">&lt;!-- 写上函数的名字，ng-controller连接数据 --&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">ng-controller</span>=<span class="string">"age"</span>&gt;</span></div><div class="line">		<span class="comment">&lt;!-- view显示视图 --&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123;age&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">div</span>&gt;</span> </div><div class="line">	<span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="actionscript"></span></div><div class="line">		<span class="function"><span class="keyword">function</span> <span class="title">age</span><span class="params">($scope)</span></span>&#123;</div><div class="line">			$scope.age = <span class="number">12</span>; <span class="comment">//model数据来源</span></div><div class="line">		&#125;</div><div class="line">	<span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="MVVM数据双向绑定"><a href="#MVVM数据双向绑定" class="headerlink" title="MVVM数据双向绑定"></a><code>MVVM</code>数据双向绑定</h2><p>数值改变影响视图，视图改变数据</p>
<ol>
<li><p>数据改变视图</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">ng-app</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">ng-controller</span>=<span class="string">"ngModel"</span>&gt;</span>&#123;&#123;str&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="actionscript"></span></div><div class="line">	<span class="function"><span class="keyword">function</span> <span class="title">ngModel</span><span class="params">($scope,$timeout)</span></span>&#123;</div><div class="line">		$scope.str = <span class="string">'hello'</span>;</div><div class="line">		$timeout(<span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</div><div class="line">			$scope.str = <span class="string">'weison'</span>;</div><div class="line">		&#125;,<span class="number">1000</span>)</div><div class="line">	&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>视图改变数据</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">ng-app</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">ng-controller</span>=<span class="string">"ngModel"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">ng-model</span>=<span class="string">'name'</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">p</span> <span class="attr">ng-bind</span>=<span class="string">"name"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="actionscript"></span></div><div class="line">	<span class="function"><span class="keyword">function</span> <span class="title">ngModel</span><span class="params">($scope)</span></span>&#123;</div><div class="line">		$scope.name = <span class="string">'weison'</span>;</div><div class="line">	&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="表达式"><a href="#表达式" class="headerlink" title=" 表达式"></a> 表达式</h2><p>将数据内容绑定到html里，与ng-bind类似，不过表达式如果在未完整渲染时会显示这条表达式，而ng-bind会在渲染完再显示<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="comment">&lt;!-- 将ng-app添加到整页面上 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span> <span class="attr">ng-app</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"//cdn.bootcss.com/angular.js/1.2.8/angular.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">	<span class="comment">&lt;!-- 数值运算 --&gt;</span></div><div class="line">	&#123;&#123;1+3&#125;&#125; </div><div class="line">	<span class="comment">&lt;!-- 将weison赋值给name --&gt;</span></div><div class="line">	&#123;&#123;name='weison'&#125;&#125; // =&gt; weison</div><div class="line">	<span class="comment">&lt;!-- age没有赋值 --&gt;</span></div><div class="line">	&#123;&#123;age&#125;&#125; //=&gt; ''</div><div class="line">	<span class="comment">&lt;!-- 输出字符串 --&gt;</span></div><div class="line">	&#123;&#123;'age'&#125;&#125; //=&gt;age</div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h2 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h2><p>从内到外查找数据</p>
<h3 id="scope"><a href="#scope" class="headerlink" title="$scope"></a><code>$scope</code></h3><h4 id="挂载数据"><a href="#挂载数据" class="headerlink" title="挂载数据"></a>挂载数据</h4><h4 id="局部作用域"><a href="#局部作用域" class="headerlink" title="局部作用域"></a>局部作用域</h4><h5 id="scope-apply动态更新视图"><a href="#scope-apply动态更新视图" class="headerlink" title="$scope.$apply动态更新视图"></a><code>$scope.$apply</code>动态更新视图</h5><h3 id="rootScope"><a href="#rootScope" class="headerlink" title="$rootScope"></a><code>$rootScope</code></h3><h4 id="全局作用域"><a href="#全局作用域" class="headerlink" title="全局作用域"></a>全局作用域</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">ng-app</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">ng-controller</span>=<span class="string">"wrap"</span>&gt;</span></div><div class="line">		&#123;&#123;name+age&#125;&#125;</div><div class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">ng-controller</span>=<span class="string">"inner"</span>&gt;</span></div><div class="line">			&#123;&#123;name&#125;&#125;</div><div class="line">		<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="actionscript"></span></div><div class="line">	<span class="function"><span class="keyword">function</span> <span class="title">wrap</span><span class="params">($scope)</span></span>&#123;</div><div class="line">		$scope.name = <span class="string">'lili'</span>;</div><div class="line">	&#125;;</div><div class="line">	<span class="function"><span class="keyword">function</span> <span class="title">inner</span><span class="params">($scope,$rootScope)</span></span>&#123;</div><div class="line">		$scope.name = <span class="string">'weison'</span>;</div><div class="line">		$rootScope.age = <span class="string">'3'</span>;</div><div class="line">	&#125;;</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="依赖注入"><a href="#依赖注入" class="headerlink" title="依赖注入"></a>依赖注入</h2><p>依赖angular来注入服务生成对象，不需要考虑需要传递什么参数，而是通过行参来搞定</p>
<h3 id="好处"><a href="#好处" class="headerlink" title="好处"></a>好处</h3><ol>
<li>解耦</li>
<li>自动创建对象</li>
</ol>
<h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><ol>
<li>压缩时，编译器无法分辨出这是依赖注入的行参可能把$scope压缩成dd<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">m1.controller(<span class="string">'setName'</span>,[<span class="string">'$scope'</span>,<span class="string">'$rootScope'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">      $scope.name = <span class="string">'weison'</span>;</div><div class="line">      $rootScope.age = <span class="number">12</span>;</div><div class="line">&#125;])</div></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="directive指令"><a href="#directive指令" class="headerlink" title="directive指令"></a><code>directive</code>指令</h2><p>定义：扩展html属性，带有前缀ng-<br>作用：</p>
<h3 id="ng-app-初始化-会在自身以及其内部元素起到初始化作用"><a href="#ng-app-初始化-会在自身以及其内部元素起到初始化作用" class="headerlink" title="ng-app 初始化,会在自身以及其内部元素起到初始化作用"></a><code>ng-app</code> 初始化,会在自身以及其内部元素起到初始化作用</h3><p>这样有利于在进行开发的时间 ，某些部分并不需要使用angular开发<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="comment">&lt;!-- 将ng-app添加到整页面上 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span> <span class="attr">ng-app</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">	</div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h3 id="ng-model-数据绑定，元素值绑定到html中"><a href="#ng-model-数据绑定，元素值绑定到html中" class="headerlink" title="ng-model 数据绑定，元素值绑定到html中"></a><code>ng-model</code> 数据绑定，元素值绑定到html中</h3><ol>
<li><code>ng-model-option</code> 配置ng-model</li>
<li><code>updateOn</code> 控制model更新的时机</li>
</ol>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">ng-app</span>=<span class="string">"myApp"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">ng-controller</span>=<span class="string">"Aa"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">div</span> &gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">ng-model</span>=<span class="string">"text"</span> <span class="attr">ng-model-options</span>=<span class="string">"&#123;updateOn :'blur'&#125;"</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">p</span> <span class="attr">ng-bind</span>=<span class="string">"text"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="actionscript"></span></div><div class="line">		<span class="keyword">var</span> m1 = angular.module(<span class="string">'myApp'</span>,[]);</div><div class="line">		m1.controller(<span class="string">'Aa'</span>, [<span class="string">'$scope'</span>, <span class="function"><span class="keyword">function</span> <span class="params">($scope)</span> </span>&#123;</div><div class="line">			$scope.text = <span class="string">"1234"</span>;</div><div class="line">		&#125;]);</div><div class="line">	<span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="ng-repeat-重复html元素"><a href="#ng-repeat-重复html元素" class="headerlink" title="ng-repeat 重复html元素"></a><code>ng-repeat</code> 重复html元素</h3><ol>
<li>通过in方法来指定遍历内容</li>
</ol>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">ng-app</span>=<span class="string">"myApp"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">ul</span> <span class="attr">ng-controller</span>=<span class="string">"Aa"</span>&gt;</span></div><div class="line">		<span class="comment">&lt;!-- data 代表数组中的每一项  --&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">li</span> <span class="attr">ng-repeat</span>=<span class="string">"data in dataList"</span>&gt;</span>&#123;&#123;data&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="actionscript"></span></div><div class="line">		<span class="keyword">var</span> m1 = angular.module(<span class="string">'myApp'</span>,[]);</div><div class="line">		m1.controller(<span class="string">'Aa'</span>, [<span class="string">'$scope'</span>,<span class="string">'$filter'</span>, <span class="function"><span class="keyword">function</span> <span class="params">($scope,$filter)</span> </span>&#123;</div><div class="line">			$scope.dataList = [<span class="number">111</span>,<span class="number">222</span>,<span class="number">333</span>];</div><div class="line">			</div><div class="line">		&#125;]);</div><div class="line">	<span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="ng-controller-连接数据和视图"><a href="#ng-controller-连接数据和视图" class="headerlink" title="ng-controller 连接数据和视图"></a><code>ng-controller</code> 连接数据和视图</h3><h3 id="ng-cloak-在表达式解释完前内容的display为none-解释完成后display为block"><a href="#ng-cloak-在表达式解释完前内容的display为none-解释完成后display为block" class="headerlink" title="ng-cloak 在表达式解释完前内容的display为none,解释完成后display为block"></a><code>ng-cloak</code> 在表达式解释完前内容的display为none,解释完成后display为block</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">ng-cloak</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="ng-bind-template可以串连多个表达式"><a href="#ng-bind-template可以串连多个表达式" class="headerlink" title="ng-bind-template可以串连多个表达式"></a><code>ng-bind-template</code>可以串连多个表达式</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">ng-bind-template</span>=<span class="string">"&#123;&#123;say&#125;&#125;,&#123;&#123;name&#125;&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="ng-non-bindable-不对表达式进行解释，直接显示出来"><a href="#ng-non-bindable-不对表达式进行解释，直接显示出来" class="headerlink" title="ng-non-bindable 不对表达式进行解释，直接显示出来"></a><code>ng-non-bindable</code> 不对表达式进行解释，直接显示出来</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">ng-non-bindable</span>&gt;</span>&#123;&#123;text&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<p>只会影响标签及它里面的内容<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">ng-app</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">p</span> <span class="attr">ng-controller</span>=<span class="string">"weison"</span>&gt;</span>&#123;&#123;name+age&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">	controller外无法绑定&#123;&#123;age&#125;&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="actionscript"></span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">weison</span><span class="params">($scope)</span></span>&#123;</div><div class="line">	$scope.name = <span class="string">'weison'</span>;</div><div class="line">	$scope.age = <span class="string">'3'</span>;</div><div class="line"></div><div class="line">&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h3 id="ng-value"><a href="#ng-value" class="headerlink" title="ng-value"></a><code>ng-value</code></h3><h3 id="ng-bind"><a href="#ng-bind" class="headerlink" title="ng-bind"></a><code>ng-bind</code></h3><h3 id="ng-class"><a href="#ng-class" class="headerlink" title="ng-class"></a><code>ng-class</code></h3><p>ng-class=”{样式名:true,样式名2:true}”<br>可以通过动态的控制布尔值来启用或者取消样式<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;div ng-<span class="class"><span class="keyword">class</span></span>=<span class="string">"&#123;&#123;red:true,yellow:true&#125;&#125;"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></div></pre></td></tr></table></figure></p>
<h3 id="ng-style行内样式"><a href="#ng-style行内样式" class="headerlink" title="ng-style行内样式"></a><code>ng-style</code>行内样式</h3><p>可以写在行内，也可以抽取出来<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">ng-app</span>=<span class="string">"myApp"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">ng-controller</span>=<span class="string">"Aa"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">li</span> <span class="attr">ng-style</span>=<span class="string">"&#123;background:'red',color:'yellow'&#125;"</span>&gt;</span>&#123;&#123;data&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="actionscript"></span></div><div class="line">	<span class="keyword">var</span> m1 = angular.module(<span class="string">'myApp'</span>,[]);</div><div class="line">	m1.controller(<span class="string">'Aa'</span>, [<span class="string">'$scope'</span>,<span class="string">'$filter'</span>, <span class="function"><span class="keyword">function</span> <span class="params">($scope,$filter)</span> </span>&#123;</div><div class="line">		$scope.data = <span class="number">333</span>;</div><div class="line">		</div><div class="line">	&#125;]);</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure></p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">ng-app</span>=<span class="string">"myApp"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">ng-controller</span>=<span class="string">"Aa"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">li</span> <span class="attr">ng-style</span>=<span class="string">"&#123;&#123;style&#125;&#125;"</span>&gt;</span>&#123;&#123;data&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="actionscript"></span></div><div class="line">	<span class="keyword">var</span> m1 = angular.module(<span class="string">'myApp'</span>,[]);</div><div class="line">	m1.controller(<span class="string">'Aa'</span>, [<span class="string">'$scope'</span>,<span class="string">'$filter'</span>, <span class="function"><span class="keyword">function</span> <span class="params">($scope,$filter)</span> </span>&#123;</div><div class="line">		$scope.data = <span class="string">"ngStyle"</span>;</div><div class="line">		$scope.style = <span class="string">"&#123;background:'red',color:'yellow'&#125;"</span>;</div><div class="line">		</div><div class="line">	&#125;]);</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="ng-href-quot-lt-￼53-gt-quot"><a href="#ng-href-quot-lt-￼53-gt-quot" class="headerlink" title="ng-href=&quot;&quot;"></a><code>ng-href=&quot;&quot;</code></h3><h3 id="ng-attr-具体的属性名-suffix"><a href="#ng-attr-具体的属性名-suffix" class="headerlink" title="ng-attr-具体的属性名(suffix)"></a><code>ng-attr-具体的属性名(suffix)</code></h3><p>通用的属性写法,主要是考虑到ng没有添加的指令，可以通过这种形式添加<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">ng-attr-title</span>=<span class="string">"&#123;&#123;title&#125;&#125;"</span> <span class="attr">ng-attr-href</span>=<span class="string">"&#123;&#123;url&#125;&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h3 id="Dom操作"><a href="#Dom操作" class="headerlink" title="Dom操作"></a>Dom操作</h3><ol>
<li><code>ng-show</code></li>
<li><p><code>ng-hide</code><br>通过css的display属性来控制显示隐藏</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">ng-show</span>=<span class="string">"true"</span>&gt;</span>显示内容<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">ng-hide</span>=<span class="string">"true"</span>&gt;</span>隐藏内容<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p><code>ng-if</code><br>直接通过DOM节点的增加和删除来操作</p>
</li>
</ol>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">ng-app</span>=<span class="string">"myApp"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">ng-controller</span>=<span class="string">"Aa"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">ng-model</span>=<span class="string">"box2"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">ng-if</span>=<span class="string">"box2"</span>&gt;</span>12312313<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="actionscript"></span></div><div class="line">		<span class="keyword">var</span> m1 = angular.module(<span class="string">'myApp'</span>,[]);</div><div class="line">		m1.controller(<span class="string">'Aa'</span>, [<span class="string">'$scope'</span>, <span class="function"><span class="keyword">function</span> <span class="params">($scope)</span> </span>&#123;</div><div class="line">			$scope.box2 = <span class="literal">true</span>;</div><div class="line">		&#125;]);</div><div class="line">	<span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div></pre></td></tr></table></figure>
<ol>
<li><code>ng-switch</code>有选择性在显示或隐藏元素</li>
</ol>
<ul>
<li><code>ng-switch-default</code> 当<code>on</code>为true时显示的内容</li>
<li><code>ng-switch-when=&quot;string&quot;</code> 当<code>on</code>的内容匹配<code>string</code>时显示<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">&lt;body ng-app=&quot;myApp&quot;&gt;</div><div class="line">&lt;div ng-controller=&quot;Aa&quot;&gt;</div><div class="line">	&lt;input type=&quot;checkbox&quot; ng-model=&quot;box2&quot;&gt;</div><div class="line">	&lt;div ng-switch on=&quot;box2&quot;&gt;</div><div class="line">		&lt;p ng-switch-default&gt;默认的内容&lt;/p&gt;</div><div class="line">		&lt;p ng-switch-when=&quot;false&quot;&gt;切换的内容&lt;/p&gt;</div><div class="line">	&lt;/div&gt;</div><div class="line">&lt;/div&gt;</div><div class="line">&lt;script&gt;</div><div class="line">	var m1 = angular.module(&apos;myApp&apos;,[]);</div><div class="line">	m1.controller(&apos;Aa&apos;, [&apos;$scope&apos;, function ($scope) &#123;</div><div class="line">		$scope.box2 = true;</div><div class="line">	&#125;]);</div><div class="line">&lt;/script&gt;</div><div class="line">&lt;/body&gt;</div></pre></td></tr></table></figure>
</li>
</ul>
<ol>
<li><code>ng-open</code><br>针对html5的<code>detail</code>标签</li>
</ol>
<h3 id="ng-init"><a href="#ng-init" class="headerlink" title="ng-init"></a><code>ng-init</code></h3><p>利用ng-repeat实现数组循环嵌套，利用ng-init进行初始化操作<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">ng-app</span>=<span class="string">"myApp"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">ng-controller</span>=<span class="string">"Aa"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">ng-repeat</span>=<span class="string">"arrOut in dataList"</span> <span class="attr">ng-init</span>=<span class="string">"outIndex=$index"</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">div</span> <span class="attr">ng-repeat</span>=<span class="string">"arrInner in arrOut"</span> <span class="attr">ng-init</span>=<span class="string">"innerIndex=$index"</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">p</span> <span class="attr">ng-bind-template</span>=<span class="string">"&#123;&#123;arrInner&#125;&#125;,&#123;&#123;outIndex&#125;&#125;&#123;&#123;innerIndex&#125;&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">			<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="actionscript"></span></div><div class="line">		<span class="keyword">var</span> m1 = angular.module(<span class="string">'myApp'</span>,[]);</div><div class="line">		m1.controller(<span class="string">'Aa'</span>, [<span class="string">'$scope'</span>, <span class="function"><span class="keyword">function</span> <span class="params">($scope)</span> </span>&#123;</div><div class="line">			$scope.dataList = [[<span class="string">'a'</span>,<span class="string">'b'</span>],[<span class="string">'c'</span>,<span class="string">'d'</span>]];</div><div class="line"></div><div class="line">		&#125;]);</div><div class="line">	<span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h3 id="ng-include-quot-39-路径-39-quot-通过模板的方式引入文件"><a href="#ng-include-quot-39-路径-39-quot-通过模板的方式引入文件" class="headerlink" title="ng-include=&quot;&#39;路径&#39;&quot; 通过模板的方式引入文件"></a><code>ng-include=&quot;&#39;路径&#39;&quot;</code> 通过模板的方式引入文件</h3><h2 id="标签指令"><a href="#标签指令" class="headerlink" title="标签指令"></a>标签指令</h2><h3 id="a-阻止了系统默认事件"><a href="#a-阻止了系统默认事件" class="headerlink" title="a 阻止了系统默认事件"></a><code>a</code> 阻止了系统默认事件</h3><p>例如空链接点击会刷新<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">ng-app</span>=<span class="string">"myApp"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span>12312313123<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h3 id="ng-options"><a href="#ng-options" class="headerlink" title="ng-options"></a><code>ng-options</code></h3><p>类似于<code>ng-repeat</code>,ng-options=”具体数据的哪一个属性 for 其中一条数据 in 数据源”,<br>需要配合<code>ng-model</code>一起使用<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">ng-app</span>=<span class="string">"myApp"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">ng-controller</span>=<span class="string">"Aa"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">select</span> <span class="attr">ng-options</span>=<span class="string">"data.name for data in datas"</span> <span class="attr">ng-model</span>=<span class="string">"myData"</span>&gt;</span><span class="tag">&lt;/<span class="name">select</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span>bbbbb<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="actionscript"></span></div><div class="line">	<span class="keyword">var</span> m1 = angular.module(<span class="string">'myApp'</span>,[]);</div><div class="line">	m1.controller(<span class="string">'Aa'</span>, [<span class="string">'$scope'</span>, <span class="function"><span class="keyword">function</span><span class="params">($scope)</span></span>&#123;</div><div class="line">		$scope.datas = [&#123;name:<span class="string">'lily'</span>,age:<span class="number">22</span>&#125;,&#123;name:<span class="string">'sasa'</span>,age:<span class="number">12</span>&#125;];</div><div class="line">	&#125;]);</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h3 id="novalidate"><a href="#novalidate" class="headerlink" title="novalidate"></a><code>novalidate</code></h3><p>阻止form表单默认的行为和样式<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">""</span> <span class="attr">novalidate</span>&gt;</span><span class="tag">&lt;/<span class="name">form</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h2 id="服务service"><a href="#服务service" class="headerlink" title="服务service"></a>服务service</h2><p>注入依赖引进来<br>1.都是以$开始的</p>
<h3 id="http-完成ajax操作"><a href="#http-完成ajax操作" class="headerlink" title="$http 完成ajax操作"></a><code>$http</code> 完成ajax操作</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">	<span class="function"><span class="keyword">function</span> <span class="title">getData</span>(<span class="params">$scope,$http</span>)</span>&#123;</div><div class="line">	$http(&#123;</div><div class="line">		<span class="attr">method</span> : <span class="string">'get'</span>,</div><div class="line">		<span class="attr">url</span> : <span class="string">'http:www.baidu.com'</span>,</div><div class="line">		<span class="attr">params</span> : &#123;<span class="string">'name'</span>:<span class="string">'weison'</span>&#125;</div><div class="line">	&#125;).succesee(<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</div><div class="line">	   <span class="keyword">return</span> data;</div><div class="line">	&#125;)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="angular-module-39-模块化名称-39-模块化思想"><a href="#angular-module-39-模块化名称-39-模块化思想" class="headerlink" title="angular.module(&#39;模块化名称&#39;.[])模块化思想"></a><code>angular.module(&#39;模块化名称&#39;.[])</code>模块化思想</h2><p>作用</p>
<ol>
<li>防冲突</li>
<li>建立依赖关系</li>
</ol>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span> <span class="attr">ng-app</span>=<span class="string">"myApp"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">ng-controller</span>=<span class="string">"NameCtrl"</span>&gt;</span>&#123;&#123;name&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">ng-controller</span>=<span class="string">"Boo"</span>&gt;</span>&#123;&#123;name&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"angular.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="actionscript"></span></div><div class="line">		<span class="comment">//一个网站可能会有多个模块，而只会有一个负责初始化的模块，这个模块是由Ng-app来决定</span></div><div class="line">		<span class="keyword">var</span> m1 = angular.module(<span class="string">'myApp'</span>,[]);</div><div class="line">		m1.controller(<span class="string">'NameCtrl'</span>, [<span class="string">'$scope'</span>, <span class="function"><span class="keyword">function</span> <span class="params">($scope)</span> </span>&#123;</div><div class="line">			$scope.name = <span class="string">'weison'</span></div><div class="line">		&#125;]);</div><div class="line">		m1.controller(<span class="string">'Boo'</span>, [<span class="string">'$scope'</span>, <span class="function"><span class="keyword">function</span> <span class="params">($scope)</span> </span>&#123;</div><div class="line">			$scope.name = <span class="string">'join'</span>;</div><div class="line">		&#125;])</div><div class="line">	<span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="过滤器"><a href="#过滤器" class="headerlink" title="过滤器"></a>过滤器</h2><h3 id="filter-39-要查找的内空-39-true-找出符合条件的内容"><a href="#filter-39-要查找的内空-39-true-找出符合条件的内容" class="headerlink" title="filter : &#39;要查找的内空&#39;[: true]   找出符合条件的内容"></a><code>filter : &#39;要查找的内空&#39;[: true]</code>   找出符合条件的内容</h3><ol>
<li>它针对的值都是value值</li>
<li>假如加上true后，则要求完全匹配,默认情况下 filter: ‘r’ 是可以查找到<br>值为red和blue的数目，当如果写成 filter : ‘r’ : true后，则只能找到完全匹配的值，单个r</li>
</ol>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span> &gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"angular.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">ng-app</span>=<span class="string">'myApp'</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">ng-controller</span>=<span class="string">"lists"</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">p</span>&gt;</span>未过滤：&#123;&#123;list&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">p</span>&gt;</span>过滤filter:'r'(找出数据中value带有r值的内容):&#123;&#123;list|filter:'r'&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="actionscript"></span></div><div class="line">		<span class="keyword">var</span> m1 = angular.module(<span class="string">"myApp"</span>,[]);</div><div class="line">		m1.controller(<span class="string">"lists"</span>,[<span class="string">'$scope'</span>,<span class="function"><span class="keyword">function</span><span class="params">($scope)</span></span>&#123;</div><div class="line">			$scope.list = [</div><div class="line">				&#123;<span class="string">'color'</span>:<span class="string">'red'</span>&#125;,</div><div class="line">				&#123;<span class="string">'color'</span>:<span class="string">'yellow'</span>&#125;,</div><div class="line">				&#123;<span class="string">'color'</span>:<span class="string">'white'</span>&#125;,</div><div class="line">				&#123;<span class="string">'color'</span>:<span class="string">'brown'</span>&#125;,</div><div class="line">			];</div><div class="line">		&#125;])</div><div class="line">	<span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="currency-修改数字格式"><a href="#currency-修改数字格式" class="headerlink" title="currency 修改数字格式"></a><code>currency</code> 修改数字格式</h3><h3 id="limito-截取部分内容"><a href="#limito-截取部分内容" class="headerlink" title="limito 截取部分内容"></a><code>limito</code> 截取部分内容</h3><p>可以截取字符串，数据，甚至是数组的内容<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">ng-app</span>=<span class="string">"myApp"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">ng-controller</span>=<span class="string">"Aa"</span> &gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">p</span> <span class="attr">ng-bind</span>=<span class="string">"&#123;&#123;str | limitTo : 2&#125;&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">p</span> &gt;</span>&#123;&#123;arr | limitTo : 2&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="actionscript"></span></div><div class="line">		<span class="keyword">var</span> m1 = angular.module(<span class="string">'myApp'</span>,[]);</div><div class="line">		m1.controller(<span class="string">'Aa'</span>, [<span class="string">'$scope'</span>, <span class="function"><span class="keyword">function</span> <span class="params">($scope)</span> </span>&#123;</div><div class="line">			$scope.str = <span class="number">12345.786</span>;</div><div class="line">			$scope.arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</div><div class="line">		&#125;]);</div><div class="line">	<span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h3 id="orderBy-39-排序的依据-39-true-排序"><a href="#orderBy-39-排序的依据-39-true-排序" class="headerlink" title="orderBy : &#39;排序的依据&#39; [: true] 排序"></a><code>orderBy : &#39;排序的依据&#39; [: true]</code> 排序</h3><p>假如加上true，则从大到小排<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">ng-app</span>=<span class="string">"myApp"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">ng-controller</span>=<span class="string">"Aa"</span> &gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">p</span> &gt;</span>&#123;&#123;arr | orderBy : 'age' : true&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="actionscript"></span></div><div class="line">		<span class="keyword">var</span> m1 = angular.module(<span class="string">'myApp'</span>,[]);</div><div class="line">		m1.controller(<span class="string">'Aa'</span>, [<span class="string">'$scope'</span>, <span class="function"><span class="keyword">function</span> <span class="params">($scope)</span> </span>&#123;</div><div class="line">			$scope.str = <span class="number">12345.786</span>;</div><div class="line">			$scope.arr = [</div><div class="line">				&#123;<span class="string">'name'</span>:<span class="string">'lily'</span>,<span class="string">'age'</span>:<span class="number">20</span>&#125;,</div><div class="line">				&#123;<span class="string">'name'</span>:<span class="string">'blue'</span>,<span class="string">'age'</span>:<span class="number">40</span>&#125;,</div><div class="line">				&#123;<span class="string">'name'</span>:<span class="string">'xiaozhang'</span>,<span class="string">'age'</span>:<span class="number">30</span>&#125;</div><div class="line">			];</div><div class="line">		&#125;]);</div><div class="line">	<span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h3 id="number-把字符转换成不带单位，但带分隔符的数字"><a href="#number-把字符转换成不带单位，但带分隔符的数字" class="headerlink" title="number 把字符转换成不带单位，但带分隔符的数字"></a><code>number</code> 把字符转换成不带单位，但带分隔符的数字</h3><p>默认四舍五入保留3位小数，可以通过number后面的数字来控制保留的位数<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&lt;div ng-controller=<span class="string">"Aa"</span> ng-bind=<span class="string">"num | number : 2"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></div><div class="line">&lt;script&gt;</div><div class="line">	<span class="keyword">var</span> m1 = angular.module(<span class="string">'myApp'</span>,[]);</div><div class="line">	</div><div class="line">	m1.controller(<span class="string">'Aa'</span>, [<span class="string">'$scope'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">$scope</span>) </span>&#123;</div><div class="line">		$scope.num = <span class="number">12345.789</span>;</div><div class="line">	&#125;]);</div><div class="line"><span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></div></pre></td></tr></table></figure></p>
<h3 id="uppercase-lowercase转换为大写-小写"><a href="#uppercase-lowercase转换为大写-小写" class="headerlink" title="uppercase/lowercase转换为大写/小写"></a><code>uppercase/lowercase</code>转换为大写/小写</h3><h3 id="data-将时间的毫秒数转换成时间"><a href="#data-将时间的毫秒数转换成时间" class="headerlink" title="data 将时间的毫秒数转换成时间"></a><code>data</code> 将时间的毫秒数转换成时间</h3><h3 id="过滤器是可以组合使用的"><a href="#过滤器是可以组合使用的" class="headerlink" title="过滤器是可以组合使用的"></a>过滤器是可以组合使用的</h3><p>只要在表达式内在管道符之间加上管道符即可<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;div&gt;&#123;&#123; name | limitTo : <span class="number">2</span> | uppercase&#125;&#125;&lt;<span class="regexp">/div&gt;</span></div></pre></td></tr></table></figure></p>
<h3 id="在js中使用过滤器"><a href="#在js中使用过滤器" class="headerlink" title="在js中使用过滤器"></a>在js中使用过滤器</h3><ol>
<li>注入<code>$filter</code>服务</li>
<li>在$scope里执行绑定的数据 </li>
</ol>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">ng-app</span>=<span class="string">"myApp"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">ng-controller</span>=<span class="string">"Aa"</span> &gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123; str&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="actionscript"></span></div><div class="line">		<span class="keyword">var</span> m1 = angular.module(<span class="string">'myApp'</span>,[]);</div><div class="line">		m1.controller(<span class="string">'Aa'</span>, [<span class="string">'$scope'</span>,<span class="string">'$filter'</span>, <span class="function"><span class="keyword">function</span> <span class="params">($scope,$filter)</span> </span>&#123;</div><div class="line">			$scope.str = $filter(<span class="string">'number'</span>)(<span class="number">1231231231.231</span>,<span class="number">1</span>);</div><div class="line">			</div><div class="line">		&#125;]);</div><div class="line">	<span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="自定义"><a href="#自定义" class="headerlink" title="自定义"></a>自定义</h2><h3 id="自定义过滤器"><a href="#自定义过滤器" class="headerlink" title="自定义过滤器"></a>自定义过滤器</h3><ol>
<li>通过filter方法</li>
<li>将过滤器定义在模块下面</li>
<li>可以像普通过滤器一样，通过管道符来调用</li>
<li>也可以通过js的$scope.属性名 = $filter(‘过滤器名称’)(‘过滤的内容’)来过滤</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">模块名.filter(<span class="string">'过滤器名称'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	<span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">操作的内容,参数</span>)</span>&#123;</div><div class="line">		<span class="keyword">return</span> str的操作内容</div><div class="line">	&#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">ng-app</span>=<span class="string">'myApp'</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">ng-controller</span>=<span class="string">"time"</span>&gt;</span>&#123;&#123;today&#125;&#125;&#123;&#123;num&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="actionscript"></span></div><div class="line"><span class="keyword">var</span> myApp = angular.module(<span class="string">'myApp'</span>,[]);</div><div class="line">myApp.filter(<span class="string">'toUpper'</span>,<span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</div><div class="line">	<span class="keyword">return</span> <span class="function"><span class="keyword">function</span><span class="params">(str)</span></span>&#123;</div><div class="line">		<span class="keyword">return</span> str.charAt(<span class="number">0</span>).toUpperCase() + str.substring(<span class="number">1</span>);</div><div class="line">	&#125;</div><div class="line">&#125;)</div><div class="line">myApp.controller(<span class="string">'time'</span>,[<span class="string">'$scope'</span>,<span class="string">'$filter'</span>,<span class="function"><span class="keyword">function</span><span class="params">($scope,$filter)</span></span>&#123;</div><div class="line">	$scope.today = $filter(<span class="string">"toUpper"</span>)(<span class="string">"today"</span>);</div><div class="line">	$scope.num = $filter(<span class="string">'currency'</span>)(<span class="number">12313123</span>);</div><div class="line">&#125;])</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="自定义服务"><a href="#自定义服务" class="headerlink" title="自定义服务"></a>自定义服务</h3><h4 id="factory"><a href="#factory" class="headerlink" title="factory"></a><code>factory</code></h4><h4 id="provider"><a href="#provider" class="headerlink" title="provider"></a><code>provider</code></h4><p>两者的区别在于当服务共用时，provider（供应商）可以通过config来根据不同的需求对服务进行重新配置</p>
<h4 id="config"><a href="#config" class="headerlink" title="config"></a><code>config</code></h4><ol>
<li>固定组合，服务名字+Provider，比如服务名叫hello，那个在进行配置时，配置的名字就叫helloProvider</li>
<li>供应商一定要写在config中</li>
</ol>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">ng-app</span>=<span class="string">"myApp"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">ng-controller</span>=<span class="string">"hello"</span>&gt;</span>&#123;&#123;name&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">	<span class="keyword">var</span> myApp = angular.module(<span class="string">'myApp'</span>,[]);</div><div class="line">	myApp.factory(<span class="string">'helloWorld'</span>, [<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;	</div><div class="line">		<span class="keyword">return</span> &#123;</div><div class="line">			<span class="attr">name</span> : <span class="string">'weison'</span>,</div><div class="line">			<span class="attr">showName</span> : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">				<span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</div><div class="line">			&#125;</div><div class="line">		&#125;;</div><div class="line">	&#125;]);</div><div class="line">	myApp.controller(<span class="string">'hello'</span>, [<span class="string">'$scope'</span>,helloWorld <span class="function"><span class="keyword">function</span> (<span class="params">$scope,helloWorld</span>) </span>&#123;</div><div class="line">		$scope.name = helloWorld.name;</div><div class="line">		helloWorld.showName();</div><div class="line">		</div><div class="line">	&#125;])</div><div class="line">	</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">ng-app</span>=<span class="string">"myApp"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">ng-controller</span>=<span class="string">"h"</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">span</span> <span class="attr">ng-bind</span>=<span class="string">"name"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="actionscript"></span></div><div class="line">		<span class="comment">//定义注入模块</span></div><div class="line">		<span class="keyword">var</span> m1 = angular.module(<span class="string">'m1'</span>,[]);</div><div class="line">		<span class="comment">//创建供应商</span></div><div class="line">		m1.provider(<span class="string">'say'</span>, [<span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</div><div class="line">			<span class="keyword">return</span> &#123;</div><div class="line">				str : <span class="string">'weison'</span>,</div><div class="line">				$<span class="keyword">get</span> : <span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</div><div class="line">					<span class="keyword">return</span> &#123;</div><div class="line">						name : <span class="keyword">this</span>.str,</div><div class="line">						sayHi : <span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</div><div class="line">							console.log(<span class="keyword">this</span>.name);</div><div class="line">						&#125;</div><div class="line">					&#125;</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">		&#125;])</div><div class="line">		<span class="comment">//创建主模块,并加入m1依赖</span></div><div class="line">		<span class="keyword">var</span> myApp = angular.module(<span class="string">'myApp'</span>,[<span class="string">'m1'</span>]);</div><div class="line">		<span class="comment">//创建桥梁,并添加服务</span></div><div class="line">		myApp.controller(<span class="string">'h'</span>, [<span class="string">'$scope'</span>,<span class="string">'say'</span>, <span class="function"><span class="keyword">function</span> <span class="params">($scope,say)</span> </span>&#123;</div><div class="line">			$scope.name = say.name;</div><div class="line">		&#125;]);</div><div class="line">		<span class="comment">//通过config修改服务 </span></div><div class="line">		myApp.config([<span class="string">'sayProvider'</span>, <span class="function"><span class="keyword">function</span> <span class="params">(sayProvider)</span> </span>&#123;</div><div class="line">			sayProvider.str = <span class="string">'weisonde'</span></div><div class="line">		&#125;])</div><div class="line"></div><div class="line">	</div><div class="line">		</div><div class="line">	<span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="模块下的通信"><a href="#模块下的通信" class="headerlink" title="模块下的通信"></a>模块下的通信</h2><p>通过angular.module(‘模块名’,[‘依赖包的名字’])来通信<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">ng-app</span>=<span class="string">'myApp'</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">p</span> <span class="attr">ng-controller</span>=<span class="string">"hello2"</span>&gt;</span>&#123;&#123;name&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">	<span class="keyword">var</span> m2 = angular.module(<span class="string">'m2'</span>,[]);</div><div class="line">	m2.factory(<span class="string">'hello'</span>, [<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;		</div><div class="line">		<span class="keyword">return</span> &#123;</div><div class="line">				<span class="attr">name</span> : <span class="string">'weison'</span>,</div><div class="line">				<span class="attr">showName</span> : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">					<span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</div><div class="line">				&#125;</div><div class="line">		&#125;;</div><div class="line">	&#125;])</div><div class="line">	<span class="keyword">var</span> myApp = angular.module(<span class="string">'myApp'</span>,[<span class="string">'m2'</span>]);</div><div class="line">	myApp.controller(<span class="string">'hello2'</span>, [<span class="string">'$scope'</span>,<span class="string">'hello'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">$scope,hello</span>) </span>&#123;</div><div class="line">		$scope.name = hello.name;</div><div class="line">		hello.showName();</div><div class="line">	&#125;])</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h2 id="工具方法"><a href="#工具方法" class="headerlink" title="工具方法"></a>工具方法</h2><h3 id="angular-isArray-判断内容是否为数组"><a href="#angular-isArray-判断内容是否为数组" class="headerlink" title="angular.isArray() 判断内容是否为数组"></a><code>angular.isArray()</code> 判断内容是否为数组</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arr = [];</div><div class="line">angular.isArray(arr); <span class="comment">// =&gt; true</span></div></pre></td></tr></table></figure>
<h3 id="angular-isDate"><a href="#angular-isDate" class="headerlink" title="angular.isDate()"></a><code>angular.isDate()</code></h3><p>判断内容是否为时间对象</p>
<h3 id="angular-isDefined-判断内容是否已存在"><a href="#angular-isDefined-判断内容是否已存在" class="headerlink" title="angular.isDefined 判断内容是否已存在"></a><code>angular.isDefined</code> 判断内容是否已存在</h3><p>如果存在，就会返回假</p>
<h3 id="angular-undefined"><a href="#angular-undefined" class="headerlink" title="angular.undefined"></a><code>angular.undefined</code></h3><p>判断内容是否不存在</p>
<h3 id="angular-isFunction"><a href="#angular-isFunction" class="headerlink" title="angular.isFunction"></a><code>angular.isFunction</code></h3><p>判断内容是否为函数</p>
<h3 id="angular-isObject"><a href="#angular-isObject" class="headerlink" title="angular.isObject()"></a><code>angular.isObject()</code></h3><p>判断内容是否为对象</p>
<h3 id="angular-isNumber"><a href="#angular-isNumber" class="headerlink" title="angular.isNumber()"></a><code>angular.isNumber()</code></h3><p>判断内容是否为数字</p>
<h3 id="angular-idString"><a href="#angular-idString" class="headerlink" title="angular.idString()"></a><code>angular.idString()</code></h3><p>判断内容是否为字符</p>
<h3 id="angular-isElement"><a href="#angular-isElement" class="headerlink" title="angular.isElement()"></a><code>angular.isElement()</code></h3><p>判断内容是不是一个元素<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">console</span>.log(angular.isElement(<span class="built_in">document</span>.body); <span class="comment">//=&gt;true</span></div></pre></td></tr></table></figure></p>
<h3 id="angular-version"><a href="#angular-version" class="headerlink" title="angular.version"></a><code>angular.version</code></h3><p>判断当前所使用的angularJs的版本<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">console</span>.log(angular.version);</div></pre></td></tr></table></figure></p>
<h3 id="angular-equals"><a href="#angular-equals" class="headerlink" title="angular.equals()"></a><code>angular.equals()</code></h3><p>判断两个元素是否相等<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> a = <span class="number">1</span>;</div><div class="line">    b = <span class="number">1</span>;</div><div class="line">angular.equals(a,b); <span class="comment">// =&gt;true</span></div><div class="line"><span class="keyword">var</span> arr1 = [],</div><div class="line">    arr2 = [];</div><div class="line">angular.equals(arr1,arr2); <span class="comment">//区别是原生的false,这时候为true;</span></div><div class="line"><span class="keyword">var</span> n1 = <span class="literal">NaN</span>,</div><div class="line">	n2 = <span class="literal">NaN</span>;</div><div class="line">angular.equals(n1,n2); <span class="comment">// =&gt; true</span></div></pre></td></tr></table></figure></p>
<h3 id="angular-foEach-操作的内容-回调函数-结果对象"><a href="#angular-foEach-操作的内容-回调函数-结果对象" class="headerlink" title="angular.foEach(操作的内容,回调函数,结果对象)"></a><code>angular.foEach(操作的内容,回调函数,结果对象)</code></h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">angular.foEach(values,<span class="function"><span class="keyword">function</span>(<span class="params">value,i</span>)</span>&#123;</div><div class="line">	<span class="built_in">console</span>.log(value,i);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h3 id="angular-fromJson-toJson"><a href="#angular-fromJson-toJson" class="headerlink" title="angular.fromJson/toJson"></a><code>angular.fromJson/toJson</code></h3><p>json与字符串转换<br>类似于原生的JSON.parset() 和 JSON.stringify()</p>
<ol>
<li><p>把字符串转换成json</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> str = <span class="string">'&#123;"name":"joke","age":"20"&#125;'</span>;</div><div class="line"><span class="keyword">var</span> json = angular.fromJson(str);</div><div class="line"><span class="built_in">console</span>.log(json.name); <span class="comment">// joke</span></div></pre></td></tr></table></figure>
</li>
<li><p>把json格式化成str,第二个参数可以让字符串格式更容易看懂</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> json = &#123;<span class="string">"name"</span>:<span class="string">"joke"</span>,<span class="string">"age"</span>:<span class="string">"20"</span>&#125;;</div><div class="line"><span class="keyword">var</span> str = angular.toJson(json,<span class="literal">true</span>);</div><div class="line"><span class="built_in">console</span>.log(str);</div></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="angular-lowercase-uppercase-字母大小写转换"><a href="#angular-lowercase-uppercase-字母大小写转换" class="headerlink" title="angular.lowercase/uppercase 字母大小写转换"></a><code>angular.lowercase/uppercase</code> 字母大小写转换</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> str = <span class="string">"Hello"</span>;</div><div class="line">angular.lowercase(str);  <span class="comment">// =&gt; hello</span></div><div class="line">angular.uppercase(str);  <span class="comment">// =&gt; HELLO</span></div></pre></td></tr></table></figure>
<h3 id="angular-element"><a href="#angular-element" class="headerlink" title="angular.element()"></a><code>angular.element()</code></h3><p>angular中包含了一些jq的方法，具体看api<br>当同时引进jq后，angular.element ==== $</p>
<h3 id="angular-bootstrap-动态初始化app-而且可以支持同时初始化多个模块"><a href="#angular-bootstrap-动态初始化app-而且可以支持同时初始化多个模块" class="headerlink" title="angular.bootstrap 动态初始化app,而且可以支持同时初始化多个模块"></a><code>angular.bootstrap</code> 动态初始化app,而且可以支持同时初始化多个模块</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">ng-controller</span>=<span class="string">"Aa"</span> <span class="attr">ng-bind</span>=<span class="string">"name"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">ng-controller</span>=<span class="string">"Bb"</span> <span class="attr">ng-bind</span>=<span class="string">"name"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">	<span class="keyword">var</span> oDiv = <span class="built_in">document</span>.getElementsByTagName(<span class="string">'div'</span>);</div><div class="line">	<span class="keyword">var</span> m1 = angular.module(<span class="string">'myApp1'</span>,[]);</div><div class="line">	<span class="keyword">var</span> m2 = angular.module(<span class="string">'myApp2'</span>,[]);</div><div class="line">	m1.controller(<span class="string">'Aa'</span>, [<span class="string">'$scope'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">$scope</span>) </span>&#123;</div><div class="line">		$scope.name = <span class="string">'myApp1'</span>;</div><div class="line">	&#125;])</div><div class="line">	m2.controller(<span class="string">'Bb'</span>, [<span class="string">'$scope'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">$scope</span>) </span>&#123;</div><div class="line">		$scope.name = <span class="string">'myApp2'</span>;</div><div class="line">	&#125;])</div><div class="line">	<span class="built_in">document</span>.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">		angular.bootstrap(oDiv[<span class="number">0</span>],[<span class="string">'myApp1'</span>]);</div><div class="line">		angular.bootstrap(oDiv[<span class="number">1</span>],[<span class="string">'myApp2'</span>]);</div><div class="line">	&#125;;</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="angular-inject注册器"><a href="#angular-inject注册器" class="headerlink" title="angular.inject注册器"></a><code>angular.inject</code>注册器</h3><h3 id="scope-watch-监听数据变化"><a href="#scope-watch-监听数据变化" class="headerlink" title="$scope.$watch 监听数据变化"></a><code>$scope.$watch</code> 监听数据变化</h3><h3 id="scope-apply"><a href="#scope-apply" class="headerlink" title="$scope.$apply"></a><code>$scope.$apply</code></h3><p>监听funciton里面的内容是否有变化，一旦发生变化，就更新视图内容<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">$scope.name = <span class="string">"lilei"</span>;</div><div class="line">setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	$scope.$apply(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">		$scope.name = <span class="string">'lily'</span>;</div><div class="line">	&#125;);</div><div class="line">&#125;,<span class="number">1000</span>);</div></pre></td></tr></table></figure></p>
<h2 id="run"><a href="#run" class="headerlink" title="run()"></a><code>run()</code></h2><p>变量全局操作，初始化全局的一些参数，可以不用通过连接controller来进行<br>操作，它只能挂载在rootScope下<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">ng-bind</span>=<span class="string">"hobby"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">var m1 = angular.module('myApp',[]);</div><div class="line">m1.run(['$rootScope',function($rootScope)&#123;</div><div class="line">	$rootScope.hobby = '篮球，足球';</div><div class="line">&#125;]);</div></pre></td></tr></table></figure></p>
<h2 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h2><h2 id="表单验证"><a href="#表单验证" class="headerlink" title="表单验证"></a>表单验证</h2><p>注意：</p>
<ol>
<li>通过<code>name</code>的方式来查找 </li>
</ol>
<h3 id="valid-有效的"><a href="#valid-有效的" class="headerlink" title="$valid 有效的"></a><code>$valid</code> 有效的</h3><p>当验证成功时，会返回true</p>
<h3 id="invalid-无效的"><a href="#invalid-无效的" class="headerlink" title="$invalid 无效的"></a><code>$invalid</code> 无效的</h3><p>当验证失败时，会返回true</p>
<h3 id="pristine-原始值，初始值"><a href="#pristine-原始值，初始值" class="headerlink" title="$pristine 原始值，初始值"></a><code>$pristine</code> 原始值，初始值</h3><p>原始值没经过修改，会返回true</p>
<h3 id="dirty"><a href="#dirty" class="headerlink" title="$dirty"></a><code>$dirty</code></h3><p>脏值，已经修改过的值后，这个值会返回true</p>
<h3 id="error"><a href="#error" class="headerlink" title="$error"></a><code>$error</code></h3><p>返回所有验证信息，只要这个值为true，就证明失败了<br>假如为false，则代表验证通过<br>而且要考虑优先问题，如果一个内容，同时需要是否为空，是否符合正则，是否符合最小位数<br>那个当内容未填写为空时，为显示为{“require”:true,”pattner”:false,”minLength”:false}</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">ng-app</span>=<span class="string">"myApp"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">ng-controller</span>=<span class="string">"Aa"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">""</span> <span class="attr">name</span>=<span class="string">"myForm"</span> <span class="attr">novalidate</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"email"</span> <span class="attr">ng-model</span>=<span class="string">"myEmail"</span> <span class="attr">name</span>=<span class="string">"myEmail1"</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">ng-model</span>=<span class="string">"myText"</span> <span class="attr">name</span>=<span class="string">"myText"</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">p</span> <span class="attr">ng-bind</span>=<span class="string">"myEmail"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">p</span> &gt;</span>$valid有效:&#123;&#123;myForm.myEmail1.$valid&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">p</span> &gt;</span>$invalid无效:&#123;&#123;myForm.myEmail1.$invalid&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">p</span> &gt;</span>$pristine原始值:&#123;&#123;myForm.myEmail1.$pristine&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">p</span>&gt;</span>$dirty脏值:&#123;&#123;myForm.myEmail1.$dirty&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">p</span>&gt;</span>$error:&#123;&#123;myForm.myEmail1.$error&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">form</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span>bbbbb<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="actionscript"></span></div><div class="line">	<span class="keyword">var</span> m1 = angular.module(<span class="string">'myApp'</span>,[]);</div><div class="line">	m1.controller(<span class="string">'Aa'</span>, [<span class="string">'$scope'</span>, <span class="function"><span class="keyword">function</span><span class="params">($scope)</span></span>&#123;</div><div class="line">		$scope.myEmail = <span class="string">'weison@qq.com'</span></div><div class="line">	&#125;]);</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="required-验证是否为空"><a href="#required-验证是否为空" class="headerlink" title="required 验证是否为空"></a><code>required</code> 验证是否为空</h3><p>如果为空，返回true</p>
<h3 id="minLength-最小字符长度"><a href="#minLength-最小字符长度" class="headerlink" title="minLength 最小字符长度"></a><code>minLength</code> 最小字符长度</h3><p>如果达到条件，则返回false</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">&lt;div ng-app="myApp"&gt;</div><div class="line">&lt;div ng-controller="Aa"&gt;</div><div class="line">	&lt;form action="" name="myForm" novalidate&gt;</div><div class="line">		&lt;input type="text" ng-model="myEmail" name="myEmail1" required minlength="5"&gt;</div><div class="line">		&lt;p ng-bind="myEmail"&gt;&lt;/p&gt;</div><div class="line">		&lt;p&gt;$erro2r:&#123;&#123;myForm.myEmail1.$error&#125;&#125;&lt;/p&gt;</div><div class="line">	&lt;/form&gt;</div><div class="line">&lt;/div&gt;</div><div class="line">&lt;/div&gt;</div><div class="line">&lt;a href=""&gt;bbbbb&lt;/a&gt;</div><div class="line">&lt;script&gt;</div><div class="line">var m1 = angular.module('myApp',[]);</div><div class="line">m1.controller('Aa', ['$scope', function($scope)&#123;</div><div class="line">&#125;]);</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure>
<h3 id="ng-pattern-使用正则验证"><a href="#ng-pattern-使用正则验证" class="headerlink" title="ng-pattern 使用正则验证"></a><code>ng-pattern</code> 使用正则验证</h3><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">&lt;div ng-app="myApp"&gt;</div><div class="line">&lt;div ng-controller="Aa"&gt;</div><div class="line">&lt;form action="" name="myForm" novalidate&gt;</div><div class="line">	&lt;input type="text" ng-model="myEmail" name="myEmail1" required minlength="5" ng-pattern="/^[a-zA-Z]+$/"&gt;</div><div class="line">	&lt;p ng-bind="myEmail"&gt;&lt;/p&gt;</div><div class="line">	&lt;p&gt;$erro2r:&#123;&#123;myForm.myEmail1.$error&#125;&#125;&lt;/p&gt;</div><div class="line">&lt;/form&gt;</div><div class="line">&lt;/div&gt;</div><div class="line">&lt;/div&gt;</div><div class="line">&lt;a href=""&gt;bbbbb&lt;/a&gt;</div><div class="line">&lt;script&gt;</div><div class="line">var m1 = angular.module('myApp',[]);</div><div class="line">m1.controller('Aa', ['$scope', function($scope)&#123;</div><div class="line">&#125;]);</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure>
<h3 id="主要的css样式"><a href="#主要的css样式" class="headerlink" title="主要的css样式"></a>主要的css样式</h3><ol>
<li><code>ng-valid{}</code> 验证通过</li>
<li><code>ng-invaild{}</code> 验证不通过</li>
<li><code>ng-prisine{}</code> 原始数据样式</li>
<li><code>ng-dirty{}</code> 脏处理<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">input.ng-invalid&#123;&#125;</div><div class="line">input.ng-valid&#123;&#125;</div></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="资源"><a href="#资源" class="headerlink" title="资源"></a>资源</h2><ol>
<li><a href="https://www.angularjs.org/" target="_blank" rel="external">官网</a></li>
<li><a href="http://docs.angularjs.cn/api" target="_blank" rel="external">英文api</a></li>
<li><a href="http://www.bootcdn.cn/angular.js/" target="_blank" rel="external">dns</a></li>
</ol>
<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="http://www.runoob.com/angularjs/angularjs-directives.html" target="_blank" rel="external">菜鸟</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[自动化构建工具]]></title>
      <url>weison.org/2016/03/18/gulp/</url>
      <content type="html"><![CDATA[<h1 id="fis"><a href="#fis" class="headerlink" title="fis"></a>fis</h1><p><a href="http://fis.baidu.com/fis3/index.html" target="_blank" rel="external">FIS3</a> , 为你定制的前端工程构建工具</p>
<h2 id="启动服务"><a href="#启动服务" class="headerlink" title="启动服务"></a>启动服务</h2><ol>
<li>安装 <code>npm install fis -g</code></li>
<li>发布 <code>fis release</code></li>
<li>启动服务器 <code>fis server start</code></li>
<li>打开项目投送路径 <code>fis server open</code></li>
</ol>
<h1 id="gulp"><a href="#gulp" class="headerlink" title="gulp"></a>gulp</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>基于node.js环境的管道(pipe)流程式的前端自动构建工具<br>通常流程是：建立task-&gt;读取(src)文件储存在内存中-&gt;经过各种处理（pipe压缩、合并、改名等）-&gt;dest(输出)</p>
<a id="more"></a>
<h2 id="运行环境"><a href="#运行环境" class="headerlink" title="运行环境"></a>运行环境</h2><h3 id="安装nodejs"><a href="#安装nodejs" class="headerlink" title="安装nodejs"></a>安装nodejs</h3><ol>
<li>安装node.js -&gt; <a href="https://nodejs.org/en/" target="_blank" rel="external">node.js官网</a></li>
<li><code>node -v</code>检测是否安装成功 </li>
<li><code>npm install gulp -g</code> 全局安装gulp </li>
<li><code>npm install gulp --save-dev</code> 局部安装gulp</li>
<li><code>gulp -v</code>检测是否成功</li>
</ol>
<h3 id="安装gulp并初始化环境"><a href="#安装gulp并初始化环境" class="headerlink" title="安装gulp并初始化环境"></a>安装gulp并初始化环境</h3><ol>
<li><code>npm init</code>初始化项目环境,并进行项目的相关配置，注意package.json中的<code>name</code>不要命令为<code>gulp</code>否则会被拒绝安装</li>
<li><code>npm install --global gulp</code>全局安装gulp</li>
<li><code>npm install --save-dev gulp</code>开发环境中安装gulp</li>
<li>创建gulpfle.js来对gulp进行开发和配置</li>
</ol>
<h2 id="gulp命令"><a href="#gulp命令" class="headerlink" title="gulp命令"></a>gulp命令</h2><h3 id="var-依赖-require-39-依赖包名-39"><a href="#var-依赖-require-39-依赖包名-39" class="headerlink" title="var 依赖 = require(&#39;依赖包名&#39;)"></a><code>var 依赖 = require(&#39;依赖包名&#39;)</code></h3><h3 id="gulp-src-数据源-表示需要处理的文件"><a href="#gulp-src-数据源-表示需要处理的文件" class="headerlink" title="gulp.src()数据源,表示需要处理的文件"></a><code>gulp.src()</code>数据源,表示需要处理的文件</h3><ol>
<li><code>js/a.js</code> 指定确定的文件名</li>
<li><code>js/*.js</code> 目录下的所有js文件</li>
<li><code>js/**/*.js</code> 目录及其子目录下所有的js文件</li>
<li><code>!js/a.js</code> 除了js下a.js以外的所有文件</li>
<li><code>[js/a.js,js/b.js]</code> 还可以一个数组</li>
<li><code>*.+(js    css)</code> 匹配项目根目录下，所有后缀名为js或css的文件。</li>
</ol>
<h3 id="pipe"><a href="#pipe" class="headerlink" title="pipe"></a><code>pipe</code></h3><p>将上一步处理的数据换为当前的输入</p>
<h3 id="dest输出目录"><a href="#dest输出目录" class="headerlink" title="dest输出目录"></a><code>dest</code>输出目录</h3><h3 id="task-创建一个任务"><a href="#task-创建一个任务" class="headerlink" title="task 创建一个任务"></a><code>task</code> 创建一个任务</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">gulp.task(<span class="string">'task-name'</span>,[<span class="string">'任务名（本任务运行前要执行的任务）'</span>], <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> gulp.src(<span class="string">'source-files'</span>) <span class="comment">// 通过`gulp.src`导入源文件</span></div><div class="line">    .pipe(aGulpPlugin()) <span class="comment">// 将源文件交给gulp处理</span></div><div class="line">    .pipe(gulp.dest(<span class="string">'destination'</span>)) <span class="comment">// 通过`dest`命令导出处理后的文件</span></div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<h4 id="gulp-task-39-default-39-任务名-默认执行的命令"><a href="#gulp-task-39-default-39-任务名-默认执行的命令" class="headerlink" title="gulp.task(&#39;default&#39;,[任务名])默认执行的命令"></a><code>gulp.task(&#39;default&#39;,[任务名])</code>默认执行的命令</h4><p>gulp任务可以是同步或者异步的。在异步任务确定任务完成，可以通过调用函数的<code>done</code>。</p>
<h3 id="run-批量执行命令，但它不是按顺序执行的"><a href="#run-批量执行命令，但它不是按顺序执行的" class="headerlink" title="run 批量执行命令，但它不是按顺序执行的"></a><code>run</code> 批量执行命令，但它不是按顺序执行的</h3><h3 id="watch监听文件变化，执行命令"><a href="#watch监听文件变化，执行命令" class="headerlink" title="watch监听文件变化，执行命令"></a><code>watch</code>监听文件变化，执行命令</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">gulp.watch(<span class="string">'监听文件的地址'</span>, [<span class="string">'任务名称'</span>, <span class="string">'to'</span>, <span class="string">'run'</span>]);</div></pre></td></tr></table></figure>
<p>如<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">gulp.task(<span class="string">'watch'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	gulp.watch(<span class="string">'app/scss/**.scss'</span>,[sass]);</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>还可以在运行正式任务前先运行其它任务<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">gulp.task(<span class="string">'watch'</span>, [<span class="string">'array'</span>, <span class="string">'of'</span>, <span class="string">'tasks'</span>, <span class="string">'to'</span>, <span class="string">'complete'</span>,<span class="string">'before'</span>, <span class="string">'watch'</span>], <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="comment">// ...</span></div><div class="line">&#125;);</div><div class="line">gulp.task(<span class="string">'watch'</span>, [<span class="string">'任务1'</span>,<span class="string">'任务2'</span>], <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="comment">// ...</span></div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<h2 id="常用插件"><a href="#常用插件" class="headerlink" title="常用插件"></a>常用插件</h2><p>安装过程</p>
<ol>
<li><p>局部安装插件并通过在gulpfile.json中添加包依赖</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install gulp-sass --save-dev</div></pre></td></tr></table></figure>
</li>
<li><p>引入插件，使用变量保存</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> gulp = <span class="built_in">require</span>(<span class="string">'gulp'</span>);</div><div class="line">	sass = <span class="built_in">require</span>(<span class="string">'gulp-sass'</span>)</div></pre></td></tr></table></figure>
</li>
<li><p>在任务中使用</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">gulp.task(<span class="string">'sass'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	<span class="keyword">return</span> gulp.src(<span class="string">"源文件目录"</span>)</div><div class="line">			   .pipe(sass()) <span class="comment">//使用gulp-sass来编译文件</span></div><div class="line">			   .pipe(gulp.dest(<span class="string">"输出目录"</span>))</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="批量加载多个模块"><a href="#批量加载多个模块" class="headerlink" title="批量加载多个模块"></a>批量加载多个模块</h3><ol>
<li><code>gulp-load-plugins</code></li>
</ol>
<h3 id="html"><a href="#html" class="headerlink" title="html"></a>html</h3><h3 id="css"><a href="#css" class="headerlink" title="css"></a>css</h3><ol>
<li>gulp-sass 编译sass文件</li>
</ol>
<h3 id="js"><a href="#js" class="headerlink" title="js"></a>js</h3><ol>
<li><code>gulp-useref</code>会将多个文件拼接成单一文件，并输出到相应目录</li>
</ol>
<ul>
<li><p>安装</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install gulp-useref --save-dev</div></pre></td></tr></table></figure>
</li>
<li><p>引用</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> useref = <span class="built_in">require</span>(<span class="string">'gulp-useref'</span>);</div></pre></td></tr></table></figure>
</li>
<li><p>使用</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">gulp.task(<span class="string">'useref'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="keyword">return</span> gulp.src(<span class="string">'app/*.html'</span>)</div><div class="line">        .pipe(useref())</div><div class="line">        .pipe(gulp.dest(<span class="string">'dist'</span>));</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
</li>
<li><p>在html中添加标记</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- build:&lt;type&gt; &lt;path&gt; --&gt;</span></div><div class="line">... HTML Markup, list of script / link tags.</div><div class="line"><span class="comment">&lt;!-- endbuild --&gt;</span></div></pre></td></tr></table></figure>
</li>
</ul>
<p>如：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!--build:js js/main.min.js --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/lib/a-library.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/lib/another-library.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/main.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="comment">&lt;!-- endbuild --&gt;</span></div></pre></td></tr></table></figure></p>
<h3 id="livereload"><a href="#livereload" class="headerlink" title="livereload"></a>livereload</h3><h3 id="文件重命名"><a href="#文件重命名" class="headerlink" title="文件重命名"></a>文件重命名</h3><h3 id="合并文件"><a href="#合并文件" class="headerlink" title="合并文件"></a>合并文件</h3><ul>
<li>gulp-rev 给每个文件算也一个hash码，然后把这些文件的名字修改掉</li>
<li>gulp-rev-replace 根据修改后的hash文件，修改匹配路径</li>
<li>gulp-useref 通过注释的方式让gulp实现如css,js合并的操作</li>
<li>gulp-filter 从文件集合中筛选出特定的文件，处理完成后通过<code>restore</code>放后文件流中继续下一步操作</li>
<li>gulp-uglify 压缩js代码</li>
<li>gulp-csso 压缩css</li>
</ul>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div></pre></td><td class="code"><pre><div class="line">/* </div><div class="line">  创建依赖   http://gulpjs.com/plugins/</div><div class="line"> */</div><div class="line">var gulp = require('gulp'),</div><div class="line">    htmlmin = require('gulp-htmlmin'), //压缩html</div><div class="line"></div><div class="line">    rev  = require('gulp-rev'), //生成HASH码</div><div class="line">    revReplace = require('gulp-rev-replace'), //根据hash名替换html中引用的路径</div><div class="line">   </div><div class="line">    filter = require('gulp-filter'), //文件过滤，再利用resotre让数据回到流中</div><div class="line">    </div><div class="line">    uglify = require('gulp-uglify'), //js 压缩</div><div class="line">    concat = require('gulp-concat'), //合并js文件</div><div class="line">    pump = require('pump'),</div><div class="line"></div><div class="line">    sass = require('gulp-sass'), //编译SASS</div><div class="line">    autoprefixer = require('gulp-autoprefixer'), //补充前缀</div><div class="line">    sourcemaps = require('gulp-sourcemaps'),</div><div class="line">    cleanCSS = require('gulp-clean-css'),    // css压缩</div><div class="line"></div><div class="line">    imagemin = require('gulp-imagemin'), //图片压缩 </div><div class="line"></div><div class="line">    zip = require('gulp-zip'); //打包</div><div class="line"></div><div class="line"></div><div class="line">/*</div><div class="line">  定义路径</div><div class="line"> */</div><div class="line">var src = &#123;</div><div class="line">  html : 'src/pageSrc/**/**.html',</div><div class="line">  sass : 'src/css/**/**.scss',</div><div class="line">  css : 'src/css/**/**.css',</div><div class="line">  img : 'src/images/**/**',</div><div class="line">  js : 'src/js/**/**.js',</div><div class="line">  libJs : ['src/libs/jquery/1.11.2/jquery.min.js',</div><div class="line">          'src/libs/jquery/plugins/swiper/swiper-3.2.7.min.js',</div><div class="line">          'src/libs/angular/1.5.6/angular.min.js',</div><div class="line">          'src/libs/angular/plugins/angular-touch.js',</div><div class="line">          'src/libs/angular/plugins/angular-ui-router-0.2.15.js',</div><div class="line">          'src/js/service/bootstrap-validate.js',</div><div class="line">          'src/js/service/auto-router-1.0.js',</div><div class="line">          ]</div><div class="line">&#125;</div><div class="line">var dest = &#123;</div><div class="line">  html : 'dest/pageSrc',</div><div class="line">  img : 'dest/images',</div><div class="line">  css : 'dest/css',</div><div class="line">  js : 'dest/js',</div><div class="line">  libJs : 'dest/lib/js',</div><div class="line">  libJsPath : 'dest/lib/js/lib.js',</div><div class="line">  manifest : 'dest/manifest',</div><div class="line">  rev : &#123;</div><div class="line">          // 配置导出的名称</div><div class="line">         path : &#123;</div><div class="line">          css : 'rev-manifest-css.json'</div><div class="line">         &#125;,</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">/*</div><div class="line">  图片压缩</div><div class="line"> */</div><div class="line">gulp.task('imgMin',function()&#123;</div><div class="line">  gulp.src(src.img)</div><div class="line">      .pipe(imagemin())</div><div class="line">      .pipe(gulp.dest(dest.img));</div><div class="line">&#125;);</div><div class="line"></div><div class="line">/*</div><div class="line">  html 压缩</div><div class="line"> */</div><div class="line"> gulp.task('html', function() &#123;</div><div class="line">   return gulp.src(src.html)</div><div class="line">     // .pipe(htmlmin(&#123;collapseWhitespace: true&#125;)) 压缩时有问题</div><div class="line">     .pipe(gulp.dest(dest.html))</div><div class="line"> &#125;);</div><div class="line"></div><div class="line">/*</div><div class="line">  处理sass</div><div class="line"> */</div><div class="line">gulp.task('sass',function()&#123;</div><div class="line">  return gulp.src(src.sass)</div><div class="line">    .pipe(sourcemaps.init())</div><div class="line">    .pipe(autoprefixer())</div><div class="line">    .pipe(sass(&#123;outputStyle: 'compressed'&#125;).on('error', sass.logError))</div><div class="line">    .pipe(sourcemaps.write('./maps'))</div><div class="line">    .pipe(gulp.dest(dest.css));</div><div class="line">&#125;);</div><div class="line"></div><div class="line"></div><div class="line">/*</div><div class="line">  压缩css</div><div class="line"> */</div><div class="line"> gulp.task('css', function () &#123;</div><div class="line">     return gulp.src(src.css)</div><div class="line">         // .pipe(autoprefixer())</div><div class="line">         .pipe(cleanCSS(&#123;compatibility: 'ie8'&#125;))</div><div class="line">         .pipe(gulp.dest(dest.css))</div><div class="line">         .pipe(rev())</div><div class="line">         .pipe(gulp.dest(dest.css))</div><div class="line">         .pipe(rev.manifest(&#123;path : dest.rev.path.css&#125;))</div><div class="line">         .pipe(gulp.dest(dest.manifest))</div><div class="line"> &#125;);</div><div class="line"></div><div class="line"> /*</div><div class="line">   libJs 合并常用的js文件</div><div class="line">  */</div><div class="line"> gulp.task('libJs',function()&#123;</div><div class="line">   gulp.src(src.libJs)</div><div class="line">   .pipe(sourcemaps.init())</div><div class="line">   .pipe(concat(&#123;path: 'lib.js', cwd: ''&#125;))</div><div class="line">   .pipe(sourcemaps.write('./maps'))</div><div class="line">   .pipe(gulp.dest(dest.libJs))</div><div class="line">   // .pipe(rev())</div><div class="line">   // .pipe(rev.manifest(&#123;merge: false&#125;))</div><div class="line">   // .pipe(gulp.dest(dest.manifest))</div><div class="line"> &#125;);</div><div class="line"></div><div class="line"> /*</div><div class="line">  js hash处理</div><div class="line">  */</div><div class="line">  gulp.task('js', function () &#123;</div><div class="line">    return  gulp.src([src.js,dest.libJsPath])</div><div class="line">          // uglify(),</div><div class="line">          .pipe(rev())</div><div class="line">          .pipe(gulp.dest(dest.js))</div><div class="line">          .pipe(rev.manifest(&#123;merge: false&#125;))</div><div class="line">          .pipe(gulp.dest(dest.manifest))</div><div class="line">  &#125;);</div><div class="line">  gulp.task('replace',function()&#123;</div><div class="line">    var manifest = gulp.src("./" + dest.manifest+"/rev-manifest.json");</div><div class="line">    return gulp.src("index.html")</div><div class="line">      .pipe(revReplace(&#123;manifest: manifest&#125;))</div><div class="line">      .pipe(gulp.dest('dest/'));</div><div class="line">  &#125;)</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">  /*</div><div class="line">    打包文件</div><div class="line">   */</div><div class="line">  gulp.task('zip', () =&gt; &#123;</div><div class="line">      return gulp.src(['dest/*','index.html'])</div><div class="line">          .pipe(zip('archive.zip'))</div><div class="line">          .pipe(gulp.dest(dest.libJs));</div><div class="line">  &#125;);</div></pre></td></tr></table></figure>
<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ol>
<li><a href="http://javascript.ruanyifeng.com/tool/gulp.html#toc1" target="_blank" rel="external">阮一峰-Gulp：任务自动管理工具</a></li>
<li><a href="http://www.w3cplus.com/blog/tags/528.html" target="_blank" rel="external">w3cplus-Gulp 系列教程</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/21312474" target="_blank" rel="external">webpack + gulp 构建完整前端工作流</a></li>
<li><a href="https://segmentfault.com/a/1190000002932998" target="_blank" rel="external">Gulp学习指南之CSS合并、压缩与MD5命名及路径替换</a></li>
<li><a href="http://markpop.github.io/2014/09/17/Gulp%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/" target="_blank" rel="external">特首-Gulp入门教程</a></li>
<li><a href="http://www.w3ctrain.com/2015/12/22/gulp-for-beginners/" target="_blank" rel="external">Gulp新手入门教程</a></li>
<li><a href="http://www.75team.com/post/gulp-build.html" target="_blank" rel="external">奇舞团-使用Gulp构建网站小白教程</a></li>
<li><a href="https://segmentfault.com/a/1190000000372547" target="_blank" rel="external">前端构建工具gulp入门教程</a></li>
<li><a href="http://www.ydcss.com/archives/18" target="_blank" rel="external">gulp详细入门教程</a></li>
<li><a href="http://www.dbpoo.com/getting-started-with-gulp/" target="_blank" rel="external">Gulp安装及配合组件构建前端开发一体化</a></li>
<li><a href="http://www.gulpjs.com.cn/" target="_blank" rel="external">gulpJs中文网</a></li>
<li><a href="http://www.mamicode.com/info-detail-517085.html" target="_blank" rel="external">前端构建之gulp与常用插件</a></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[正则表达式]]></title>
      <url>weison.org/2016/03/12/regex/</url>
      <content type="html"><![CDATA[<h1 id="正则表达式含义"><a href="#正则表达式含义" class="headerlink" title="正则表达式含义"></a>正则表达式含义</h1><p>表达一个计算机所能理解的规则，是强大的字符串匹配工具,它使用单个字符串来描述、匹配一系列符合某个句法规则的字符串</p>
<h1 id="写法"><a href="#写法" class="headerlink" title="写法"></a>写法</h1><h2 id="js风格-new-RegExp-‘a’-’i’"><a href="#js风格-new-RegExp-‘a’-’i’" class="headerlink" title="js风格 new RegExp(‘a’,’i’)"></a>js风格 new RegExp(‘a’,’i’)</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> rg = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">'a'</span>);</div><div class="line"><span class="keyword">var</span> str = <span class="string">'abcd'</span>;</div><div class="line">str.search(rg); <span class="comment">// =&gt; 0</span></div></pre></td></tr></table></figure>
<h2 id="perl风格-a-i"><a href="#perl风格-a-i" class="headerlink" title="perl风格 /a/i"></a>perl风格 /a/i</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> rg = <span class="regexp">/a/</span>;</div><div class="line"><span class="keyword">var</span> str = <span class="string">'abcd'</span>;</div><div class="line">str.search(rg); <span class="comment">// =&gt; 0</span></div></pre></td></tr></table></figure>
<h1 id="范围"><a href="#范围" class="headerlink" title="范围"></a>范围</h1><h2 id="n-正好有几个"><a href="#n-正好有几个" class="headerlink" title="{n}正好有几个"></a><code>{n}</code>正好有几个</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> re = <span class="regexp">/[1-9]\d&#123;7&#125;/</span> <span class="comment">// =&gt; 简单的电话号码，代表第一位是1-9，后面接着7个数字</span></div></pre></td></tr></table></figure>
<h2 id="n-m-最小n次，最多m次"><a href="#n-m-最小n次，最多m次" class="headerlink" title="{n,m}最小n次，最多m次"></a><code>{n,m}</code>最小n次，最多m次</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> re = <span class="regexp">/[1-9]\d&#123;4,10&#125;/</span> <span class="comment">// =&gt; 开头是1-9，接下来出现最小4数字，最多10个数字</span></div></pre></td></tr></table></figure>
<h2 id="n-从n到无限大"><a href="#n-从n到无限大" class="headerlink" title="{n,}从n到无限大"></a><code>{n,}</code>从n到无限大</h2><h2 id="可有可无-代表分组"><a href="#可有可无-代表分组" class="headerlink" title="? 可有可无,()代表分组"></a><code>?</code> 可有可无,<code>()</code>代表分组</h2><p>()? 代表括号里面的内容可有可无<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//固话 010-89981234-123 前面的区号和后面的分机号可有可无，因此可以写成</span></div><div class="line"><span class="keyword">var</span> re = <span class="regexp">/(\d&#123;3&#125;-)?[1-9]&#123;7&#125;(-\d&#123;1,5&#125;)?/</span></div></pre></td></tr></table></figure></p>
<h2 id="量词，若干-多少都可以"><a href="#量词，若干-多少都可以" class="headerlink" title="+量词，若干(多少都可以)"></a><code>+</code>量词，若干(多少都可以)</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> str = <span class="string">'123gbd 34 2 123123123'</span>;</div><div class="line">str.match(<span class="regexp">/\d+/g</span>); <span class="comment">// =&gt; ["123",'34', "2", "123123123"]</span></div></pre></td></tr></table></figure>
<h2 id="加上iignore，忽略英文大小写"><a href="#加上iignore，忽略英文大小写" class="headerlink" title="加上iignore，忽略英文大小写"></a>加上<code>i</code>ignore，忽略英文大小写</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> rg = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">'a'</span>,<span class="string">'i'</span>);</div><div class="line"><span class="keyword">var</span> str = <span class="string">'Abcd'</span>;</div><div class="line">str.search(rg); <span class="comment">// =&gt; 0</span></div><div class="line">str.search(<span class="regexp">/a/i</span>); <span class="comment">// =&gt; 0</span></div></pre></td></tr></table></figure>
<h2 id="gglobal，找出全部内部"><a href="#gglobal，找出全部内部" class="headerlink" title="gglobal，找出全部内部"></a><code>g</code>global，找出全部内部</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> str = <span class="string">'123gbd 34'</span>;</div><div class="line">str.match(<span class="regexp">/\d/g</span>); <span class="comment">// =&gt; ["1", "2", "3", "3", "4"]</span></div></pre></td></tr></table></figure>
<h2 id="或"><a href="#或" class="headerlink" title="|或"></a><code>|</code>或</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> str = <span class="string">'电脑出现依赖服务或组无法电脑启动错误怎么办'</span>;</div><div class="line"><span class="keyword">var</span> re = <span class="regexp">/电脑|服务/g</span>;</div><div class="line"><span class="keyword">var</span> str2 = str.replace(re,<span class="string">'***'</span>);</div><div class="line"><span class="built_in">console</span>.log(str2); <span class="comment">// =&gt; ***出现依赖***或组无法***启动错误怎么办</span></div></pre></td></tr></table></figure>
<h2 id="元字符（方括号）"><a href="#元字符（方括号）" class="headerlink" title="[]元字符（方括号）"></a><code>[]</code>元字符（方括号）</h2><h3 id="n1n2-x-代表或，即只要符合括号内的任意一个，都算是符合要求"><a href="#n1n2-x-代表或，即只要符合括号内的任意一个，都算是符合要求" class="headerlink" title="[n1n2]x 代表或，即只要符合括号内的任意一个，都算是符合要求"></a><code>[n1n2]x</code> 代表或，即只要符合括号内的任意一个，都算是符合要求</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> str = <span class="string">'axd exd bcd bxd dxd dd'</span>;</div><div class="line"><span class="keyword">var</span> re = <span class="regexp">/[abc]xd/g</span>;</div><div class="line"><span class="built_in">console</span>.log(str.match(re)); <span class="comment">// =&gt;[axd,bxd]</span></div></pre></td></tr></table></figure>
<h3 id="n1-n2-范围-0-9-a-z"><a href="#n1-n2-范围-0-9-a-z" class="headerlink" title="[n1-n2]范围,[0-9],[a-z]"></a><code>[n1-n2]</code>范围,[0-9],[a-z]</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> s = <span class="string">'123ab 431cd 1ce31'</span>;</div><div class="line"><span class="keyword">var</span> re = <span class="regexp">/[0-9]+/g</span>;</div><div class="line"><span class="built_in">console</span>.log(s.match(re)); <span class="comment">//=&gt;['123','431','1','31'];</span></div></pre></td></tr></table></figure>
<h3 id="n1-n2-排除"><a href="#n1-n2-排除" class="headerlink" title="[^n1-n2]排除"></a><code>[^n1-n2]</code>排除</h3><p>[^a-z]排除a-z,[^a-z0-9]还可以连着用，代表同时排队a-z和0-9<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line">   <span class="keyword">var</span> s = <span class="string">'1231+-bc/d'</span>;</div><div class="line">   <span class="keyword">var</span> re = <span class="regexp">/[^a-z0-9]/g</span>;</div><div class="line">   <span class="built_in">console</span>.log(s.match(re)); <span class="comment">//=&gt;['+','-','/'];</span></div><div class="line"> &lt;<span class="regexp">/script&gt;</span></div></pre></td></tr></table></figure></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//过滤HTML标签</span></div><div class="line"><span class="keyword">var</span> str = <span class="string">'&lt;ul&gt;&lt;li&gt;&lt;li&gt;&lt;a href="/sort/5/1.html"&gt;悬疑&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="/sort/6/1.html"&gt;游戏&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="/sort/7/1.html"&gt;女生穿越&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="/sort/15/1.html"&gt;现言&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="/sort/16/1.html"&gt;古言&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="/sort/17/1.html"&gt;豪门&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="/sort/18/1.html"&gt;青春&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="/sort/10/1.html"&gt;未归类小说&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;'</span>;</div><div class="line"><span class="keyword">var</span> re = <span class="regexp">/&lt;[^&lt;&gt;]+&gt;/g</span>; <span class="comment">//除了&lt;&gt;以外的任意字符</span></div><div class="line"><span class="built_in">console</span>.log(str.replace(re,<span class="string">''</span>)); <span class="comment">// =&gt; 悬疑游戏女生穿越现言古言豪门青春未归类小说</span></div></pre></td></tr></table></figure>
<h1 id="转义"><a href="#转义" class="headerlink" title="转义"></a>转义</h1><ul>
<li><p><code>.</code>点，代表除了换行符以外的任意字符，尽量不要用，容易出问题</p>
</li>
<li><p><code>\d</code>代表任意数字 </p>
  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line"><span class="keyword">var</span> str = <span class="string">'abfaf3123 5'</span>;</div><div class="line"><span class="built_in">console</span>.log(str.search(<span class="regexp">/\d/</span>)); <span class="comment">// =&gt;5    </span></div><div class="line"> &lt;<span class="regexp">/script&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p><code>\D</code> 代表除了0到9的任意字符，等价于[^0-9]</p>
</li>
<li><p><code>\w</code>代表数字0-9、或字母a-z或A-Z(大小写)、或下划线,类似于[a-z0-9_]</p>
</li>
<li><p><code>\W</code> 代表除了a-z,0-9,下划线以外的字符，等价于[^a-z0-9_]</p>
</li>
<li><p><code>\s</code> space,代表空格，tab、换行符、制表符</p>
</li>
<li><p><code>\S</code> 代表非空格，tab、换行符、制表符</p>
</li>
<li><p><code>\t</code> tab</p>
</li>
<li><code>\r</code> 回车</li>
<li><code>\n</code> 换行</li>
<li><code>\v</code> 垂直制表符</li>
<li><code>\f</code> 换页符</li>
<li>特殊字符转义<code>\</code>用右斜线进行转义</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line">	<span class="regexp">/\^abc/</span>.test(<span class="string">'^abc'</span>); <span class="comment">//true   </span></div><div class="line"> &lt;<span class="regexp">/script&gt;</span></div></pre></td></tr></table></figure>
<h1 id="重复"><a href="#重复" class="headerlink" title="重复"></a>重复</h1><h1 id="标记位"><a href="#标记位" class="headerlink" title="标记位"></a>标记位</h1><ul>
<li><p><code>global</code><br>用于匹配全局，如果不匹配就会查找到第一个就结束了</p>
</li>
<li><p><code>ignorCase</code><br>不区分大小写</p>
</li>
<li><p><code>multiline</code><br>有分行或者换行的时候，是否分行或换行地继续查找</p>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line"><span class="regexp">/abc/gim</span>.test(<span class="string">"ABC"</span>); <span class="comment">// =&gt; true </span></div><div class="line"><span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">'abc'</span>,<span class="string">"mgi"</span>)</div><div class="line"> &lt;<span class="regexp">/script&gt;</span></div></pre></td></tr></table></figure>
<h1 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h1><h2 id="search-查找符合规则的字符-返回索引值"><a href="#search-查找符合规则的字符-返回索引值" class="headerlink" title="search() 查找符合规则的字符,返回索引值"></a><code>search()</code> 查找符合规则的字符,返回索引值</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> str = <span class="string">'abcd'</span>;</div><div class="line">str.search(<span class="regexp">/b/</span>); <span class="comment">// =》1</span></div></pre></td></tr></table></figure>
<h2 id="match-把符合规则的内容提取出来"><a href="#match-把符合规则的内容提取出来" class="headerlink" title="match() 把符合规则的内容提取出来"></a><code>match()</code> 把符合规则的内容提取出来</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> str = <span class="string">'abfaf3123 5'</span>;</div><div class="line"><span class="built_in">console</span>.log(str.match(<span class="regexp">/\d/</span>)); <span class="comment">//</span></div></pre></td></tr></table></figure>
<h2 id="replace-规则，替换的内容-替换符合规则的内容"><a href="#replace-规则，替换的内容-替换符合规则的内容" class="headerlink" title="replace(规则，替换的内容)替换符合规则的内容"></a><code>replace(规则，替换的内容)</code>替换符合规则的内容</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> str = <span class="string">'abcdaec'</span>;</div><div class="line"><span class="keyword">var</span> re = <span class="regexp">/a/g</span>;</div><div class="line">str.replace(re,<span class="number">0</span>);</div></pre></td></tr></table></figure>
<h2 id="re-test-str-检验字符串是否符合规则"><a href="#re-test-str-检验字符串是否符合规则" class="headerlink" title="re.test(str)检验字符串是否符合规则"></a><code>re.test(str)</code>检验字符串是否符合规则</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"txt1"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">id</span>=<span class="string">"btn1"</span> <span class="attr">value</span>=<span class="string">"验证"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">		<span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">			<span class="keyword">var</span> oT = <span class="built_in">document</span>.getElementById(<span class="string">'txt1'</span>);</div><div class="line">			<span class="keyword">var</span> btn1 = <span class="built_in">document</span>.getElementById(<span class="string">'btn1'</span>);</div><div class="line">			<span class="comment">//验证邮箱 一串数字、字符串、下划线  @ 一串英文</span></div><div class="line">			<span class="keyword">var</span> re = <span class="regexp">/^\w+@[0-9a-z]+\.[a-z]+$/i</span>;</div><div class="line">			btn1.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">				</div><div class="line">				<span class="keyword">if</span>(re.test(oT.value))&#123;</div><div class="line">					alert(<span class="string">'验证成功'</span>);</div><div class="line">				&#125;<span class="keyword">else</span>&#123;</div><div class="line">					alert(<span class="string">'格式错误'</span>);</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	<span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">body</span>&gt;</span></div></pre></td></tr></table></figure>
<p>*注意，test方法在验证的时候，只要有一部分符合要求，它都会返回true<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> str = <span class="string">'1231abcd'</span>;</div><div class="line"><span class="keyword">var</span> re = <span class="regexp">/\d+/</span>;</div><div class="line">alert(re.test(str)); <span class="comment">// =&gt; true，因为前面的1231符合要求</span></div></pre></td></tr></table></figure></p>
<p>所有为了避免这种情况可以用</p>
<h3 id="字符串开头，-结尾来让规则达到完整匹配"><a href="#字符串开头，-结尾来让规则达到完整匹配" class="headerlink" title="^字符串开头，$结尾来让规则达到完整匹配"></a><code>^</code>字符串开头，<code>$</code>结尾来让规则达到完整匹配</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> str = <span class="string">'1231abcd'</span>;</div><div class="line"><span class="keyword">var</span> re = <span class="regexp">/^\d+$/</span>;</div><div class="line">alert(re.test(str)); <span class="comment">// =&gt; false</span></div></pre></td></tr></table></figure>
<p>获取字符串中的数字<br>1.使用<code>charAt()</code>获取字符，然后利用隐性转换对比字符是不是&gt;=0且&lt;9</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line">	<span class="keyword">var</span> str =<span class="string">'1020afda  +=-0)30ade 3'</span>;</div><div class="line">	<span class="keyword">var</span> tmp = <span class="string">''</span>;</div><div class="line">	<span class="keyword">var</span> arr = [];</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;str.length;i++)&#123;</div><div class="line">		<span class="comment">//利用js的隐性转换将字符进行比较,注意要加上''，这样就可以排除空格了</span></div><div class="line">		<span class="keyword">if</span>(str.charAt(i) &gt;= <span class="string">'0'</span> &amp;&amp; str.charAt(i) &lt;= <span class="string">'9'</span> )&#123; </div><div class="line">			 <span class="comment">//将是数字的内容串联起来</span></div><div class="line">			tmp += str.charAt(i); </div><div class="line">		&#125;<span class="keyword">else</span>&#123;</div><div class="line">			<span class="comment">//假如接下来的内容不是数字，那么先将内容推送到数组</span></div><div class="line">			<span class="keyword">if</span>(tmp)&#123;</div><div class="line">				arr.push(tmp);</div><div class="line">				<span class="comment">//为了避免重复添加，数据添加到数组后将tmp的内容清空</span></div><div class="line">				tmp = <span class="string">''</span>;</div><div class="line">			&#125;</div><div class="line">		&#125;			</div><div class="line">	&#125;</div><div class="line">	<span class="comment">//考虑到全都是数字的情况</span></div><div class="line">	<span class="keyword">if</span>(tmp)&#123;</div><div class="line">		arr.push(tmp);</div><div class="line">		tmp = <span class="string">''</span>;</div><div class="line">	&#125;</div><div class="line">	<span class="built_in">console</span>.log(arr);</div><div class="line"><span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></div></pre></td></tr></table></figure>
<h1 id="常用正则表达式"><a href="#常用正则表达式" class="headerlink" title="常用正则表达式"></a>常用正则表达式</h1><ol>
<li>正整数    <code>/^[1-9]\d*$/</code></li>
<li>整数    <code>/^[+]?\d+(.)?(\d+)?$/</code></li>
<li>中文    <code>/^[+]?\d+(.)?(\d+)?$/</code></li>
</ol>
<ul>
<li><a href="http://www.imooc.com/video/8065" target="_blank" rel="external">JavaScript深入浅出 10-1 正则表达式</a></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[chrome]]></title>
      <url>weison.org/2016/03/10/chrome/</url>
      <content type="html"><![CDATA[<h2 id="快捷操作"><a href="#快捷操作" class="headerlink" title="快捷操作"></a>快捷操作</h2><ol>
<li><code>ctrl+shift+delete</code> 清除浏览器数据(chrome)<br><img src="http://7xovt0.com1.z0.glb.clouddn.com/chrome.png" alt="http://7xovt0.com1.z0.glb.clouddn.com/chrome.png"></li>
<li><code>F12</code> 打开审查元素面板</li>
<li><code>Esc</code> 切换控制台显示状态</li>
<li>按着元素拖动，可改变元素当前的DOM位置</li>
</ol>
<h2 id="js调试"><a href="#js调试" class="headerlink" title="js调试"></a>js调试</h2><ol>
<li><code>alert</code>把我们需要输出的内容&lt;先转换为字符串&gt;再输出 </li>
<li><code>document.write()</code>在页面中输出内容，常用于在页面中添加一个广告</li>
<li><code>console.log</code>将内容输出到控制台</li>
<li><code>console.dir()</code>在控制台输出一个详细的对象信息</li>
<li><code>console.table()</code>把一个数据（json）以按照表格的样式输出，我们在查点结构时会更清晰一些</li>
<li>在Sources里添加断点<br><img src="http://7xovt0.com1.z0.glb.clouddn.com/blog2016-03-10_225237.png" alt=""></li>
<li>在代码中添加<code>debugger</code><br><img src="http://7xovt0.com1.z0.glb.clouddn.com/blog2016-03-10_231020.png" alt=""></li>
<li>选中元素后查看Element下的Event Listeners可以监控元素绑定的事件<br><img src="http://7xovt0.com1.z0.glb.clouddn.com/blog%E6%9C%AA%E6%A0%87%E9%A2%98-2.jpg" alt=""><br><img src="http://7xovt0.com1.z0.glb.clouddn.com/blog%E6%9C%AA%E6%A0%87%E9%A2%98-1.jpg" alt=""></li>
<li>全局搜索内容（包含html,css,js）<br><img src="http://7xovt0.com1.z0.glb.clouddn.com/blog2016-03-11_002730.png" alt=""></li>
</ol>
<h2 id="Network"><a href="#Network" class="headerlink" title="Network"></a>Network</h2><p><img src="http://7xovt0.com1.z0.glb.clouddn.com/blog1.jpg" alt=""><br><img src="http://7xovt0.com1.z0.glb.clouddn.com/blog22.jpg" alt=""></p>
<ol>
<li>Waiting(TTFB)向服务器发起请求到服务器响应并返回第一个字节的时间</li>
<li>initiator，请求是因为哪一个内容出发的，比如说这个css就是由Index的第3行来触发的</li>
<li>打勾后禁用缓存</li>
<li>打勾后会将之前的请求记录，而不只显示最新数据</li>
<li>模拟下载速度</li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[浏览器渲染引擎]]></title>
      <url>weison.org/2016/03/08/browser-rendering-Engineer/</url>
      <content type="html"><![CDATA[<h3 id="执行顺序"><a href="#执行顺序" class="headerlink" title="执行顺序"></a>执行顺序</h3><p>解释HTML-&gt;Dom Tree + css Tree - &gt; 构建Render Tree(将cssTree和Dom Tree关联在一起) -&gt;布局（计算可视元素的的大小）-&gt;绘制(可视元素的颜色、字体大小)</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[sublime]]></title>
      <url>weison.org/2016/03/01/sublime/</url>
      <content type="html"><![CDATA[<h3 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h3><ol>
<li>生成占位文件 <code>Lorem</code></li>
<li><p><code>meta:vp</code> 移动端的viewport</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0"</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p><code>meta:utf</code></p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"Content-Type"</span> <span class="attr">content</span>=<span class="string">"text/html;charset=UTF-8"</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p><code>link:favicon</code> 生成favicon图标</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"shortcut icon"</span> <span class="attr">type</span>=<span class="string">"image/x-icon"</span> <span class="attr">href</span>=<span class="string">"favicon.ico"</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p><code>input:p</code> 生成密码输入框</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">name</span>=<span class="string">""</span> <span class="attr">id</span>=<span class="string">""</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p><code>input:c</code> 复选框</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">""</span> <span class="attr">id</span>=<span class="string">""</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p><code>input:s</code> 提交按钮</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">""</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p><code>!</code> 生成基本文档声明</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">	</div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="new-snippet"><a href="#new-snippet" class="headerlink" title="new snippet"></a><code>new snippet</code></h3><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">snippet</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">content</span>&gt;</span>&lt;![CDATA[</div><div class="line">	正文内容</div><div class="line">Hello, $&#123;1:焦点1&#125; is a $&#123;2:焦点2&#125;.</div><div class="line">]]&gt;<span class="tag">&lt;/<span class="name">content</span>&gt;</span></div><div class="line">	<span class="comment">&lt;!-- Optional: Set a tabTrigger to define how to trigger the snippet --&gt;</span></div><div class="line">	<span class="comment">&lt;!-- &lt;tabTrigger&gt;触发该代码片段的名称&lt;/tabTrigger&gt; --&gt;</span></div><div class="line">	<span class="comment">&lt;!-- Optional: Set a scope to limit where the snippet will trigger --&gt;</span></div><div class="line">	<span class="comment">&lt;!-- &lt;scope&gt;source.python&lt;/scope&gt; --&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">snippet</span>&gt;</span></div></pre></td></tr></table></figure>
<ul>
<li><content>

</content></li>
</ul>
<h3 id="快速切换项目"><a href="#快速切换项目" class="headerlink" title="快速切换项目"></a>快速切换项目</h3><ol>
<li>project -&gt; sava project as 保存内容</li>
<li>切换项目后可使用<code>ctrl + alt + p</code>快速切换</li>
<li>如果快捷键失效，可以在preference -&gt; key Binding user 增加<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line"><span class="string">"keys"</span>: [<span class="string">"ctrl+alt+p"</span>], <span class="string">"command"</span>: <span class="string">"prompt_select_workspace"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ol>
<p>参考链接</p>
<ol>
<li><a href="http://jingyan.baidu.com/article/48206aead94f4e216ad6b396.html" target="_blank" rel="external">Sublime HTML 快捷键</a></li>
<li><a href="http://www.tuicool.com/articles/ZR3e2mA" target="_blank" rel="external">多项目并行开发如何做到快速切换——sublime Text3</a></li>
<li><a href="http://www.whidy.net/sublime-text-3-3103-ctrl-alt-p-cannot-use.html" target="_blank" rel="external">关于sublime text 3(3103)版本Ctrl+Alt+P无法正常使用解决办法</a></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[闭包closure]]></title>
      <url>weison.org/2016/02/23/closure/</url>
      <content type="html"><![CDATA[<h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><h4 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h4><ol>
<li>函数嵌套函数,内部的函数可以引用外部函数的变量和参数，参数和变量不会被垃圾回收机制收回。</li>
<li>这是一种数据结构,而且必须满足两个条件</li>
</ol>
<ul>
<li>必须是返回一个函数</li>
<li>这个返回的函数里必须引用到外部栈区的内容<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">outter</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	<span class="keyword">var</span> name = <span class="string">'join'</span>;</div><div class="line">	<span class="function"><span class="keyword">function</span> <span class="title">inner</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	   alert(name);</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> inner;</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> getName = outter();</div></pre></td></tr></table></figure>
</li>
</ul>
<p><img src="http://7xovt0.com1.z0.glb.clouddn.com/blog%E7%94%BB%E6%9D%BF%201.png" alt="执行流程"></p>
<h4 id="垃圾回收机制"><a href="#垃圾回收机制" class="headerlink" title="垃圾回收机制"></a>垃圾回收机制</h4><h3 id="好处"><a href="#好处" class="headerlink" title="好处"></a>好处</h3><h4 id="希望一个变量长期存在于内存中"><a href="#希望一个变量长期存在于内存中" class="headerlink" title="希望一个变量长期存在于内存中"></a>希望一个变量长期存在于内存中</h4><h4 id="不污染全局变量-隔离作用域"><a href="#不污染全局变量-隔离作用域" class="headerlink" title="不污染全局变量(隔离作用域)"></a>不污染全局变量(隔离作用域)</h4><p>避免因为名字一样，而造成在js合并过程中，后面的变量覆盖前面的变量<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	(<span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>)</span>&#123;</div><div class="line">		<span class="keyword">var</span> name = <span class="string">'lili'</span>;</div><div class="line">		(<span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</div><div class="line">			alert(name);</div><div class="line">		&#125;)();</div><div class="line">	&#125;)();</div><div class="line">	(<span class="function"><span class="keyword">function</span> <span class="title">b</span>(<span class="params"></span>)</span>&#123;</div><div class="line">				<span class="keyword">var</span> name = <span class="string">'lili2'</span>;</div><div class="line">				(<span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</div><div class="line">					alert(name);</div><div class="line">				&#125;)();</div><div class="line">			&#125;)();</div><div class="line"></div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">counter</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	<span class="keyword">var</span> num =<span class="number">0</span>;</div><div class="line">	<span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	num ++;</div><div class="line">	alert(num);</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> counterPtr = counter();</div><div class="line">counterPtr();</div></pre></td></tr></table></figure></p>
<h4 id="私有成员的存在"><a href="#私有成员的存在" class="headerlink" title="私有成员的存在"></a>私有成员的存在</h4><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><h4 id="保存变量环境，在循环中直接找到对应元素的索引"><a href="#保存变量环境，在循环中直接找到对应元素的索引" class="headerlink" title="保存变量环境，在循环中直接找到对应元素的索引"></a>保存变量环境，在循环中直接找到对应元素的索引</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">'oUl'</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">li</span>&gt;</span>1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">li</span>&gt;</span>2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">li</span>&gt;</span>3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">li</span>&gt;</span>4<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">li</span>&gt;</span>5<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">		<span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">			<span class="keyword">var</span> oUl = <span class="built_in">document</span>.getElementById(<span class="string">'oUl'</span>);</div><div class="line">			<span class="keyword">var</span> oList = oUl.getElementsByTagName(<span class="string">'li'</span>);</div><div class="line">			<span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;oList.length;i++)&#123;</div><div class="line">				<span class="function"><span class="keyword">function</span> <span class="title">saveI</span>(<span class="params">e</span>)</span>&#123;</div><div class="line">					<span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">						alert(e);</div><div class="line">					&#125;</div><div class="line">				&#125;</div><div class="line">				<span class="comment">//假如没有利用闭包的话，根据作用域的查找，i会是oList.length,</span></div><div class="line">				<span class="comment">//当用闭包写后，利用闭包保存变量现场的特征，</span></div><div class="line">				<span class="comment">//每次执行时，都会把当i的值当成行参传到saveId的函数上</span></div><div class="line">				oList[i].onclick = saveI(i);</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	<span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<h4 id="封装，模块法代码"><a href="#封装，模块法代码" class="headerlink" title="封装，模块法代码"></a>封装，模块法代码</h4><p>从而做到信息隐藏，或分可见和不可见的内容<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> observer = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	<span class="keyword">var</span> observerList = [];</div><div class="line">	<span class="keyword">return</span> &#123;</div><div class="line">		<span class="attr">add</span> : <span class="function"><span class="keyword">function</span>(<span class="params">obj</span>)</span>&#123;</div><div class="line">			observer.push(obj)</div><div class="line">		&#125;,</div><div class="line">		<span class="attr">empty</span> : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">			observerList = [];</div><div class="line">		&#125;,</div><div class="line">		<span class="attr">getCount</span>:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">			<span class="keyword">return</span> observerList.length;</div><div class="line">		&#125;</div><div class="line">		get:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">			<span class="keyword">return</span> observerList;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><h4 id="ie下引发内存泄露"><a href="#ie下引发内存泄露" class="headerlink" title="ie下引发内存泄露"></a>ie下引发内存泄露</h4><h3 id="堆和栈"><a href="#堆和栈" class="headerlink" title="堆和栈"></a>堆和栈</h3><p>会在函数执行的时候分配，执行完了清理。</p>
<h4 id="栈（用来存放原始类型undefinder-null-Number-String-Boolean）"><a href="#栈（用来存放原始类型undefinder-null-Number-String-Boolean）" class="headerlink" title="栈（用来存放原始类型undefinder,null,Number,String,Boolean）"></a>栈（用来存放原始类型undefinder,null,Number,String,Boolean）</h4><ol>
<li>由编译器自动分配释放，存放函数的参数和变量值。他们通常会在被调用的分配，调用完即释放</li>
</ol>
<h4 id="堆（存放引用类型-Object）"><a href="#堆（存放引用类型-Object）" class="headerlink" title="堆（存放引用类型,Object）"></a>堆（存放引用类型,Object）</h4><ol>
<li>一般由程序员控制分配释放，若程序不释放，程序结束时可由OS回收。它的生命周期由虚拟机的垃圾回收算法来决定（并且一旦成为孤儿对象就能被回收）。当程序运行完了，垃圾清理机制会检查堆里面的对象是否还在被栈引用，如果没有，则清空</li>
</ol>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><p>1.网易微专业</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[面向对象]]></title>
      <url>weison.org/2016/02/13/objectOriented/</url>
      <content type="html"><![CDATA[<p>将一个复杂多样的集合抽取核心我们所需要的数据组成对象。对象的生成通过构造函数（类似于模板的类）来生成格式相同，属性相同的对象。利用<code>new</code>来调动构造函数生新的对象，并把构造函数中的<code>this</code>指向新生成的对象。然后利用<code>prototype</code>原型来构成类的原型链，使新生成的函数可以共享prototype下的函数。但要注意的是js中所有的对象都属于地址引用，因此在利用继承特征来写函数方法的时候，要先用for-in来把父级的prototype下的方法复制出一份副本给子对象的prototyp，从而子对象就不会影响到父对象。而父对象的更改也能现在体现在子对象中云。<br><a id="more"></a></p>
<h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><h3 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h3><p>对象是一个整体，对外提供一些操作，就像收音机一样</p>
<h3 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h3><p>面向对象时，只关注它能提供的功能，而不关注其内部的细节，如jquery</p>
<h3 id="面向对象是一个通用的思想，任何事情都可以用"><a href="#面向对象是一个通用的思想，任何事情都可以用" class="headerlink" title="面向对象是一个通用的思想，任何事情都可以用"></a>面向对象是一个通用的思想，任何事情都可以用</h3><h2 id="面向对象编程-OOP-特点"><a href="#面向对象编程-OOP-特点" class="headerlink" title="面向对象编程(OOP)特点"></a>面向对象编程(OOP)特点</h2><p>传统的是：封装、继承、多态</p>
<h3 id="抽象-抽出核心问题（仅获取所需信息）"><a href="#抽象-抽出核心问题（仅获取所需信息）" class="headerlink" title="抽象 抽出核心问题（仅获取所需信息）"></a>抽象 抽出核心问题（仅获取所需信息）</h3><ol>
<li>比如说如果注册的时候，就是把一个用户的多种信息中，只获取TA的姓名，性别等核心信息转换成一条数据</li>
</ol>
<h3 id="封装-不考虑内部实现，只考虑功能使用"><a href="#封装-不考虑内部实现，只考虑功能使用" class="headerlink" title="封装 不考虑内部实现，只考虑功能使用"></a>封装 不考虑内部实现，只考虑功能使用</h3><p>只能通过对象来访问方法</p>
<h3 id="继承-从已有的对象中，继承出新的对象"><a href="#继承-从已有的对象中，继承出新的对象" class="headerlink" title="继承 从已有的对象中，继承出新的对象"></a>继承 从已有的对象中，继承出新的对象</h3><p>有点类似于css的样式重用，继承一个公共的样式，然后根据实际情况来调整部分内容</p>
<ol>
<li>多重继承<h3 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h3><h2 id="对象的创建"><a href="#对象的创建" class="headerlink" title="对象的创建"></a>对象的创建</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> obj = <span class="keyword">new</span> <span class="built_in">Object</span>();</div></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="对象的组成"><a href="#对象的组成" class="headerlink" title="对象的组成"></a>对象的组成</h2><h3 id="属性：属于一个对象的变量，状态-静态的"><a href="#属性：属于一个对象的变量，状态-静态的" class="headerlink" title="属性：属于一个对象的变量，状态-静态的"></a>属性：属于一个对象的变量，状态-静态的</h3><p>其实本质上它跟变量是一样的，只不过变量是自由的，而属性是只属于这个对象的</p>
<h3 id="方法：属性一个对象的函数-，过程-动态的"><a href="#方法：属性一个对象的函数-，过程-动态的" class="headerlink" title="方法：属性一个对象的函数 ，过程-动态的"></a>方法：属性一个对象的函数 ，过程-动态的</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arr = [];</div><div class="line"><span class="keyword">var</span> a = <span class="number">10</span>; <span class="comment">//变量</span></div><div class="line">arr.a = <span class="number">20</span>; <span class="comment">// 属于arr的属性</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn1</span>(<span class="params"></span>)</span>&#123; <span class="comment">//函数</span></div><div class="line">  <span class="built_in">console</span>.log(<span class="number">1</span>);</div><div class="line">&#125;</div><div class="line">arr.fn1 = fn1; <span class="comment">//属于arr对象的方法</span></div></pre></td></tr></table></figure>
<h2 id="this-指的是：当前的方法属于谁"><a href="#this-指的是：当前的方法属于谁" class="headerlink" title="this 指的是：当前的方法属于谁"></a>this 指的是：当前的方法属于谁</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">oDiv.onclick = <span class="function"><span class="keyword">function</span> <span class="title">fn1</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  alert(<span class="keyword">this</span>); <span class="comment">//=&gt; oDiv，因为fn1这个方法是属于oDiv的</span></div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</div><div class="line">arr.test = <span class="function"><span class="keyword">function</span> <span class="title">fn2</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	alert(<span class="keyword">this</span>); <span class="comment">//=&gt; [1,2,3];因为fn2这个方法是属于arr的</span></div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn3</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	alert(<span class="keyword">this</span>); <span class="comment">//=&gt; window</span></div><div class="line">&#125;</div><div class="line"><span class="comment">//fn3实际上可以写成</span></div><div class="line"><span class="built_in">window</span>.fn3 = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	alert(<span class="keyword">this</span>);</div><div class="line">&#125;</div><div class="line"><span class="comment">//因为全屏下的变量和函数，其实算是window下的属性和方法</span></div></pre></td></tr></table></figure>
<h2 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h2><h3 id="普通形式"><a href="#普通形式" class="headerlink" title="普通形式"></a>普通形式</h3><p>在项目中，为了避免使用全局变量或全局的方法导致的冲突，我们通常把需要的方法和变量当成一个对象数据类型的属性名和属性值存起来，每次执行的时候，对象.属性名()就可以了，这样就避免冲突问题,而且我们把创建出来的那个对象的名称称之为命名空间<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line">  <span class="keyword">var</span> register = &#123;</div><div class="line">    <span class="attr">name</span> : <span class="string">'weison'</span>,</div><div class="line">    <span class="attr">check</span> : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;,</div><div class="line">    <span class="attr">submitFn</span> : functon()&#123;&#125;</div><div class="line">  &#125;</div><div class="line">&lt;<span class="regexp">/script&gt;</span></div></pre></td></tr></table></figure></p>
<h3 id="惰性载入函数"><a href="#惰性载入函数" class="headerlink" title="惰性载入函数"></a>惰性载入函数</h3><p>这种形式是把压力放在第一次，先进行了预解释，被调用时直接执行<br>而上一种是每次调用都要解释一次<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line">  <span class="keyword">var</span> obj = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> name = <span class="string">'weison'</span>;</div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">check</span>(<span class="params"></span>)</span>&#123;&#125;;</div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">submitFn</span>(<span class="params"></span>)</span>&#123;&#125;;</div><div class="line">    <span class="keyword">return</span> &#123;</div><div class="line">      <span class="attr">check</span> : check,</div><div class="line">      <span class="attr">submitFn</span> : submitFn</div><div class="line">    &#125;</div><div class="line">  &#125;)()</div><div class="line">&lt;<span class="regexp">/script&gt;</span></div></pre></td></tr></table></figure></p>
<h2 id="工厂模式"><a href="#工厂模式" class="headerlink" title="工厂模式"></a>工厂模式</h2><p>就像生产一样，通过对铁（原料）的塑性上螺丝（加工）,生产出一台汽车供消费者使用(出厂)</p>
<h3 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h3><ol>
<li>原料</li>
<li>加工</li>
<li>出厂</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getPerson</span>(<span class="params">name,sex</span>)</span>&#123;</div><div class="line">  <span class="comment">//1.原料</span></div><div class="line">  <span class="keyword">var</span> obj = <span class="keyword">new</span> <span class="built_in">Object</span>();</div><div class="line">  <span class="comment">//2.加工</span></div><div class="line">  obj.name = name;</div><div class="line">  obj.sex = sex;</div><div class="line">  obj.showName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">      alert(<span class="keyword">this</span>.name)</div><div class="line">  &#125;</div><div class="line">  obj.showSex = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">      alert(<span class="keyword">this</span>.sex)</div><div class="line">  &#125;</div><div class="line">  <span class="comment">//3.出厂</span></div><div class="line">  <span class="keyword">return</span> obj;</div><div class="line">&#125;</div><div class="line"><span class="comment">//使用</span></div><div class="line"><span class="keyword">var</span> p1 = getPerson(<span class="string">'joke'</span>,<span class="string">'男'</span>);</div><div class="line">p1.showName();</div><div class="line">p1.showSex();</div><div class="line"><span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></div></pre></td></tr></table></figure>
<h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><ol>
<li>没有new</li>
<li>每个函数都有独立的方法，浪费资源</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line">	<span class="keyword">var</span> a = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;alert(<span class="string">'1'</span>);&#125;</div><div class="line">	<span class="keyword">var</span> b = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;alert(<span class="string">'1'</span>);&#125;</div><div class="line">	alert(a==b); <span class="comment">//=&gt; false，那是因为每写一个function，其实就是在创建一个新的对象</span></div><div class="line">	<span class="comment">//上面的写法等价于</span></div><div class="line">	<span class="keyword">var</span> a = <span class="keyword">new</span> <span class="built_in">Function</span>(<span class="string">"alert('1')"</span>);</div><div class="line">	<span class="keyword">var</span> b = <span class="keyword">new</span> <span class="built_in">Function</span>(<span class="string">"alert('1')"</span>);</div><div class="line">	alert(a==b); <span class="comment">//=&gt; false; 两个不同的对象在比较，所以会是false;</span></div><div class="line">  &lt;<span class="regexp">/script&gt;</span></div></pre></td></tr></table></figure>
<h2 id="当函数前加上new时，this会指向这个函数"><a href="#当函数前加上new时，this会指向这个函数" class="headerlink" title="当函数前加上new时，this会指向这个函数"></a>当函数前加上new时，this会指向这个函数</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">show</span>(<span class="params"></span>)</span>&#123;</div><div class="line">   alert(<span class="keyword">this</span>); </div><div class="line">&#125;</div><div class="line">show();<span class="comment">//=&gt;window 默认情况下，this会指向window</span></div><div class="line"><span class="keyword">new</span> show();<span class="comment">//=&gt;show </span></div><div class="line"><span class="comment">//因为加上new后其实就相当于在函数内创建了一个对象，并且返回了一个对象的值</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">show</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	<span class="comment">//var this = new Object;;</span></div><div class="line">	<span class="keyword">this</span>.name = <span class="string">'新创建的对象'</span>;</div><div class="line">	alert(<span class="keyword">this</span>);</div><div class="line">	<span class="comment">//return this;</span></div><div class="line">&#125;</div><div class="line">&lt;<span class="regexp">/script&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getPerson</span>(<span class="params">name,sex</span>)</span>&#123;</div><div class="line">  <span class="comment">//加上了this,会创建一个对象,并且this会指向这个新创建的对象</span></div><div class="line">  <span class="comment">//var this = new Object;;</span></div><div class="line">  <span class="keyword">this</span>.name = name;</div><div class="line">  <span class="keyword">this</span>.sex = sex;</div><div class="line">  <span class="keyword">this</span>.showName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">      alert(<span class="keyword">this</span>.name)</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">this</span>.showSex = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">      alert(<span class="keyword">this</span>.sex)</div><div class="line">  &#125;</div><div class="line">  <span class="comment">//并且最终返回this</span></div><div class="line">  <span class="comment">//return this;</span></div><div class="line">&#125;</div><div class="line"><span class="comment">//使用</span></div><div class="line"><span class="keyword">var</span> p1 =<span class="keyword">new</span> getPerson(<span class="string">'joke'</span>,<span class="string">'男'</span>);</div><div class="line">p1.showName();</div><div class="line">p1.showSex();</div><div class="line"><span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></div></pre></td></tr></table></figure>
<h2 id="数值比较"><a href="#数值比较" class="headerlink" title="数值比较"></a>数值比较</h2><p>注意值的引用过程中，当再使用赋值运算时，就会产生新的内存地址，而不再是引用旧的内容<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span>  a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</div><div class="line"><span class="keyword">var</span> b =a;</div><div class="line"><span class="built_in">console</span>.log(b); </div><div class="line">b = [<span class="number">5</span>];</div><div class="line"><span class="built_in">console</span>.log(<span class="string">'a='</span>+a+<span class="string">',b='</span>+b); <span class="comment">// =&gt; a=1,2,3,b=5</span></div></pre></td></tr></table></figure></p>
<h3 id="基本类型，值相同就可以了"><a href="#基本类型，值相同就可以了" class="headerlink" title="基本类型，值相同就可以了"></a>基本类型，值相同就可以了</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> a = <span class="number">10</span>,b=<span class="number">10</span>;</div><div class="line">alert(a==b); <span class="comment">//=&gt;true</span></div></pre></td></tr></table></figure>
<h3 id="复杂数据类型，值和引用都要相同"><a href="#复杂数据类型，值和引用都要相同" class="headerlink" title="复杂数据类型，值和引用都要相同"></a>复杂数据类型，值和引用都要相同</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> a = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;,b=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;;</div><div class="line"><span class="built_in">console</span>.log(a == b); <span class="comment">// =&gt; false,因为它们虽然值相当，但引用一不样，所以不相当</span></div><div class="line"><span class="keyword">var</span> c = [<span class="number">1</span>],d=c;</div><div class="line"><span class="built_in">console</span>.log(c==d); <span class="comment">//=&gt; true,因为值和引用都相同了</span></div></pre></td></tr></table></figure>
<h2 id="prototype原型"><a href="#prototype原型" class="headerlink" title="prototype原型"></a><code>prototype</code>原型</h2><p>扩展系统对象，添加一些属性和方法,从而共享这些数据</p>
<ol>
<li>所有函数都天生自带<code>prototype</code>属性，而这个属性假如不是应用在构建函数内(new Fn())，这个函数是没有意义的</li>
<li><code>prototype</code>存储的是一个对象数据类型,有自己的内存块（并且这个内存块上有两个自带的属性<code>constructor</code>和<code>__proto__</code> ）</li>
<li><code>`constructor</code> 是 <code>prototype</code>函数类型下特有的，而<code>__proto</code>是所有对象数据类型都有的</li>
<li>在调用实例上属性名的时候，遵循的顺序的：先找私有函数内部的，如果没有，再通过<strong>proto</strong>找到它原型链上的属性，如果都没有则报错,假如想直接查找公有的方法，可使用<code>obj.__proto__value</code>进行查找<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line">  <span class="keyword">var</span> MyFn = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">this</span>.name = <span class="string">'weison'</span>;</div><div class="line">    <span class="keyword">this</span>.showName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">      <span class="built_in">console</span>.log(<span class="string">'构造函数里的'</span>+<span class="keyword">this</span>.name);</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  MyFn.prototype.showName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'prototype上的'</span>+<span class="keyword">this</span>.name)</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">var</span> fn = <span class="keyword">new</span> Myfn();</div><div class="line">  <span class="built_in">console</span>.log(fn.showName()); <span class="comment">// =&gt; '构造函数里的weison'</span></div><div class="line">  <span class="built_in">console</span>.log(fn.__proto__.showName()); <span class="comment">// =&gt; 'prototype上的weison'</span></div><div class="line">&lt;<span class="regexp">/script&gt;</span></div></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="hasOwnProperty判断实例里是否存某个属性或方法-私有属性-内"><a href="#hasOwnProperty判断实例里是否存某个属性或方法-私有属性-内" class="headerlink" title="hasOwnProperty判断实例里是否存某个属性或方法(私有属性)内"></a><code>hasOwnProperty</code>判断实例里是否存某个属性或方法(私有属性)内</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line">  <span class="keyword">var</span> Myfn = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">this</span>.name = <span class="string">'weison'</span>;</div><div class="line">  &#125;</div><div class="line">  Myfn.prototype.showName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">var</span> myObj = <span class="keyword">new</span> Myfn();</div><div class="line">  <span class="built_in">console</span>.log(myObj.hasOwnProperty(<span class="string">'name'</span>)); <span class="comment">// =&gt; true</span></div><div class="line">  <span class="built_in">console</span>.log(myObj.hasOwnProperty(<span class="string">'showName'</span>)); <span class="comment">// =&gt; false</span></div><div class="line">&lt;<span class="regexp">/script&gt;</span></div></pre></td></tr></table></figure>
<h3 id="isProtoypeOf"><a href="#isProtoypeOf" class="headerlink" title="isProtoypeOf()"></a><code>isProtoypeOf()</code></h3><h3 id="prototype上的this"><a href="#prototype上的this" class="headerlink" title="prototype上的this"></a><code>prototype</code>上的this</h3><p>prototype上的this扔然指向创建出来的实例<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line">  <span class="keyword">var</span> Myfn = <span class="function"><span class="keyword">function</span>(<span class="params">name</span>)</span>&#123;</div><div class="line">      <span class="keyword">this</span>.name = name;</div><div class="line">  &#125;</div><div class="line">  My.prototype.show = funciton()&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">var</span> fn = <span class="keyword">new</span> Myfn(<span class="string">'weison'</span>);</div><div class="line">  fn.show(); <span class="comment">// =&gt; weison</span></div><div class="line">&lt;<span class="regexp">/script&gt;</span></div></pre></td></tr></table></figure></p>
<h3 id="类，不具备实际作用，只用来创建对象"><a href="#类，不具备实际作用，只用来创建对象" class="headerlink" title="类，不具备实际作用，只用来创建对象"></a>类，不具备实际作用，只用来创建对象</h3><h3 id="原型必须写在构造函数下面（new-后面的函数）"><a href="#原型必须写在构造函数下面（new-后面的函数）" class="headerlink" title="原型必须写在构造函数下面（new 后面的函数）"></a>原型必须写在构造函数下面（new 后面的函数）</h3><ul>
<li>如数组(new Array)，构建函数是Array,它的原型写成Array.prototype.xx</li>
<li>函数(new Object),构造函数是Object,所以写原型的时候应该是Object.prototype.xx </li>
</ul>
<h3 id="对象有的时候也叫实例-真正有功能的东西，被类构造出来的"><a href="#对象有的时候也叫实例-真正有功能的东西，被类构造出来的" class="headerlink" title="对象有的时候也叫实例,真正有功能的东西，被类构造出来的"></a>对象有的时候也叫实例,真正有功能的东西，被类构造出来的</h3><h3 id="利用prototype来创建方法的时候，每次调用不会创建新的方法"><a href="#利用prototype来创建方法的时候，每次调用不会创建新的方法" class="headerlink" title="利用prototype来创建方法的时候，每次调用不会创建新的方法"></a>利用prototype来创建方法的时候，每次调用不会创建新的方法</h3><p>因些arr1.sum = arr2.sum;都是指向Array.prototype.sum方法<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arr = <span class="keyword">new</span> <span class="built_in">Array</span>();</div><div class="line"><span class="comment">//Array就是类，相当于一个蛋糕模具，用来构造对象</span></div><div class="line"><span class="comment">//arr 就是对象，相当于蛋糕，提供实际作用，如arr.length,arr.push()</span></div></pre></td></tr></table></figure></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arr1 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</div><div class="line"><span class="keyword">var</span> arr2 = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>);</div><div class="line"><span class="comment">//利用prototype为所有Array类添加sum方法 </span></div><div class="line"><span class="built_in">Array</span>.prototype.sum = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	<span class="keyword">var</span> result = <span class="number">0</span>;</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;<span class="keyword">this</span>.length;i++)&#123;</div><div class="line">		result += <span class="keyword">this</span>[i];</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> result;</div><div class="line">&#125;</div><div class="line">alert(arr1.sum());</div></pre></td></tr></table></figure>
<p>为string添加一个去除头尾空格的方法<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">String</span>.prototype.trim = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	<span class="keyword">return</span> <span class="keyword">this</span>.replace(<span class="regexp">/^\s+|\s+$/g</span>,<span class="string">''</span>);</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> str = <span class="string">' 12  34  '</span>;</div><div class="line">alert(<span class="string">'开始'</span>+str.trim()+<span class="string">'结束'</span>);</div></pre></td></tr></table></figure></p>
<h2 id="构造函数-用来构建对象的函数"><a href="#构造函数-用来构建对象的函数" class="headerlink" title="构造函数 用来构建对象的函数"></a>构造函数 用来构建对象的函数</h2><h3 id="命名规则，首字母大写"><a href="#命名规则，首字母大写" class="headerlink" title="命名规则，首字母大写"></a>命名规则，首字母大写</h3><h3 id="利用混合法来构造对象"><a href="#利用混合法来构造对象" class="headerlink" title="利用混合法来构造对象"></a>利用混合法来构造对象</h3><h4 id="把属性写在函数内，因为每个对象的属性各不相同"><a href="#把属性写在函数内，因为每个对象的属性各不相同" class="headerlink" title="把属性写在函数内，因为每个对象的属性各不相同"></a>把属性写在函数内，因为每个对象的属性各不相同</h4><h4 id="把方法写在原型上，因为每个对象所采用的方法都一样"><a href="#把方法写在原型上，因为每个对象所采用的方法都一样" class="headerlink" title="把方法写在原型上，因为每个对象所采用的方法都一样"></a>把方法写在原型上，因为每个对象所采用的方法都一样</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">GetPerson</span>(<span class="params">name,sex</span>)</span>&#123;</div><div class="line"> <span class="keyword">this</span>.name = name;<span class="keyword">this</span>.sex =sex;</div><div class="line"> &#125;</div><div class="line">GetPerson.prototype.showName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	alert(<span class="keyword">this</span>.name);</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> p1 = <span class="keyword">new</span> GetPerson(<span class="string">'leo'</span>,<span class="string">'男'</span>);</div><div class="line">p1.showName();</div></pre></td></tr></table></figure>
<h4 id="当对象原型和对象本身同时定义了属性，会使用自身的属性"><a href="#当对象原型和对象本身同时定义了属性，会使用自身的属性" class="headerlink" title="当对象原型和对象本身同时定义了属性，会使用自身的属性"></a>当对象原型和对象本身同时定义了属性，会使用自身的属性</h4><ol>
<li>delete 删掉某个已经添加过的属性<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">Array</span>.prototype.a = <span class="number">12</span>;</div><div class="line"><span class="keyword">var</span> arr = [<span class="number">2</span>,<span class="number">3</span>];</div><div class="line">alert(arr.a);<span class="comment">//=&gt;12;</span></div><div class="line">arr.a = <span class="number">3</span>;</div><div class="line">alert(arr.a); <span class="comment">//=&gt;3</span></div><div class="line"><span class="keyword">delete</span> arr.a; <span class="comment">//删除对象下的属性</span></div><div class="line">alert(arr.a); <span class="comment">//=&gt;12 继承自prototype的12</span></div></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="将面向过程的函数转换成面对对象的函数的过程"><a href="#将面向过程的函数转换成面对对象的函数的过程" class="headerlink" title="将面向过程的函数转换成面对对象的函数的过程"></a>将面向过程的函数转换成面对对象的函数的过程</h2><h3 id="变型"><a href="#变型" class="headerlink" title="变型"></a>变型</h3><ol>
<li>尽量不要出现函数嵌套函数</li>
<li>可以有全局变量</li>
<li>把onload中不是赋值的语句放在单独函数中，这样有利于代码的后期维护</li>
</ol>
<h3 id="改成面向对象"><a href="#改成面向对象" class="headerlink" title="改成面向对象"></a>改成面向对象</h3><ol>
<li>全局变量就是属性</li>
<li>函数就是方法</li>
<li>onload中创建对象</li>
</ol>
<h2 id="JSON方式的面向对象"><a href="#JSON方式的面向对象" class="headerlink" title="JSON方式的面向对象"></a>JSON方式的面向对象</h2><h2 id="命名空间"><a href="#命名空间" class="headerlink" title="命名空间"></a>命名空间</h2><p>把各种函数以层级，包的形式组合起来,就像一个公司一样，把不同作用的人群进行分类，然后每个人群分成不同的部门，实现不同的模块功能<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> obj = &#123;&#125;;</div><div class="line">obj.common = &#123;</div><div class="line">  <span class="attr">getClass</span> : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;,</div><div class="line">  <span class="attr">myAddEvent</span> : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;</div><div class="line">&#125;</div><div class="line">obj.fx = &#123;</div><div class="line">  startMove = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;,</div><div class="line">  <span class="attr">drag</span> : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><p>把父级的属性和方法复制到子级上    </p>
<h3 id="构造函数伪装"><a href="#构造函数伪装" class="headerlink" title="构造函数伪装"></a>构造函数伪装</h3><p>调用父级构造函数，通过call来改变this指向</p>
<h3 id="利用for-in来解决对象赋值属于地址引用，子函数会影响父函数的问题"><a href="#利用for-in来解决对象赋值属于地址引用，子函数会影响父函数的问题" class="headerlink" title="利用for..in来解决对象赋值属于地址引用，子函数会影响父函数的问题"></a>利用<code>for..in</code>来解决对象赋值属于地址引用，子函数会影响父函数的问题</h3><h3 id="原型链"><a href="#原型链" class="headerlink" title="原型链"></a>原型链</h3><p>通过原型来继承父级的方法</p>
<h2 id="引用，地址引用"><a href="#引用，地址引用" class="headerlink" title="引用，地址引用"></a>引用，地址引用</h2><h3 id="js里，所有的对象都是引用。"><a href="#js里，所有的对象都是引用。" class="headerlink" title="js里，所有的对象都是引用。"></a>js里，所有的对象都是引用。</h3><p>这是因为性能的考虑，因为对象通常都很大，所以为了性能问题，就直接把赋值运算变成了地址引用。类似于给一个房子多配一条钥匙，在房间（内存区域地址 ）里通过所做的操作，在用同一模板的钥匙打开时候看到的都是一样的，用一条钥匙打开后搬动沙发，用另一条钥匙打开看，沙发也是会变成搬动的。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arr1 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</div><div class="line"><span class="keyword">var</span> arr2 =</div></pre></td></tr></table></figure></p>
<h4 id="instanceof…的实例"><a href="#instanceof…的实例" class="headerlink" title="instanceof…的实例"></a><code>instanceof</code>…的实例</h4><p>判断对象是否某个类的实例<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</div><div class="line"><span class="built_in">console</span>.log(arr <span class="keyword">in</span> <span class="built_in">Array</span>); <span class="comment">//=&gt;true 所有数组都是Array的实例</span></div></pre></td></tr></table></figure></p>
<h2 id="编程实例"><a href="#编程实例" class="headerlink" title="编程实例"></a>编程实例</h2><h3 id="tab选项卡"><a href="#tab选项卡" class="headerlink" title="tab选项卡"></a>tab选项卡</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></div><div class="line">	<span class="selector-class">.active</span>&#123;</div><div class="line">		<span class="attribute">background</span>: <span class="number">#00ff00</span>;</div><div class="line">	&#125;</div><div class="line">	<span class="selector-class">.tab</span> <span class="selector-tag">div</span>&#123;</div><div class="line">		<span class="attribute">display</span>: none;</div><div class="line">	&#125;</div><div class="line">	<span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"tab"</span> <span class="attr">id</span>=<span class="string">"tab"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"active"</span>&gt;</span>1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span>&gt;</span>2<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span>&gt;</span>3<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"display: block;"</span>&gt;</span>1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">div</span>&gt;</span>2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">div</span>&gt;</span>3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"tab"</span> <span class="attr">id</span>=<span class="string">"tab2"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"active"</span>&gt;</span>1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span>&gt;</span>2<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span>&gt;</span>3<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"display: block;"</span>&gt;</span>1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">div</span>&gt;</span>2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">div</span>&gt;</span>3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">		<span class="keyword">var</span> Tab = <span class="function"><span class="keyword">function</span>(<span class="params">id</span>)</span>&#123;</div><div class="line">			<span class="keyword">this</span>.wrap = <span class="built_in">document</span>.getElementById(id);</div><div class="line">			<span class="keyword">this</span>.title = <span class="keyword">this</span>.wrap.getElementsByTagName(<span class="string">'button'</span>);</div><div class="line">			<span class="keyword">this</span>.con = <span class="keyword">this</span>.wrap.getElementsByTagName(<span class="string">'div'</span>);</div><div class="line">		&#125;</div><div class="line">		Tab.prototype.init = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">			<span class="keyword">var</span> that = <span class="keyword">this</span>;</div><div class="line">			<span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;<span class="keyword">this</span>.title.length;i++)&#123;</div><div class="line">				<span class="keyword">this</span>.title[i].index = i;</div><div class="line">				<span class="keyword">this</span>.title[i].onclick  = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">					that.change(<span class="keyword">this</span>);</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		Tab.prototype.change = <span class="function"><span class="keyword">function</span>(<span class="params">obj</span>)</span>&#123;</div><div class="line">			<span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;<span class="keyword">this</span>.title.length;i++)&#123;</div><div class="line">				<span class="keyword">this</span>.title[i].className = <span class="string">""</span>;</div><div class="line">				<span class="keyword">this</span>.con[i].style.display = <span class="string">"none"</span>;</div><div class="line">			&#125;</div><div class="line">			obj.className = <span class="string">"active"</span>;</div><div class="line">			<span class="keyword">this</span>.con[obj.index].style.display = <span class="string">"block"</span></div><div class="line"></div><div class="line">		&#125;</div><div class="line">		<span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">			<span class="keyword">var</span> tab1 = <span class="keyword">new</span> Tab(<span class="string">"tab"</span>);</div><div class="line">			tab1.init();</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="comment">/**</span></div><div class="line">		 * 去除样式，https://lvwenhan.com/web-front/374.html</div><div class="line">		 * 先在左边两边加上空格 'abcd   bcd' =&gt; ' abcd    bcd '</div><div class="line">		 * 然后利用正则把字符中多余的空格变成一个' abcd    bcd ' =&gt; ' abcd bcd '</div><div class="line">		 * 然后将符合的样式替换成一个空格 ' abcd bcd ' =&gt; ' abcd   '</div><div class="line">		 * 再去除首尾的空格 ' abcd   ' =&gt; 'abcd'</div><div class="line">		 * 最后把剩余的样式赋予对象</div><div class="line">		 * @param  &#123;[type]&#125; obj [description]</div><div class="line">		 * @param  &#123;[type]&#125; cls [description]</div><div class="line">		 * @return &#123;[type]&#125;     [description]</div><div class="line">		 */</div><div class="line">		<span class="function"><span class="keyword">function</span> <span class="title">removeClass</span>(<span class="params">obj,cls</span>)</span>&#123;</div><div class="line">			<span class="keyword">var</span> objCls = <span class="string">" "</span>+ obj.className + <span class="string">" "</span> ;</div><div class="line">			objCls = objCls.replace(<span class="regexp">/\s+/gi</span>,<span class="string">" "</span>);</div><div class="line">			objCls = objCls.replace(<span class="string">" "</span>+cls+ <span class="string">""</span>,<span class="string">""</span>);</div><div class="line">			objCls = objCls.replace(<span class="regexp">/(^\s+)|(\s+$)/g</span>,<span class="string">""</span>);</div><div class="line">			obj.className = objCls;</div><div class="line">		&#125;</div><div class="line"></div><div class="line"></div><div class="line">	<span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[作用域]]></title>
      <url>weison.org/2016/02/12/scope/</url>
      <content type="html"><![CDATA[<h2 id="作用域概念"><a href="#作用域概念" class="headerlink" title="作用域概念"></a>作用域概念</h2><h3 id="在特定的空间或范围内对数据进行读写操作"><a href="#在特定的空间或范围内对数据进行读写操作" class="headerlink" title="在特定的空间或范围内对数据进行读写操作"></a>在特定的空间或范围内对数据进行读写操作</h3><ol>
<li>作用：读、写操作</li>
<li>域：空间、范围、区域…</li>
</ol>
<h4 id="一对script标签就是一个域"><a href="#一对script标签就是一个域" class="headerlink" title="一对script标签就是一个域"></a>一对<code>script</code>标签就是一个域</h4><ul>
<li>有域的地方就会发生预解释和逐行解释代码的过程</li>
<li><p>在解释的时候，是自上而下来解读的，一个处理完再处理另外一个</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line">	alert(a); //报错，因为js会一个个域自上而下的解释，在执行里的时修，a还没有定义</div><div class="line">&lt;/script&gt;</div><div class="line">&lt;script&gt;</div><div class="line">	var a =1;</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure>
</li>
<li><p>自上而下的解释过程中，上一个全局script的变量与函数在下一个全局script中仍然可以被读取写入</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line">	<span class="keyword">var</span> a = <span class="number">1</span>;</div><div class="line"><span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></div><div class="line">&lt;script&gt;</div><div class="line">	alert(a); <span class="comment">// =&gt; 1 因为上一个script读写完的数据还是会保存在仓库内，所以a=1，弹出了1</span></div><div class="line">&lt;<span class="regexp">/script&gt;</span></div></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="一个函数是一个局部作用域"><a href="#一个函数是一个局部作用域" class="headerlink" title="一个函数是一个局部作用域"></a>一个函数是一个局部作用域</h4><h4 id="作用域链"><a href="#作用域链" class="headerlink" title="作用域链"></a>作用域链</h4><p>函数内部也算一个作用域，当在预解释过程中，在函数里面没有找到a的变量值时，会从子作用域(fn1)跳到父级作用域查找，这种从里到外的查找的过程叫作用域链<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> a = <span class="number">1</span>;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn1</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	alert(a); <span class="comment">//=&gt;1 通过作用域链找到外面的a，a=1;</span></div><div class="line">	<span class="comment">//函数内部也算一个作用域，当在预解释过程中，在函数里面没有找到a的变量值时，</span></div><div class="line">	<span class="comment">//会从子作用域(fn1)跳到父级作用域查找，这种从里到外的查找的过程叫作用域链</span></div><div class="line">	a =<span class="number">2</span>; <span class="comment">//因为在内部作用域没找到a,所以又向外部到了a,然后改变了a的值</span></div><div class="line">&#125;</div><div class="line">fn1();</div><div class="line">alert(a); <span class="comment">// =&gt; a=2,a的值被fn1改变了</span></div></pre></td></tr></table></figure></p>
<h4 id="一个参数就相当于一个局部变量"><a href="#一个参数就相当于一个局部变量" class="headerlink" title="一个参数就相当于一个局部变量"></a>一个参数就相当于一个局部变量</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> a = <span class="number">1</span>;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn1</span>(<span class="params">a</span>)</span>&#123;</div><div class="line">alert(a); <span class="comment">//=&gt;undefined,因为有了一个参数a,相当于var a;，无论有没有传值，fn1都有了局部变量a</span></div><div class="line">a =<span class="number">2</span>; <span class="comment">//局部变量a=2</span></div><div class="line">&#125;</div><div class="line">fn1();</div><div class="line">alert(a); <span class="comment">// =&gt; a=1</span></div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> a = <span class="number">1</span>;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn1</span>(<span class="params">a</span>)</span>&#123;</div><div class="line">	alert(a); <span class="comment">//=&gt;根据传入的参数值，a=1</span></div><div class="line">	a =<span class="number">2</span>; <span class="comment">//局部变量a=2</span></div><div class="line">&#125;</div><div class="line">fn1(a); <span class="comment">//传入全局a的值，a=1</span></div><div class="line">alert(a); <span class="comment">// =&gt; a=1</span></div></pre></td></tr></table></figure>
<h2 id="js解释过程"><a href="#js解释过程" class="headerlink" title="js解释过程"></a>js解释过程</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//每次都会有预解释的仓库里查找是否有这个变量，</span></div><div class="line"><span class="comment">//而在一开始，所有的变量都会先默认undefined</span></div><div class="line">alert(a); <span class="comment">//=&gt; undefined</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> a =<span class="number">10</span>;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn1</span>(<span class="params"></span>)</span>&#123;alert(<span class="number">1</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="1-预解释-‘找一些东西’var-function-参数"><a href="#1-预解释-‘找一些东西’var-function-参数" class="headerlink" title="1.预解释 ‘找一些东西’var function 参数"></a>1.预解释 ‘找一些东西’<code>var</code> <code>function</code> 参数</h3><ol>
<li>把声明的变量找出来并默认值设为undefined<br>a=undefined</li>
<li>所有的函数声明，整个提取出来<br>fn1 = function fn1(){alert(1);</li>
<li>遇到重名的情况</li>
</ol>
<ul>
<li>当变量与函数重名,函数覆盖变量（因为变量值是undefined，<br>而函数是整个函数块，所以会采用函数）</li>
<li>函数与函数重名时，后面的的覆盖前面的</li>
</ul>
<h3 id="2-逐行解读代码"><a href="#2-逐行解读代码" class="headerlink" title="2.逐行解读代码"></a>2.逐行解读代码</h3><h4 id="表达式-Number-参数，所有能改变变量值的操作都叫表达式，它是可以改变预解释的值的。"><a href="#表达式-Number-参数，所有能改变变量值的操作都叫表达式，它是可以改变预解释的值的。" class="headerlink" title="表达式 + - * / % Number() 参数，所有能改变变量值的操作都叫表达式，它是可以改变预解释的值的。"></a>表达式 + - * / % Number() 参数，所有能改变变量值的操作都叫表达式，它是可以改变预解释的值的。</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">console</span>.log(a); <span class="comment">//=&gt;预解释结果 function a()&#123;alert(4)&#125;;</span></div><div class="line"><span class="keyword">var</span> a =<span class="number">1</span>; <span class="comment">// =&gt; 函数被表达式改成了1</span></div><div class="line"><span class="built_in">console</span>.log(a); <span class="comment">//=&gt; 1 </span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>)</span>&#123;alert(<span class="number">2</span>)&#125;; <span class="comment">//函数没有改变a的值</span></div><div class="line"><span class="built_in">console</span>.log(a); <span class="comment">// =&gt; a=1</span></div><div class="line"><span class="keyword">var</span> a =<span class="number">3</span>; <span class="comment">//表达式把a=3</span></div><div class="line"><span class="built_in">console</span>.log(a); <span class="comment">// =&gt; 3</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>)</span>&#123;alert(<span class="number">4</span>)&#125;; <span class="comment">//函数没有改变a的值</span></div><div class="line"><span class="built_in">console</span>.log(a); <span class="comment">// =&gt;3</span></div><div class="line">a(); <span class="comment">//=&gt; 3(); a is not a function因为a最终的值是3，a();相当于3()，所有报错</span></div></pre></td></tr></table></figure>
<h3 id="函数外部读取函数内值的方法"><a href="#函数外部读取函数内值的方法" class="headerlink" title="函数外部读取函数内值的方法"></a>函数外部读取函数内值的方法</h3><h4 id="把全局变量放进函数内，然后把想读取的值赋予这个全局变量"><a href="#把全局变量放进函数内，然后把想读取的值赋予这个全局变量" class="headerlink" title="把全局变量放进函数内，然后把想读取的值赋予这个全局变量"></a>把全局变量放进函数内，然后把想读取的值赋予这个全局变量</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> str = <span class="string">''</span>;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn1</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	<span class="keyword">var</span> n = <span class="string">'函数内的值'</span>;</div><div class="line">	str = n;</div><div class="line">&#125;</div><div class="line">fn1();</div><div class="line">alert(str);</div></pre></td></tr></table></figure>
<h4 id="局部函数调用-把全局函数放到函数内调用"><a href="#局部函数调用-把全局函数放到函数内调用" class="headerlink" title="局部函数调用(把全局函数放到函数内调用)"></a>局部函数调用(把全局函数放到函数内调用)</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn1</span>(<span class="params">b</span>)</span>&#123;</div><div class="line">	alert(b);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn2</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	<span class="keyword">var</span> a =<span class="number">10</span>;</div><div class="line">	fn1(a); 传入了fn2中a=<span class="number">10</span>的值</div><div class="line">&#125;</div><div class="line">fn2(); <span class="comment">// =&gt;10</span></div></pre></td></tr></table></figure>
<h3 id="判断是不是作用域，就看有没有预解释的过程"><a href="#判断是不是作用域，就看有没有预解释的过程" class="headerlink" title="判断是不是作用域，就看有没有预解释的过程"></a>判断是不是作用域，就看有没有预解释的过程</h3><h4 id="if-for-do-while都不是作用域"><a href="#if-for-do-while都不是作用域" class="headerlink" title="if``for``do while都不是作用域"></a><code>if``for``do while</code>都不是作用域</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line">	alert(a); <span class="comment">//=&gt;undefined ,a=undefined是因为if不是作用域，内里的a可以看成是一个全局变量</span></div><div class="line">	<span class="keyword">if</span>(<span class="literal">true</span>)&#123;</div><div class="line">		<span class="keyword">var</span> a =<span class="number">10</span>;</div><div class="line">	&#125;</div><div class="line">&lt;<span class="regexp">/script&gt;</span></div></pre></td></tr></table></figure>
<h4 id="要注意Firefox下不能对-内的函数进行预解释-所以为了达到兼容的目的，尽量不要在if里定义全局函数和全局变量"><a href="#要注意Firefox下不能对-内的函数进行预解释-所以为了达到兼容的目的，尽量不要在if里定义全局函数和全局变量" class="headerlink" title="要注意Firefox下不能对{}内的函数进行预解释,所以为了达到兼容的目的，尽量不要在if里定义全局函数和全局变量"></a>要注意Firefox下不能对{}内的函数进行预解释,所以为了达到兼容的目的，尽量不要在if里定义全局函数和全局变量</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line">	alert(fn1);</div><div class="line">	<span class="keyword">if</span>(<span class="literal">true</span>)&#123;</div><div class="line">		<span class="function"><span class="keyword">function</span> <span class="title">fn1</span>(<span class="params"></span>)</span>&#123;</div><div class="line">			alert(<span class="string">'1'</span>);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&lt;<span class="regexp">/script&gt;</span></div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[流程控制]]></title>
      <url>weison.org/2016/02/11/process-control/</url>
      <content type="html"><![CDATA[<h2 id="判断"><a href="#判断" class="headerlink" title="判断"></a>判断</h2><h3 id="if"><a href="#if" class="headerlink" title="if"></a><code>if</code></h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span>(判断条件)&#123;</div><div class="line">	条件成立执行</div><div class="line">&#125;<span class="keyword">else</span>&#123;</div><div class="line">	否则执行这里</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="switch-多件事件挑一件来做"><a href="#switch-多件事件挑一件来做" class="headerlink" title="switch 多件事件挑一件来做"></a><code>switch</code> 多件事件挑一件来做</h3><ol>
<li><code>break</code> 让代码跳出switch语句，如果忽略<code>break</code>关键字，就会导致执行完一个case继续执行另一个case;</li>
</ol>
<ul>
<li><code>default</code>当所有情况都不成立时所使用的默认值</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line">   <span class="keyword">switch</span>(判断的内容)&#123;</div><div class="line">   	<span class="keyword">case</span> 判断条件 : 成立操行的动作; <span class="keyword">break</span>;</div><div class="line">   	<span class="keyword">case</span> 判断条件 : 成立操行的动作; <span class="keyword">break</span>;</div><div class="line">   	<span class="keyword">default</span>: 在以上条件都不成立的时候执行;</div><div class="line">   &#125;</div><div class="line"> &lt;<span class="regexp">/script&gt;</span></div></pre></td></tr></table></figure>
<ol>
<li>如果确实需要同时混合几种情况，建议添加注释，说明是有意忽略<code>break</code>的<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line">   <span class="keyword">switch</span>(i)&#123;</div><div class="line">   	<span class="keyword">case</span> <span class="number">25</span> :</div><div class="line">   	     <span class="comment">/*混合两种情况*/</span></div><div class="line">   	<span class="keyword">case</span> <span class="number">35</span> :</div><div class="line">   		alert(<span class="string">'25 or 35'</span>);</div><div class="line">   		<span class="keyword">break</span>;</div><div class="line">   	<span class="keyword">case</span> <span class="number">45</span> :</div><div class="line">   	 	alert(<span class="string">'45'</span>);</div><div class="line">   	<span class="keyword">default</span>: </div><div class="line">   		alert(<span class="string">'other'</span>);</div><div class="line">   &#125;</div><div class="line"> &lt;<span class="regexp">/script&gt;</span></div></pre></td></tr></table></figure>
</li>
</ol>
<ul>
<li>switch()可以使用在任何数据类型中，无论是数字，字符串，还是对象都没有问题。</li>
</ul>
<ol>
<li>使用在布尔值下</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line">   <span class="keyword">switch</span>(<span class="literal">true</span>)&#123;</div><div class="line">   	<span class="keyword">case</span> <span class="number">1</span> &gt; <span class="number">0</span> : </div><div class="line">   		alert(<span class="string">'true'</span>);</div><div class="line">   		<span class="keyword">break</span>;</div><div class="line">   	<span class="keyword">default</span>:</div><div class="line">   		alert(<span class="string">'false'</span>);</div><div class="line">   &#125;</div><div class="line"> &lt;<span class="regexp">/script&gt;</span></div></pre></td></tr></table></figure>
<ol>
<li>使用在字符串下</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line">   <span class="keyword">switch</span>(<span class="string">'hello world'</span>)&#123;</div><div class="line">   	<span class="comment">//要注意world前面有空格</span></div><div class="line">   	<span class="keyword">case</span> <span class="string">'hello'</span> + <span class="string">' world'</span>:</div><div class="line">   		alert(<span class="string">'hello world'</span>);</div><div class="line">   		<span class="keyword">break</span>;</div><div class="line">   	<span class="keyword">case</span> <span class="string">'goodBye'</span>:</div><div class="line">   		alert(<span class="string">'goodBye'</span>);</div><div class="line">   		<span class="keyword">break</span>;</div><div class="line">   	<span class="keyword">default</span>:</div><div class="line">   		alert(<span class="string">'more'</span>);</div><div class="line">   &#125;</div><div class="line"> &lt;<span class="regexp">/script&gt;</span></div></pre></td></tr></table></figure>
<ul>
<li><code>switch()</code>的判断是全等执行(即数据类型和值都相等)的，不会触发类型转换<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line">   <span class="keyword">switch</span>(<span class="number">10</span>)&#123;</div><div class="line">   	<span class="keyword">case</span> <span class="string">'10'</span> :</div><div class="line">   		alert(<span class="string">'string'</span>);</div><div class="line">   		<span class="keyword">break</span>;</div><div class="line">   	<span class="keyword">case</span> <span class="number">10</span> :</div><div class="line">   		alert(<span class="string">'number'</span>);</div><div class="line">   		brea;</div><div class="line">   	<span class="keyword">default</span>:</div><div class="line">   		alert(<span class="string">'other'</span>);</div><div class="line">   &#125;</div><div class="line"> &lt;<span class="regexp">/script&gt;</span></div></pre></td></tr></table></figure>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">'txt'</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">'txt2'</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">	<span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">		<span class="keyword">var</span> data = <span class="keyword">new</span> <span class="built_in">Date</span>();</div><div class="line">		<span class="keyword">var</span> week = data.getDay();</div><div class="line">		<span class="keyword">var</span> oP = <span class="built_in">document</span>.getElementById(<span class="string">"txt"</span>);</div><div class="line">		<span class="keyword">switch</span>(week)&#123;</div><div class="line">			<span class="keyword">case</span> <span class="number">0</span> : oP.innerHTML = <span class="string">'Sunday'</span>; <span class="keyword">break</span>;</div><div class="line">			<span class="keyword">case</span> <span class="number">1</span> : oP.innerHTML = <span class="string">'Monday'</span>; <span class="keyword">break</span>;</div><div class="line">			<span class="keyword">case</span> <span class="number">2</span> : oP.innerHTML = <span class="string">'Tuesday'</span>; <span class="keyword">break</span>;</div><div class="line">			<span class="keyword">case</span> <span class="number">3</span> : oP.innerHTML = <span class="string">'Wednesday'</span>; <span class="keyword">break</span>;</div><div class="line">			<span class="keyword">case</span> <span class="number">4</span> : oP.innerHTML = <span class="string">'Thursday'</span>; <span class="keyword">break</span>;</div><div class="line">			<span class="keyword">case</span> <span class="number">5</span> : oP.innerHTML = <span class="string">'Friday'</span>; <span class="keyword">break</span>;</div><div class="line">			<span class="keyword">case</span> <span class="number">6</span> : oP.innerHTML = <span class="string">'Saturday'</span>; <span class="keyword">break</span>;</div><div class="line">			<span class="keyword">default</span>: oP.innerHTML = <span class="string">'默认值'</span>;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="comment">//w3c 方案</span></div><div class="line">		<span class="comment">//http://www.w3school.com.cn/jsref/jsref_getDay.asp</span></div><div class="line">		<span class="keyword">var</span> d=<span class="keyword">new</span> <span class="built_in">Date</span>();</div><div class="line">		<span class="keyword">var</span> weekday=<span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">7</span>);</div><div class="line">		weekday[<span class="number">0</span>]=<span class="string">"Sunday"</span>;</div><div class="line">		weekday[<span class="number">1</span>]=<span class="string">"Monday"</span>;</div><div class="line">		weekday[<span class="number">2</span>]=<span class="string">"Tuesday"</span>;</div><div class="line">		weekday[<span class="number">3</span>]=<span class="string">"Wednesday"</span>;</div><div class="line">		weekday[<span class="number">4</span>]=<span class="string">"Thursday"</span>;</div><div class="line">		weekday[<span class="number">5</span>]=<span class="string">"Friday"</span>;</div><div class="line">		weekday[<span class="number">6</span>]=<span class="string">"Saturday"</span>;</div><div class="line">		<span class="built_in">document</span>.getElementById(<span class="string">'txt2'</span>).innerHTML = <span class="string">"Today it is "</span> + weekday[d.getDay()];</div><div class="line">	&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="三目运算"><a href="#三目运算" class="headerlink" title="? :三目运算"></a><code>? :</code>三目运算</h3><p>判断条件 ? 条件成立执行的语句 : 不成立执行的语句 </p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="number">10</span> &lt; <span class="number">20</span> ? alert(<span class="string">'true'</span>) : alert(<span class="string">'false'</span>);</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">//当三目运算只要一个成立结果时，可以用`void 0`来充当另一个条件成立的内容</div><div class="line">10 &lt; 20 ? alert(&apos;true&apos;) : void 0;</div></pre></td></tr></table></figure>
<h2 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h2><h3 id="for"><a href="#for" class="headerlink" title="for"></a><code>for</code></h3><p><img src="http://7xovt0.com1.z0.glb.clouddn.com/blogif.jpg" alt="for判断流程"></p>
<ol>
<li>设置初始值(<code>var i=0;</code>)</li>
<li>设置循环执行条件(<code>i&lt;3</code>)</li>
<li>执行循环体中的内容(<code>{console.log(i);}</code>)</li>
<li>每轮循环后都执行操作(<code>i++</code>)</li>
<li>注意当循环遇到<code>break</code>或<code>continute</code>时，后面的代码都不会执行（包含<code>i++</code>都不执行）<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line">	<span class="comment">//估计出i会打印几次，以及值是多少 </span></div><div class="line">   <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)&#123;</div><div class="line">   	<span class="keyword">if</span>(i&lt;=<span class="number">5</span>)&#123;</div><div class="line">   		i+=<span class="number">2</span>;</div><div class="line">   		<span class="keyword">continue</span>;</div><div class="line">   	&#125;</div><div class="line">   	i+=<span class="number">3</span>;</div><div class="line">   	<span class="keyword">break</span>;</div><div class="line">   	<span class="built_in">console</span>.log(i);</div><div class="line">   &#125;</div><div class="line">   <span class="built_in">console</span>.log(i);</div><div class="line"> <span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></div></pre></td></tr></table></figure>
</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span>(初始化;判断条件;执行后的操作)&#123;</div><div class="line">     执行的语句</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="while"><a href="#while" class="headerlink" title="while"></a><code>while</code></h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">while</span>(判断条件)&#123;</div><div class="line">	执行语句</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> i = <span class="number">0</span>;</div><div class="line"><span class="keyword">while</span>(i&lt;<span class="number">3</span>)&#123;</div><div class="line">	alert(i);</div><div class="line">	i++;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="for-in"><a href="#for-in" class="headerlink" title="for...in"></a><code>for...in</code></h3><p>用来循环一个对象的属性名和属性值的<br>数字也可以当属性名，可以通过obj[number]来访问,同时在for循环时，它会先循环数字类型的属性（从小到大），接下按我们定义好的顺序<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line">   <span class="keyword">var</span> obj = &#123;</div><div class="line">   	<span class="attr">name</span> :<span class="string">'weison'</span>,</div><div class="line">   	<span class="number">1</span> : <span class="number">10000</span>,</div><div class="line">   	<span class="number">300</span> : <span class="number">200</span>,</div><div class="line">   	<span class="attr">age</span> : <span class="number">20</span>,</div><div class="line">   	<span class="attr">hobby</span> : <span class="string">'football'</span></div><div class="line">   &#125;</div><div class="line">   <span class="keyword">for</span>(<span class="keyword">var</span> key <span class="keyword">in</span> obj)&#123;</div><div class="line">   	<span class="built_in">console</span>.log(obj[key]);</div><div class="line">   &#125;</div><div class="line">   <span class="comment">//10000  weison</span></div><div class="line">   <span class="comment">//10000 200 weison 20 football</span></div><div class="line"> &lt;<span class="regexp">/script&gt;</span></div></pre></td></tr></table></figure></p>
<h2 id="跳出循环break与跳过循环continue"><a href="#跳出循环break与跳过循环continue" class="headerlink" title="跳出循环break与跳过循环continue"></a>跳出循环<code>break</code>与跳过循环<code>continue</code></h2><p>跳出循环<code>break</code>指的是不再进行循环<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;<span class="number">5</span>;i++)&#123;</div><div class="line">	<span class="keyword">if</span>(i == <span class="number">2</span>)&#123;</div><div class="line">	 <span class="keyword">break</span>;</div><div class="line">	&#125;</div><div class="line">	<span class="built_in">console</span>.log(i);</div><div class="line">&#125;</div><div class="line"><span class="built_in">console</span>.log(<span class="string">'跳出循环了'</span>);</div><div class="line"><span class="comment">// =&gt; 0 1 跳出循环了</span></div></pre></td></tr></table></figure></p>
<p>跳过循环<code>continue</code>指的是跨过本次循环，进行下一次循环<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;<span class="number">5</span>;i++)&#123;</div><div class="line">	<span class="keyword">if</span>(i == <span class="number">2</span>)&#123;</div><div class="line">	 <span class="keyword">continue</span>;</div><div class="line">	&#125;</div><div class="line">	<span class="built_in">console</span>.log(i);</div><div class="line">&#125;</div><div class="line"><span class="built_in">console</span>.log(<span class="string">'跳过了循环'</span>);</div><div class="line"><span class="comment">// =&gt; 0 1 3 4 跳过循环了</span></div></pre></td></tr></table></figure></p>
<h2 id="label为代码添加标签。"><a href="#label为代码添加标签。" class="headerlink" title="label为代码添加标签。"></a><code>label</code>为代码添加标签。</h2><p>配合<code>break</code>或<code>continue</code>来使用可以的循环中跳出到特定位置<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">start:<span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;<span class="number">5</span>;i++)&#123;</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">var</span> j=<span class="number">0</span>;i&lt;<span class="number">3</span>;j++)&#123;</div><div class="line">		<span class="keyword">if</span>(i==<span class="number">3</span>;j==<span class="number">2</span>)&#123;</div><div class="line">			<span class="keyword">break</span> start; <span class="comment">//这样操作后，break就会跳出start的循环 </span></div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line">alert(<span class="string">'跳出start循环'</span>);</div></pre></td></tr></table></figure></p>
<h2 id="数据类型的真假"><a href="#数据类型的真假" class="headerlink" title="数据类型的真假"></a>数据类型的真假</h2><p>数据类型有：</p>
<ol>
<li>数字(包含NaN )</li>
<li>字符串</li>
<li>布尔值</li>
<li>函数</li>
<li>对象(element,[],{},null)</li>
<li>undefined</li>
</ol>
<h3 id="真"><a href="#真" class="headerlink" title="真"></a>真</h3><ol>
<li>所有非0的数字(1,-1,1231,1.231)</li>
<li>所有的非空字符串(‘afbd’，’不可思异’,’ ‘有空格)</li>
<li>true</li>
<li>所有的函数(function(){})</li>
<li>能找到的元素</li>
<li>[],{}数据与json就像一个仓库，无论内面有没有放东西，<br>这个仓库都真实存在，所以永远返回true</li>
</ol>
<h3 id="假"><a href="#假" class="headerlink" title="假"></a>假</h3><ol>
<li>0、NaN </li>
<li>空字符串(‘’无空格)可以理解为空字符串就像在放屁一样，<br>但里面包含了空格，就是想说但没说，所以会返回true</li>
<li>false </li>
<li>不能找到的元素</li>
<li>null</li>
<li>undefined 未定义</li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[运算符]]></title>
      <url>weison.org/2016/02/09/Operator/</url>
      <content type="html"><![CDATA[<h2 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h2><h3 id="算术-加"><a href="#算术-加" class="headerlink" title="算术 + 加"></a>算术 + 加</h3><ol>
<li>要注意加号在运算时，当有其中一个值是字符时，会将结果隐性转换成字符串</li>
</ol>
<h4 id="减"><a href="#减" class="headerlink" title="- 减"></a>- 减</h4><h4 id="乖"><a href="#乖" class="headerlink" title="* 乖"></a>* 乖</h4><h4 id="除"><a href="#除" class="headerlink" title="/ 除"></a>/ 除</h4><h4 id="取模"><a href="#取模" class="headerlink" title="% 取模"></a>% 取模</h4><p>0%3 =0<br>1%3 =1<br>2%3 =2<br>3%3 =0<br>利用取模的当除以一个与除数相同的数时等于0（3%3=0）的特征进行隔行变色,利用鼠标移入记录颜色值，移出时将记录的值还原给li的方法来实现移入变色，移出还原<br>记录index的值，判断index的值是否等于被记录的beCheck值来分配不同的颜色<br><iframe scrolling="no" width="100%" height="300" src="http://jsfiddle.net/a8ezxh84/3/embedded/js,resources,html,css,result/light" frameborder="0" allowfullscreen></iframe></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//利用取模把秒数转换</span></div><div class="line"><span class="keyword">var</span> s = <span class="number">65</span>;</div><div class="line"><span class="built_in">console</span>.log(<span class="built_in">Math</span>.floor(s/<span class="number">60</span>)+<span class="string">'分'</span>+s%<span class="number">60</span>+<span class="string">'秒'</span>); <span class="comment">//=&gt; 1分5秒</span></div></pre></td></tr></table></figure>
<h3 id="关系"><a href="#关系" class="headerlink" title="关系"></a>关系</h3><h4 id="gt-大于"><a href="#gt-大于" class="headerlink" title="&gt; 大于"></a><code>&gt;</code> 大于</h4><h4 id="lt-小于"><a href="#lt-小于" class="headerlink" title="&lt; 小于"></a><code>&lt;</code> 小于</h4><h4 id="gt-大于等于"><a href="#gt-大于等于" class="headerlink" title="&gt;= 大于等于"></a><code>&gt;=</code> 大于等于</h4><h4 id="lt-小于等于"><a href="#lt-小于等于" class="headerlink" title="&lt;= 小于等于"></a><code>&lt;=</code> 小于等于</h4><h4 id="数值相等"><a href="#数值相等" class="headerlink" title="== 数值相等"></a><code>==</code> 数值相等</h4><h4 id="数值不等"><a href="#数值不等" class="headerlink" title="!= 数值不等"></a><code>!=</code> 数值不等</h4><h4 id="数值及类型相等"><a href="#数值及类型相等" class="headerlink" title="=== 数值及类型相等"></a><code>===</code> 数值及类型相等</h4><h4 id="数值和类型不等"><a href="#数值和类型不等" class="headerlink" title="!=== 数值和类型不等"></a><code>!===</code> 数值和类型不等</h4><ol>
<li>只比较值 == != ‘200’ == 200 //=&gt; true</li>
<li>比较值和数据类型 === !=== ‘200’ == 200 //=&gt; false</li>
</ol>
<h3 id="逻辑"><a href="#逻辑" class="headerlink" title="逻辑"></a>逻辑</h3><h4 id="amp-amp-与-所有条件都要成立"><a href="#amp-amp-与-所有条件都要成立" class="headerlink" title="&amp;&amp; 与(所有条件都要成立)"></a><code>&amp;&amp;</code> 与(所有条件都要成立)</h4><ol>
<li>从左到右判断，两边都成立，才会返回true<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> a = <span class="number">20</span> &lt; <span class="number">30</span> &amp;&amp; <span class="number">40</span>;</div><div class="line"><span class="built_in">console</span>.log(a); </div><div class="line"><span class="comment">// =&gt; 20 它会从左往向计算，然后返回最终的值给a，如果一开始的判断结果是false，</span></div><div class="line">那么就会直接返回<span class="literal">false</span></div></pre></td></tr></table></figure>
</li>
</ol>
<h4 id="或-其中一个条件都要成立"><a href="#或-其中一个条件都要成立" class="headerlink" title="|| 或(其中一个条件都要成立)"></a><code>||</code> 或(其中一个条件都要成立)</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> b = <span class="number">20</span> &lt; <span class="number">30</span> || <span class="number">40</span>;</div><div class="line"><span class="built_in">console</span>.log(b); </div><div class="line"><span class="comment">// =&gt; true 它会从左往向计算，然后返回第一个值为真的数据，或者判断到最后返回false</span></div><div class="line"><span class="keyword">var</span> c = <span class="number">20</span> &gt; <span class="number">30</span> || <span class="number">20</span> &gt; <span class="number">40</span>;</div><div class="line"><span class="built_in">console</span>.log(c);  <span class="comment">//=&gt; false</span></div><div class="line"><span class="keyword">var</span> d = <span class="number">20</span> &gt; <span class="number">30</span> || <span class="number">30</span> || <span class="number">40</span>;</div><div class="line"><span class="built_in">console</span>.log(d);  <span class="comment">//=&gt; 30</span></div></pre></td></tr></table></figure>
<h4 id="否-相反"><a href="#否-相反" class="headerlink" title="! 否(相反)"></a><code>!</code> 否(相反)</h4><ol>
<li><p>将true变成false</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> e =<span class="literal">true</span>;</div><div class="line"><span class="built_in">console</span>.log(!e); <span class="comment">//=&gt;false</span></div></pre></td></tr></table></figure>
</li>
<li><p>将数据隐性转换成boolean</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">console</span>.log(!<span class="number">200</span>); <span class="comment">//=&gt; false(js中非0数据都为true)</span></div></pre></td></tr></table></figure>
</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">	</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[移动性能优化]]></title>
      <url>weison.org/2016/02/04/webAppPerformanceOptimization/</url>
      <content type="html"><![CDATA[<h3 id="性能优化的方向"><a href="#性能优化的方向" class="headerlink" title="性能优化的方向"></a>性能优化的方向</h3><h4 id="加载性能"><a href="#加载性能" class="headerlink" title="加载性能"></a>加载性能</h4><p>一般最核心的就是减少请求数，因为每次请次数据都会产生3次TCP握手，如果每个资源都发出请求，那会很浪费时间。当合并完后要注意代码的压缩，减少体积</p>
<h5 id="首屏加载时间-一般是指Dom-ready时间"><a href="#首屏加载时间-一般是指Dom-ready时间" class="headerlink" title="首屏加载时间 一般是指Dom ready时间"></a>首屏加载时间 一般是指Dom ready时间</h5><p><img src="http://7xovt0.com1.z0.glb.clouddn.com/chromeTimeline" alt="chrome time"></p>
<ul>
<li>initial connection 网络等待时间</li>
<li>Waiting(TTFB)向服务器请求数据，服务器返回第一个数据包的时间，反应服务器性能</li>
</ul>
<h5 id="CDN"><a href="#CDN" class="headerlink" title="CDN"></a>CDN</h5><p>网络分发服务，主要是请求一些静态的资源.从最靠近的资源节点中获取数据</p>
<h5 id="避免link中的空href和img中的空src"><a href="#避免link中的空href和img中的空src" class="headerlink" title="避免link中的空href和img中的空src"></a>避免link中的空href和img中的空src</h5><p>因为它也会发送请求的</p>
<h5 id="使用Gzip压缩"><a href="#使用Gzip压缩" class="headerlink" title="使用Gzip压缩"></a>使用Gzip压缩</h5><h5 id="把css放在顶部"><a href="#把css放在顶部" class="headerlink" title="把css放在顶部"></a>把css放在顶部</h5><p>减少重绘重排的几率</p>
<h5 id="把js放在底部"><a href="#把js放在底部" class="headerlink" title="把js放在底部"></a>把js放在底部</h5><p>避免js的阻塞</p>
<h5 id="避免使用css表达式"><a href="#避免使用css表达式" class="headerlink" title="避免使用css表达式"></a>避免使用css表达式</h5><p>主要是针对ie下的expression</p>
<h5 id="把css和js抽取成外部文件"><a href="#把css和js抽取成外部文件" class="headerlink" title="把css和js抽取成外部文件"></a>把css和js抽取成外部文件</h5><p>这样可以充分利用缓存机制，但并不代表内联就不好，内联的好处就是减少网络请求</p>
<h5 id="get请求比post请求的速度要快"><a href="#get请求比post请求的速度要快" class="headerlink" title="get请求比post请求的速度要快"></a><code>get</code>请求比<code>post</code>请求的速度要快</h5><ul>
<li><code>get</code>请求常用于获取数据 </li>
<li><code>post</code>常用于修改数据</li>
</ul>
<h5 id="减少cookie的大小"><a href="#减少cookie的大小" class="headerlink" title="减少cookie的大小"></a>减少cookie的大小</h5><p>因为在每次请求的时候都会带上cookie，如果cookie过大，会造成资源浪费</p>
<h5 id="html-prefetch"><a href="#html-prefetch" class="headerlink" title="html prefetch"></a><code>html prefetch</code></h5><p>实现域名的预解释和页面的预加载<br><a href="http://www.jianshu.com/p/7f58ddfc1392#" target="_blank" rel="external">HTML5 prefetch-赖小赖小赖 </a></p>
<h5 id="getscript-动态加载script"><a href="#getscript-动态加载script" class="headerlink" title="$.getscript 动态加载script"></a><code>$.getscript</code> 动态加载script</h5><h5 id="对于非首屏的图片都使用lazyload"><a href="#对于非首屏的图片都使用lazyload" class="headerlink" title="对于非首屏的图片都使用lazyload"></a>对于非首屏的图片都使用lazyload</h5><p>避免资源的浪费，同时避免了资源下载的抢占资源，比如说有100张图片，如果同时加载，那么通过有限的并发时，这100张图片就会占用网络带宽</p>
<h4 id="js方面的"><a href="#js方面的" class="headerlink" title="js方面的"></a>js方面的</h4><h5 id="尽量不要使用with和eval"><a href="#尽量不要使用with和eval" class="headerlink" title="尽量不要使用with和eval"></a>尽量不要使用with和eval</h5><p>性能低下，而且有作用域转换问题，容易引起bug</p>
<h5 id="优化DOM操作"><a href="#优化DOM操作" class="headerlink" title="优化DOM操作"></a>优化DOM操作</h5><p><a href="http://developer.51cto.com/art/201508/488053.htm" target="_blank" rel="external">高性能JavaScript DOM编程以及重排与重绘</a></p>
<h4 id="渲染速度"><a href="#渲染速度" class="headerlink" title="渲染速度"></a>渲染速度</h4><h4 id="用户交互体验速度"><a href="#用户交互体验速度" class="headerlink" title="用户交互体验速度"></a>用户交互体验速度</h4><h4 id="动画流畅性"><a href="#动画流畅性" class="headerlink" title="动画流畅性"></a>动画流畅性</h4><h4 id="DOM操作无闪动"><a href="#DOM操作无闪动" class="headerlink" title="DOM操作无闪动"></a>DOM操作无闪动</h4><h3 id="RTT-Round-trip-time-回路时间"><a href="#RTT-Round-trip-time-回路时间" class="headerlink" title="RTT Round-trip time 回路时间"></a><code>RTT</code> Round-trip time 回路时间</h3><ol>
<li>一个请求从发起请求到接收到反馈数据的时间 </li>
</ol>
<h3 id="网络耗时的测定"><a href="#网络耗时的测定" class="headerlink" title="网络耗时的测定"></a>网络耗时的测定</h3><h4 id="HTML5"><a href="#HTML5" class="headerlink" title="HTML5"></a>HTML5</h4><ol>
<li>提供的网络测速方法</li>
</ol>
<h4 id="Navigation-Timing"><a href="#Navigation-Timing" class="headerlink" title="Navigation Timing"></a>Navigation Timing</h4><ol>
<li>获取主页相关性能数据</li>
</ol>
<h4 id="Resource-Timing"><a href="#Resource-Timing" class="headerlink" title="Resource Timing"></a>Resource Timing</h4><ol>
<li>获取主页相关资源的性能数据(iframe,image,script..)</li>
</ol>
<h3 id="手段"><a href="#手段" class="headerlink" title="手段"></a>手段</h3><h4 id="减少请求数-即使是空请求，也有回路时间"><a href="#减少请求数-即使是空请求，也有回路时间" class="headerlink" title="减少请求数(即使是空请求，也有回路时间)"></a>减少请求数(即使是空请求，也有回路时间)</h4><h4 id="减少传输体积"><a href="#减少传输体积" class="headerlink" title="减少传输体积"></a>减少传输体积</h4><ol>
<li>首次请求建议不要超过14K(tcp包初始化窗口数10个)</li>
</ol>
<h4 id="尽可能利用缓存"><a href="#尽可能利用缓存" class="headerlink" title="尽可能利用缓存"></a>尽可能利用缓存</h4><h4 id="缩短关键路径"><a href="#缩短关键路径" class="headerlink" title="缩短关键路径"></a>缩短关键路径</h4><h4 id="合理安排请求顺序"><a href="#合理安排请求顺序" class="headerlink" title="合理安排请求顺序"></a>合理安排请求顺序</h4><ol>
<li><a href="http://caniuse.com/" target="_blank" rel="external">浏览器属性支持查询can i use</a></li>
<li>DNS预解析DNS Prefetch,你浏览一个网页的时候，浏览器会在加载网页时对网页中包含的域名进行解析缓存，这样在你单击当前已经加载完成的网页中的链接时就无需再进行DNS 回源解析，减少用户的等待时间，提高用户体验。</li>
</ol>
<ul>
<li>实现步骤</li>
<li><meta http-equiv="x-dns-prefetch-control" content="on"><br>用meta信息来告知浏览器, 当前页面要做DNS预解析</li>
<li><link rel="dns-prefetch" href="//imagecache.qq.com"><br> 在页面的之间使用link标签来强制进行DNS预解析:<br>-　第一步也可以省略。需要注意的是，预解析的域名下通常是存储了js、css、图片等静态资源，并且这些资源必定会在当前页面的下一个页面要加载。否则会添加预解析标签会造成DNS查询次数反而增加，造成访问更慢。所以DNS Prefetch是一项既刺激又危险的技术，使用时需谨慎。</li>
</ul>
<ol>
<li>域名</li>
<li>链路复用，在一段时间内，服务器会与链接不断开，在时间内向这个向域名发请求，服务器浏览器就不会建立链接，而是直接发送这个请求，这样会节省一个回路时间(1RTT≈200ms)，不过要注意这会增加内存使用</li>
<li><code>web Workers</code><a href="http://www.w3school.com.cn/html5/html_5_webworkers.asp" target="_blank" rel="external">w3c</a><br><a href="http://blog.jobbole.com/30592/" target="_blank" rel="external">HTML5 Web Worker的使用</a></li>
<li><code>web Workers</code><a href="http://www.ibm.com/developerworks/cn/web/1112_huangxa_websocket/" target="_blank" rel="external">HTML5 WebSocket</a></li>
<li>在移动页面上，由于页面元素较小，通过样式内联减少请求从而提升速度<a href="https://www.npmjs.com/package/gulp-inline-css/" target="_blank" rel="external">gulp inline css</a></li>
<li>组件化开发</li>
</ol>
<ul>
<li>按需/异步加载</li>
<li>异步渲染</li>
<li>结合服务器渲染</li>
</ul>
<ol>
<li>图片懒加载</li>
</ol>
<ul>
<li>渲染时不进行src赋值</li>
<li>插入DOM时进行可视区域计算</li>
<li>如果图片在可视区内，赋值给src</li>
<li>如果在可视区外，留着scroll处理</li>
</ul>
<h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><ol>
<li><a href="http://www.jianshu.com/users/aa74c703612d/latest_articles" target="_blank" rel="external">齐修-好奇心日报前端主管的文章</a></li>
<li><a href="https://aotu.io/notes/2016/03/16/optimization/index.html" target="_blank" rel="external">前端优化不完全指南</a></li>
<li><a href="https://aotu.io/notes/2016/01/07/debug-webapp-with-chrome-devtools/" target="_blank" rel="external">使用Chrome开发工具优化Web应用</a></li>
<li><a href="http://www.kancloud.cn/jikeytang/qq/81139" target="_blank" rel="external">豪情-kancloud.</a></li>
<li><a href="https://isux.tencent.com/zhitu-client.html" target="_blank" rel="external">智图-腾讯出品的图片压缩工具</a></li>
<li><a href="https://github.com/targetkiller/gulp-imageisux" target="_blank" rel="external">智图gulp插件</a></li>
<li><a href="https://isux.tencent.com/svg-icon-part-one.html" target="_blank" rel="external">《高清ICON SVG解决方案（上）》</a></li>
<li><a href="https://isux.tencent.com/svg-icon-part-two.html" target="_blank" rel="external">《高清ICON SVG解决方案（下）》</a></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[event]]></title>
      <url>weison.org/2016/01/24/event-1/</url>
      <content type="html"><![CDATA[<h2 id="event事件对象"><a href="#event事件对象" class="headerlink" title="event事件对象"></a><code>event</code>事件对象</h2><ol>
<li>当一个事件触发时，触发该事件的对象(鼠标或键盘)的相关信息会记录在event中</li>
<li><p>事件调用的函数，叫做事件函数，判断一个函数是不是事件函数，不是在它在声明的时候判断，而是看它是怎么被执行的</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn1</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	alert(event);</div><div class="line">&#125;</div><div class="line">fn1(); <span class="comment">//不是被事件调用，所以非事件函数</span></div><div class="line"><span class="built_in">window</span>.onload = fn1();<span class="comment">//事件函数</span></div></pre></td></tr></table></figure>
</li>
<li><p>利用于飞机的黑匣子</p>
</li>
<li>例如鼠标的位置</li>
<li>event对象一般都是在函数里面调用，并且这个函数必须是事件调用的，在函数外是没有内容的<h3 id="ie-chrome下-event是一个内置的全局对象-var-event"><a href="#ie-chrome下-event是一个内置的全局对象-var-event" class="headerlink" title="ie\chrome下,event是一个内置的全局对象(var event;)"></a>ie\chrome下,event是一个内置的全局对象(var event;)</h3><h3 id="标准的浏览器下（ie8以上）-事件对象是通过函数的第一个参数传入的"><a href="#标准的浏览器下（ie8以上）-事件对象是通过函数的第一个参数传入的" class="headerlink" title="标准的浏览器下（ie8以上） 事件对象是通过函数的第一个参数传入的"></a>标准的浏览器下（ie8以上） 事件对象是通过函数的第一个参数传入的</h3></li>
<li>一个函数是事件函数调用的，那个这个函数的第一个参数就是事件对象</li>
<li>兼容写法<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn1</span>(<span class="params">ev</span>)</span>&#123;</div><div class="line">	<span class="comment">//在标准浏览器下，当函数被事件调用时，ev是一个事件对象，</span></div><div class="line">	<span class="comment">//而当非标准的ie下，ev是一个undefinder，返回event这个全局函数</span></div><div class="line">	<span class="keyword">var</span> ev = ev || event;</div><div class="line">&#125;</div><div class="line"><span class="built_in">window</span>.onclick = fn1;</div></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="clientX-Y-当鼠标点击发生时，鼠标到当前可视图的距离"><a href="#clientX-Y-当鼠标点击发生时，鼠标到当前可视图的距离" class="headerlink" title="clientX[Y]当鼠标点击发生时，鼠标到当前可视图的距离"></a><code>clientX[Y]</code>当鼠标点击发生时，鼠标到当前可视图的距离</h3><ol>
<li><code>onmousemove</code>当鼠标移动的时候,这是一个以时间间隔触发的函数，而不是每改变一次就触发一次，比如说，它是在50ms内监听一次，鼠标现在的位置与之前位置的值的变化。</li>
</ol>
<h3 id="案例：跟随移动"><a href="#案例：跟随移动" class="headerlink" title="案例：跟随移动"></a>案例：跟随移动</h3><iframe scrolling="no" width="100%" height="300" src="http://jsfiddle.net/8tx99spc/embedded/js,resources,html,css,result/light" frameborder="0" allowfullscreen></iframe>
<h2 id="焦点"><a href="#焦点" class="headerlink" title="焦点"></a><code>焦点</code></h2><ol>
<li>使浏览器能够区分当前输入的对象。当一个元素获得焦点的时候，它就可以接受用户输入的数据</li>
<li>不是所有元素都有焦点的，能够响应用户点击a，用户输操作的如input,select会响应用户操作的元素是有焦点的，而如div，span这样元素则无</li>
<li>让元素获得焦点的方法:<br>3.1 点击<br>3.2 tab<br>3.3 js</li>
</ol>
<h3 id="obj-onfocus当元素获取焦点的时候触发"><a href="#obj-onfocus当元素获取焦点的时候触发" class="headerlink" title="obj.onfocus当元素获取焦点的时候触发"></a><code>obj.onfocus</code>当元素获取焦点的时候触发</h3><h3 id="obj-onblur当元素失去焦点时触发"><a href="#obj-onblur当元素失去焦点时触发" class="headerlink" title="obj.onblur当元素失去焦点时触发"></a><code>obj.onblur</code>当元素失去焦点时触发</h3><h3 id="obj-focus-让元素获取焦点的方法"><a href="#obj-focus-让元素获取焦点的方法" class="headerlink" title="obj.focus()让元素获取焦点的方法"></a><code>obj.focus()</code>让元素获取焦点的方法</h3><h3 id="obj-blur-取消元素的焦点"><a href="#obj-blur-取消元素的焦点" class="headerlink" title="obj.blur()取消元素的焦点"></a><code>obj.blur()</code>取消元素的焦点</h3><h3 id="obj-select-选中指定元素（响应用户焦点事件的元素，如input-textarea）里面的文本内容"><a href="#obj-select-选中指定元素（响应用户焦点事件的元素，如input-textarea）里面的文本内容" class="headerlink" title="obj.select() 选中指定元素（响应用户焦点事件的元素，如input,textarea）里面的文本内容"></a><code>obj.select()</code> 选中指定元素（响应用户焦点事件的元素，如input,textarea）里面的文本内容</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line">	<span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">		<span class="keyword">var</span> oTxt = <span class="built_in">document</span>.getElementById(<span class="string">"txt"</span>);</div><div class="line">		oTxt.onfocus = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">			<span class="keyword">if</span>(<span class="keyword">this</span>.value == <span class="string">'请输入'</span>)&#123;</div><div class="line">				<span class="keyword">this</span>.value = <span class="string">''</span>;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		oTxt.onblur = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">			<span class="keyword">if</span>(<span class="keyword">this</span>.value == <span class="string">'请输入'</span>)&#123;</div><div class="line">				<span class="keyword">this</span>.value = <span class="string">''</span>;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&lt;<span class="regexp">/script&gt;</span></div></pre></td></tr></table></figure>
<h2 id="事件绑定的两种形式"><a href="#事件绑定的两种形式" class="headerlink" title="事件绑定的两种形式"></a>事件绑定的两种形式</h2><h3 id="赋值形式obj-onclick-fn1，当给同一个对象同一事件添加不同的函数时，会被覆盖"><a href="#赋值形式obj-onclick-fn1，当给同一个对象同一事件添加不同的函数时，会被覆盖" class="headerlink" title="赋值形式obj.onclick = fn1，当给同一个对象同一事件添加不同的函数时，会被覆盖;"></a>赋值形式<code>obj.onclick = fn1</code>，当给同一个对象同一事件添加不同的函数时，会被覆盖;</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	<span class="function"><span class="keyword">function</span> <span class="title">fn1</span>(<span class="params"></span>)</span>&#123;</div><div class="line">		alert(<span class="number">1</span>);</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">function</span> <span class="title">fn2</span>(<span class="params"></span>)</span>&#123;</div><div class="line">		alert(<span class="number">2</span>);</div><div class="line">	&#125;</div><div class="line">	<span class="built_in">document</span>.onclick = fn1;</div><div class="line">	<span class="built_in">document</span>.onclick = fn2;</div><div class="line">&#125;</div><div class="line">&lt;<span class="regexp">/script&gt;</span></div></pre></td></tr></table></figure>
<h3 id="第2种"><a href="#第2种" class="headerlink" title="第2种"></a>第2种</h3><h4 id="ie下-obj-attachEvent-事件名称，事件函数"><a href="#ie下-obj-attachEvent-事件名称，事件函数" class="headerlink" title="ie下,obj.attachEvent(事件名称，事件函数)"></a>ie下,<code>obj.attachEvent(事件名称，事件函数)</code></h4><ol>
<li>没有捕获</li>
<li>事件名称有on<br>1.事件函数执行顺序，标准ie正序,非标准ie倒序<br>1.this指向window</li>
</ol>
<h4 id="标准浏览器下-obj-addEventListener-事件名称，事件函数，是否捕获"><a href="#标准浏览器下-obj-addEventListener-事件名称，事件函数，是否捕获" class="headerlink" title="标准浏览器下,obj.addEventListener(事件名称，事件函数，是否捕获)"></a>标准浏览器下,<code>obj.addEventListener(事件名称，事件函数，是否捕获)</code></h4><ol>
<li>是否捕获,默认是<code>false</code>,<code>true</code>:捕获(自上而下),<code>false</code>冒泡（自下而上）</li>
<li>事件名称没有on</li>
<li>事件函数执行函数正序</li>
<li>this指向调用函数的对象</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	<span class="comment">//ie下</span></div><div class="line">	<span class="built_in">document</span>.attachEvent(<span class="string">'onclick'</span>,fn1);</div><div class="line">	<span class="built_in">document</span>.attachEvent(<span class="string">'onclick'</span>,fn2);</div><div class="line">	<span class="comment">//标准浏览器下</span></div><div class="line">	<span class="built_in">document</span>.addEventListener(<span class="string">'click'</span>, fn1,<span class="literal">false</span>);</div><div class="line">	<span class="built_in">document</span>.addEventListener(<span class="string">'click'</span>, fn2,<span class="literal">false</span>);</div><div class="line">	<span class="function"><span class="keyword">function</span> <span class="title">fn1</span>(<span class="params"></span>)</span>&#123;</div><div class="line">		alert(<span class="number">1</span>);			</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">function</span> <span class="title">fn2</span>(<span class="params"></span>)</span>&#123;</div><div class="line">		alert(<span class="keyword">this</span>);</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line">&lt;<span class="regexp">/script&gt;</span></div></pre></td></tr></table></figure>
<h2 id="‘call’改变函数执行过程中内部this的指向"><a href="#‘call’改变函数执行过程中内部this的指向" class="headerlink" title="‘call’改变函数执行过程中内部this的指向"></a>‘call’改变函数执行过程中内部this的指向</h2><h3 id="第1个参数可以改变this的指向"><a href="#第1个参数可以改变this的指向" class="headerlink" title="第1个参数可以改变this的指向"></a>第1个参数可以改变this的指向</h3><h3 id="第2个参数开始是原函数的参数列表"><a href="#第2个参数开始是原函数的参数列表" class="headerlink" title="第2个参数开始是原函数的参数列表"></a>第2个参数开始是原函数的参数列表</h3><h3 id="如果第一个参数是null它不是把this指向this-而是把它指向回原来函数内部的this"><a href="#如果第一个参数是null它不是把this指向this-而是把它指向回原来函数内部的this" class="headerlink" title="如果第一个参数是null它不是把this指向this,而是把它指向回原来函数内部的this"></a>如果第一个参数是<code>null</code>它不是把this指向this,而是把它指向回原来函数内部的this</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	<span class="function"><span class="keyword">function</span> <span class="title">count</span>(<span class="params">a,b</span>)</span>&#123;</div><div class="line">		alert(<span class="keyword">this</span>);</div><div class="line">		alert(a+b);</div><div class="line">	&#125;</div><div class="line">	<span class="comment">//默认情况下this指向的是window</span></div><div class="line">	count(<span class="number">10</span>,<span class="number">20</span>); </div><div class="line">	<span class="comment">//通过call，把this指向了2,然后第二个参数开始是原</span></div><div class="line">	<span class="comment">//函数的列表,a=10,b=20</span></div><div class="line">	count.call(<span class="number">2</span>,<span class="number">10</span>,<span class="number">20</span>);</div><div class="line">&#125;</div><div class="line">&lt;<span class="regexp">/script&gt;</span></div></pre></td></tr></table></figure>
<h3 id="同一事件对象，同一触发函数执行多个函数的兼容解决方法"><a href="#同一事件对象，同一触发函数执行多个函数的兼容解决方法" class="headerlink" title="同一事件对象，同一触发函数执行多个函数的兼容解决方法"></a>同一事件对象，同一触发函数执行多个函数的兼容解决方法</h3><iframe scrolling="no" width="100%" height="300" src="http://jsfiddle.net/cccq8oss/embedded/js,resources,html,css,result/light" frameborder="0" allowfullscreen></iframe>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line"><span class="comment">/**</span></div><div class="line"> * bind(document,'click',fn);</div><div class="line"> * @param  &#123;[type]&#125;   obj    [执行的对象]</div><div class="line"> * @param  &#123;[type]&#125;   evName [触发事件的名称]</div><div class="line"> * @param  &#123;Function&#125; fn     [执行的函数]</div><div class="line"> * @return &#123;[type]&#125;          [description]</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">bind</span>(<span class="params">obj,evName,fn</span>)</span>&#123;</div><div class="line">		<span class="comment">//判断对象是否支持addEventListener方法</span></div><div class="line">		<span class="keyword">if</span>(obj.addEventListener)&#123;</div><div class="line">			<span class="comment">//如果是，则调用</span></div><div class="line">			obj.addEventListener(evName,fn,<span class="literal">false</span>);</div><div class="line">		&#125;<span class="keyword">else</span>&#123;</div><div class="line">			<span class="comment">//attachEvent要在事件名称前+on,所以会出现`on`+evName</span></div><div class="line">			<span class="comment">//利用call方法让this指向触发函数的对象</span></div><div class="line">			obj.attachEvent(<span class="string">'on'</span>+evName,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">				fn.call(obj);</div><div class="line">			&#125;)</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line">&lt;<span class="regexp">/script&gt;</span></div></pre></td></tr></table></figure>
<h2 id="事件冒泡"><a href="#事件冒泡" class="headerlink" title="事件冒泡"></a>事件冒泡</h2><p>当一个子元素通过事件触发（如点击）函数时，这个子元素的触发动作（onclick）也会<br>向上传播到它的所有父级。（son-&gt;parent-&gt;gradparent-…window）这种事发触发的传播机制不会因为其中一个父级没有事件绑定函数(如parent没有<br>onclick对应的事件函数)而中断。</p>
<iframe scrolling="no" width="100%" height="300" src="http://jsfiddle.net/weison/wd8xo6us/1/embedded/js,resources,html,css,result/light" frameborder="0" allowfullscreen></iframe>
<h3 id="事件绑定函数"><a href="#事件绑定函数" class="headerlink" title="事件绑定函数"></a>事件绑定函数</h3><p>给某个特定的事件添加的函数</p>
<h3 id="ie下cancelBubble-true-取消当前对象的当前事件冒泡"><a href="#ie下cancelBubble-true-取消当前对象的当前事件冒泡" class="headerlink" title="ie下cancelBubble=true 取消当前对象的当前事件冒泡"></a>ie下<code>cancelBubble=true</code> 取消当前对象的当前事件冒泡</h3><h3 id="firefox-chrome下event-stopPropagation-取消当前对象的当前事件冒泡"><a href="#firefox-chrome下event-stopPropagation-取消当前对象的当前事件冒泡" class="headerlink" title="firefox,chrome下event.stopPropagation() 取消当前对象的当前事件冒泡"></a>firefox,chrome下<code>event.stopPropagation()</code> 取消当前对象的当前事件冒泡</h3><iframe scrolling="no" width="100%" height="300" src="http://jsfiddle.net/weison/wd8xo6us/3/embedded/js,resources,html,css,result/light" frameborder="0" allowfullscreen></iframe>
<p>利用事件冒泡机制，将#son的事件绑定到父级的father下<br><iframe scrolling="no" width="100%" height="300" src="http://jsfiddle.net/weison/s05umo7u/embedded/js,resources,html,css,result/light" frameborder="0" allowfullscreen></iframe></p>
<h2 id="事件取消"><a href="#事件取消" class="headerlink" title="事件取消"></a>事件取消</h2><h3 id="null取消赋值形式"><a href="#null取消赋值形式" class="headerlink" title="null取消赋值形式"></a><code>null</code>取消赋值形式</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">	<span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">		<span class="function"><span class="keyword">function</span> <span class="title">fn1</span>(<span class="params"></span>)</span>&#123;alert(<span class="number">1</span>);&#125;</div><div class="line">		<span class="built_in">document</span>.onclick = fn1;</div><div class="line">		<span class="built_in">document</span>.onclick = <span class="literal">null</span>;</div><div class="line">	&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="ie下obj-detachEvent-事件名称，事件函数"><a href="#ie下obj-detachEvent-事件名称，事件函数" class="headerlink" title="ie下obj.detachEvent(事件名称，事件函数)"></a>ie下<code>obj.detachEvent(事件名称，事件函数)</code></h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn1</span>(<span class="params"></span>)</span>&#123;alert(<span class="number">1</span>);&#125;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn2</span>(<span class="params"></span>)</span>&#123;alert(<span class="number">2</span>);&#125;</div><div class="line"><span class="built_in">document</span>.attachEvent(<span class="string">'onclick'</span>,fn1);</div><div class="line"><span class="built_in">document</span>.attachEvent(<span class="string">'onclick'</span>,fn2);</div><div class="line"><span class="comment">//因为atattachEvent可以绑定多个事件，所以要指定是解除绑定哪一个</span></div><div class="line"><span class="built_in">document</span>.detachEvent(<span class="string">'onclick'</span>,fn1);</div></pre></td></tr></table></figure>
<h3 id="标准下-obj-removeEventListener事件名称，事件函数，是否捕获）"><a href="#标准下-obj-removeEventListener事件名称，事件函数，是否捕获）" class="headerlink" title="标准下,obj.removeEventListener事件名称，事件函数，是否捕获）"></a>标准下,<code>obj.removeEventListener事件名称，事件函数，是否捕获）</code></h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn1</span>(<span class="params"></span>)</span>&#123;alert(<span class="number">1</span>);&#125;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn2</span>(<span class="params"></span>)</span>&#123;alert(<span class="number">2</span>);&#125;</div><div class="line"><span class="built_in">document</span>.addEventListener(<span class="string">'click'</span>,fn1,<span class="literal">false</span>);</div><div class="line"><span class="built_in">document</span>.addEventListener(<span class="string">'click'</span>,fn2,<span class="literal">false</span>);</div><div class="line"><span class="built_in">document</span>.removeEventListener(<span class="string">'click'</span>,fn1,<span class="literal">false</span>);</div></pre></td></tr></table></figure>
<h2 id="键盘事件"><a href="#键盘事件" class="headerlink" title="键盘事件"></a>键盘事件</h2><h3 id="onkeyup鼠标按下时"><a href="#onkeyup鼠标按下时" class="headerlink" title="onkeyup鼠标按下时"></a><code>onkeyup</code>鼠标按下时</h3><h3 id="onkeydown鼠标抬起时"><a href="#onkeydown鼠标抬起时" class="headerlink" title="onkeydown鼠标抬起时"></a><code>onkeydown</code>鼠标抬起时</h3><h3 id="event-keyCode数字类型，按键的值"><a href="#event-keyCode数字类型，按键的值" class="headerlink" title="event.keyCode数字类型，按键的值"></a><code>event.keyCode</code>数字类型，按键的值</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">textarea</span> <span class="attr">name</span>=<span class="string">""</span> <span class="attr">cols</span>=<span class="string">"30"</span> <span class="attr">rows</span>=<span class="string">"10"</span> <span class="attr">id</span>=<span class="string">"txt"</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">		<span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">			<span class="keyword">var</span> oTxt = <span class="built_in">document</span>.getElementById(<span class="string">"txt"</span>);</div><div class="line">			oTxt.onkeyup = <span class="function"><span class="keyword">function</span>(<span class="params">ev</span>)</span>&#123;</div><div class="line">				<span class="keyword">var</span> ev = ev || event;</div><div class="line">				<span class="comment">//判断当按下的键是回车，并且当前的内容框不为空时</span></div><div class="line">				<span class="keyword">if</span>(ev.keyCode == <span class="number">13</span> &amp;&amp; <span class="keyword">this</span>.value != <span class="string">''</span>)&#123;</div><div class="line">					<span class="keyword">var</span> oP = <span class="built_in">document</span>.createElement(<span class="string">'p'</span>);</div><div class="line">					oP.innerHTML = oTxt.value;</div><div class="line">					<span class="built_in">document</span>.body.appendChild(oP);</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	<span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="ctrlKey-shiftKey-altKey-是一个布尔值，判断当一个事件发生时，是否同时按着这些值"><a href="#ctrlKey-shiftKey-altKey-是一个布尔值，判断当一个事件发生时，是否同时按着这些值" class="headerlink" title="ctrlKey,shiftKey,altKey 是一个布尔值，判断当一个事件发生时，是否同时按着这些值"></a><code>ctrlKey</code>,<code>shiftKey</code>,<code>altKey</code> 是一个布尔值，判断当一个事件发生时，是否同时按着这些值</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">textarea</span> <span class="attr">name</span>=<span class="string">""</span> <span class="attr">cols</span>=<span class="string">"30"</span> <span class="attr">rows</span>=<span class="string">"10"</span> <span class="attr">id</span>=<span class="string">"txt"</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">		<span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">			<span class="keyword">var</span> oTxt = <span class="built_in">document</span>.getElementById(<span class="string">"txt"</span>);</div><div class="line">			oTxt.onkeyup = <span class="function"><span class="keyword">function</span>(<span class="params">ev</span>)</span>&#123;</div><div class="line">				<span class="keyword">var</span> ev = ev || event;</div><div class="line">				<span class="comment">//判断当按下的键是回车，并且当前的内容框不为空,且按着ctrlKey时</span></div><div class="line">				<span class="keyword">if</span>(ev.keyCode == <span class="number">13</span> &amp;&amp; <span class="keyword">this</span>.value != <span class="string">''</span> &amp;&amp; ev.ctrlKey)&#123;</div><div class="line">					<span class="keyword">var</span> oP = <span class="built_in">document</span>.createElement(<span class="string">'p'</span>);</div><div class="line">					oP.innerHTML = oTxt.value;</div><div class="line">					<span class="built_in">document</span>.body.appendChild(oP);</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	<span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="document也有keyup事件"><a href="#document也有keyup事件" class="headerlink" title="document也有keyup事件"></a><code>document</code>也有keyup事件</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></div><div class="line">		<span class="selector-id">#box</span>&#123;</div><div class="line">			<span class="attribute">width</span>: <span class="number">200px</span>;</div><div class="line">			<span class="attribute">height</span>: <span class="number">200px</span>;</div><div class="line">			<span class="attribute">background</span>: red;</div><div class="line">			<span class="attribute">position</span>: absolute;</div><div class="line">		&#125;</div><div class="line">		<span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"box"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">			<span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">				<span class="keyword">var</span> oBox = <span class="built_in">document</span>.getElementById(<span class="string">"box"</span>);</div><div class="line">				<span class="built_in">document</span>.onkeyup = <span class="function"><span class="keyword">function</span>(<span class="params">ev</span>)</span>&#123;</div><div class="line">					<span class="built_in">console</span>.log(oBox.offsetLeft);</div><div class="line">					<span class="keyword">var</span> ev = ev || event;</div><div class="line">					<span class="keyword">switch</span> (ev.keyCode) &#123;</div><div class="line">						<span class="comment">//左</span></div><div class="line">						<span class="keyword">case</span> <span class="number">37</span>:</div><div class="line">							oBox.style.left = oBox.offsetLeft - <span class="number">10</span> + <span class="string">'px'</span>;</div><div class="line">							<span class="keyword">break</span>;</div><div class="line">						<span class="comment">//上</span></div><div class="line">						<span class="keyword">case</span> <span class="number">38</span>:</div><div class="line">							oBox.style.top = oBox.offsetTop - <span class="number">10</span> + <span class="string">'px'</span>;</div><div class="line">							<span class="keyword">break</span>;</div><div class="line">						<span class="comment">//右</span></div><div class="line">						<span class="keyword">case</span> <span class="number">39</span>:</div><div class="line">							oBox.style.left = oBox.offsetLeft + <span class="number">10</span> + <span class="string">'px'</span>;</div><div class="line">							<span class="keyword">break</span>;</div><div class="line">						<span class="comment">//下</span></div><div class="line">						<span class="keyword">case</span> <span class="number">40</span>:</div><div class="line">							oBox.style.top = oBox.offsetTop + <span class="number">10</span> + <span class="string">'px'</span>;</div><div class="line">							<span class="keyword">break</span>;</div><div class="line">						<span class="keyword">default</span>:</div><div class="line">							<span class="comment">// statements_def</span></div><div class="line">							<span class="keyword">break</span>;</div><div class="line">					&#125;</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">		<span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="事件委托（事件代理）"><a href="#事件委托（事件代理）" class="headerlink" title="事件委托（事件代理）"></a>事件委托（事件代理）</h2><p>将本来应该自己做的事（元素的绑定事件）交在上级领导来做（利用js的冒泡机制来把绑定到父级元素上）<br>优点：</p>
<h3 id="通过减少遍历元素的次数，来提高性能"><a href="#通过减少遍历元素的次数，来提高性能" class="headerlink" title="通过减少遍历元素的次数，来提高性能"></a>通过减少遍历元素的次数，来提高性能</h3><p>如果当点击li的时候弹出内容，我们不能遍历每个li，只要在它的父级上添加一个绑定事件就可以了</p>
<h4 id="标准下的event-target及ie下的event-srcElement-事件源对象"><a href="#标准下的event-target及ie下的event-srcElement-事件源对象" class="headerlink" title="标准下的event.target及ie下的event.srcElement 事件源对象"></a>标准下的<code>event.target</code>及ie下的<code>event.srcElement</code> 事件源对象</h4><p>不管在哪个事件中，只要操作的那个元素就是事件源</p>
<h4 id="nodeName当前元素的标签名称"><a href="#nodeName当前元素的标签名称" class="headerlink" title="nodeName当前元素的标签名称"></a><code>nodeName</code>当前元素的标签名称</h4><p>例如当前节点是<li>01</li>,那么它的标签名就LI<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">"oUl"</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">li</span>&gt;</span>01<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">li</span>&gt;</span>02<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">li</span>&gt;</span>03<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">li</span>&gt;</span>04<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">			<span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">				<span class="keyword">var</span> oUl = <span class="built_in">document</span>.getElementById(<span class="string">'oUl'</span>);</div><div class="line">				oUl.onmousemove = <span class="function"><span class="keyword">function</span>(<span class="params">ev</span>)</span>&#123;</div><div class="line">					<span class="comment">//为了兼容event对象</span></div><div class="line">					<span class="keyword">var</span> ev = ev || <span class="built_in">window</span>.event; </div><div class="line">					<span class="comment">//兼容ie的事件源</span></div><div class="line">					<span class="keyword">var</span> target = ev.target || ev.srcElement; </div><div class="line">					<span class="comment">//为了避免因为放在ul上而触发了事件，通过判断标签名来排除</span></div><div class="line">					<span class="keyword">if</span>(target.nodeName.toLowerCase() == <span class="string">'li'</span>)&#123;</div><div class="line">						target.style.background = <span class="string">'red'</span>;</div><div class="line">					&#125;</div><div class="line">				&#125;</div><div class="line">				oUl.onmouseout = <span class="function"><span class="keyword">function</span>(<span class="params">ev</span>)</span>&#123;</div><div class="line">					<span class="keyword">var</span> ev = ev || <span class="built_in">window</span>.event; </div><div class="line">					<span class="keyword">var</span> target = ev.target || ev.srcElement; </div><div class="line">					<span class="keyword">if</span>(target.nodeName.toLowerCase() == <span class="string">'li'</span>)&#123;</div><div class="line">						target.style.background = <span class="string">'#fff'</span>;</div><div class="line">					&#125;</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">		<span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h3 id="新增元素可以继承这些事件"><a href="#新增元素可以继承这些事件" class="headerlink" title="新增元素可以继承这些事件"></a>新增元素可以继承这些事件</h3><p>因为事件是绑定在父级元素的，所以新增元素还可以响应事件<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">id</span>=<span class="string">"add"</span>&gt;</span>增加<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">"oUl"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">li</span>&gt;</span>1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">li</span>&gt;</span>2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">li</span>&gt;</span>3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">li</span>&gt;</span>4<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">li</span>&gt;</span>5<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">		<span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">			<span class="keyword">var</span> oUl = <span class="built_in">document</span>.getElementById(<span class="string">'oUl'</span>);</div><div class="line">			<span class="keyword">var</span> oAdd = <span class="built_in">document</span>.getElementById(<span class="string">'add'</span>);</div><div class="line">			<span class="keyword">var</span> iNow = oUl.getElementsByTagName(<span class="string">'li'</span>).length;</div><div class="line">			oAdd.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">				<span class="keyword">var</span> oLi = <span class="built_in">document</span>.createElement(<span class="string">'li'</span>);</div><div class="line">				oLi.innerHTML = iNow ++;</div><div class="line">				oUl.appendChild(oLi);</div><div class="line">			&#125;</div><div class="line">			oUl.onmouseover = <span class="function"><span class="keyword">function</span>(<span class="params">ev</span>)</span>&#123;</div><div class="line">				<span class="keyword">var</span> ev = ev || <span class="built_in">window</span>.ev;</div><div class="line">				<span class="keyword">var</span> target = ev.target || ev.srcElement;</div><div class="line">				<span class="keyword">if</span>(target.nodeName.toLowerCase() == <span class="string">'li'</span>)&#123;</div><div class="line">					target.style.background = <span class="string">'red'</span>;</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">			oUl.onmouseout = <span class="function"><span class="keyword">function</span>(<span class="params">ev</span>)</span>&#123;</div><div class="line">				<span class="keyword">var</span> ev = ev || <span class="built_in">window</span>.ev;</div><div class="line">				<span class="keyword">var</span> target = ev.target || ev.srcElement;</div><div class="line">				<span class="keyword">if</span>(target.nodeName.toLowerCase() == <span class="string">'li'</span>)&#123;</div><div class="line">					target.style.background = <span class="string">'#fff'</span>;</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	<span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[BOM]]></title>
      <url>weison.org/2016/01/22/BOM/</url>
      <content type="html"><![CDATA[<p><code>BOM</code>browser object model 浏览器对象模型</p>
<h3 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h3><table>
<thead>
<tr>
<th>属性名</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>navigator</td>
<td>浏览器信息</td>
</tr>
<tr>
<td>location</td>
<td>浏览器定位和导航</td>
</tr>
<tr>
<td>history</td>
<td>窗口浏览历史</td>
</tr>
<tr>
<td>screen</td>
<td>屏幕信息</td>
</tr>
</tbody>
</table>
<h4 id="window-navigation浏览器信息"><a href="#window-navigation浏览器信息" class="headerlink" title="window.navigation浏览器信息"></a><code>window.navigation</code>浏览器信息</h4><ol>
<li><code>window.navigation.platform</code>当前运行系统信息</li>
<li><code>window.navigator.userAgent</code>浏览器信息,可以用来判断当前用户所运行的是什么浏览器</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line">	<span class="keyword">if</span>(<span class="built_in">window</span>.navigator.userAgent.indexOf(<span class="string">'Chrome'</span>) != <span class="number">-1</span>)&#123;</div><div class="line">		alert(<span class="string">'当前浏览器是chrome'</span>);</div><div class="line">	&#125;</div><div class="line">&lt;<span class="regexp">/script&gt;</span></div></pre></td></tr></table></figure>
<h4 id="window-location浏览器链接"><a href="#window-location浏览器链接" class="headerlink" title="window.location浏览器链接"></a><code>window.location</code>浏览器链接</h4><p>它是一个对象，代表浏览器的定位与导航<br><img src="http://7xovt0.com1.z0.glb.clouddn.com/ua.jpg" alt="userAgent"></p>
<ul>
<li>protocol 协议</li>
<li>hostname 主机名</li>
<li>port     端口号</li>
<li>host     主机地址</li>
<li>pathname 资源地址</li>
<li>search   查询字符串</li>
<li>hash     哈希部分</li>
</ul>
<ol>
<li><code>window.location.href</code>返回完整的页面路径，以通过修改它来完成页面跳转</li>
<li><code>window.location.search</code>url地址?后的内容 </li>
<li><code>window.location.hash</code>url地址#后的内容</li>
<li><code>window.location.assign(url)</code>载入新的url,原页面记录浏览历史</li>
<li><code>window.location.replace(url)</code>载入新的url，原页面不记录浏览历史</li>
<li><code>window.location.reload()</code> 重新载入页面 </li>
</ol>
<h4 id="history浏览历史"><a href="#history浏览历史" class="headerlink" title="history浏览历史"></a><code>history</code>浏览历史</h4><ol>
<li><code>history.back()</code> 传入正整数，表示要后退的步长</li>
<li><code>history.foward()</code> 传入正整数，表示要前进的步长</li>
<li><code>history.go()</code> 传入整数，表示跳的步长</li>
</ol>
<h4 id="screen屏幕信息"><a href="#screen屏幕信息" class="headerlink" title="screen屏幕信息"></a><code>screen</code>屏幕信息</h4><ul>
<li><code>width</code>  屏幕宽度</li>
<li><code>height</code> 屏幕高度</li>
<li><code>availHeight</code> 浏览器可用高度（屏幕高-系统底栏高度）</li>
<li><code>availWidth</code>  浏览器可用宽度</li>
</ul>
<h3 id="窗口尺寸"><a href="#窗口尺寸" class="headerlink" title="窗口尺寸"></a>窗口尺寸</h3><h4 id="可视区尺寸"><a href="#可视区尺寸" class="headerlink" title="可视区尺寸"></a>可视区尺寸</h4><ol>
<li>宽 <code>document.documentElement.clientWidth</code></li>
<li>高 <code>document.documentElement.clientHeight</code></li>
</ol>
<h4 id="滚动距离"><a href="#滚动距离" class="headerlink" title="滚动距离"></a>滚动距离</h4><ol>
<li><code>document.documentElement.scrollTop[scrollLeft]</code> 非chrome下</li>
<li><code>document.body.scrollTop[scrollLeft]</code> chrome因为浏览器的滚动条距离应该是属于body下的</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line"><span class="comment">//为了兼容地获取滚动条高度</span></div><div class="line"><span class="keyword">var</span> scrollTop = <span class="built_in">document</span>.documentElement.scrollTop || <span class="built_in">document</span>.body.scrollTop;</div><div class="line"><span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></div></pre></td></tr></table></figure>
<h4 id="内容尺寸"><a href="#内容尺寸" class="headerlink" title="内容尺寸"></a>内容尺寸</h4><ol>
<li><code>scrollHeight[scrollWidth]</code>元素实际占据的内容的大小，其实就是除了边框以外，内里的内容从顶部到底部的距离</li>
</ol>
<h4 id="文档高度"><a href="#文档高度" class="headerlink" title="文档高度"></a>文档高度</h4><ol>
<li><code>document.body.offsetHeight</code> 获取整个文档内容的高度</li>
</ol>
<h3 id="window下的方法"><a href="#window下的方法" class="headerlink" title="window下的方法"></a>window下的方法</h3><table>
<thead>
<tr>
<th>方法名</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>alert(),comfirm(),prompt()</td>
<td>对话框</td>
</tr>
<tr>
<td>setTimeout(),setInterval()</td>
<td>定时器</td>
</tr>
<tr>
<td>open(),close()</td>
<td>打开关闭窗口</td>
</tr>
</tbody>
</table>
<p><code>BOM</code>下的大多数方法都是在window下的，而js下规定，如果方法是window下的，可以不写如<code>window.open()</code>可以写成<code>open()</code></p>
<h4 id="对话框，页面会阻塞浏览器后面线程执行"><a href="#对话框，页面会阻塞浏览器后面线程执行" class="headerlink" title="对话框，页面会阻塞浏览器后面线程执行"></a>对话框，页面会阻塞浏览器后面线程执行</h4><p><img src="http://7xovt0.com1.z0.glb.clouddn.com/window.jpg" alt="对话框"></p>
<h4 id="alert-警告框"><a href="#alert-警告框" class="headerlink" title="alert()   警告框"></a><code>alert()</code>   警告框</h4><h4 id="comfirm-确定框"><a href="#comfirm-确定框" class="headerlink" title="comfirm() 确定框"></a><code>comfirm()</code> 确定框</h4><p>点“确定”，返回的是true,点“取消”返回的是false</p>
<h4 id="prompt-输入框"><a href="#prompt-输入框" class="headerlink" title="prompt()  输入框"></a><code>prompt()</code>  输入框</h4><p>用户点击确定后，会返回用户在输入框输入的内容     </p>
<h4 id="open-网页url-打开的方式target-打开一个新窗口"><a href="#open-网页url-打开的方式target-打开一个新窗口" class="headerlink" title="open(网页url,打开的方式target)打开一个新窗口"></a><code>open(网页url,打开的方式target)</code>打开一个新窗口</h4><ol>
<li>如果<code>url</code>为空，默认为空</li>
<li>如果<code>target</code>为空，默认为新窗口打开</li>
<li>它会返回新窗口的window对象</li>
</ol>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">id</span>=<span class="string">"oBtn"</span>&gt;</span>打开页面<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">	<span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">		<span class="keyword">var</span> oBtn = <span class="built_in">document</span>.getElementById(<span class="string">'oBtn'</span>);</div><div class="line">		oBtn.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">			 <span class="comment">//target不写，默认以新窗口打开</span></div><div class="line">			<span class="keyword">var</span> newWin = <span class="built_in">window</span>.open();</div><div class="line">			 <span class="comment">//会返回新窗口的window对象</span></div><div class="line">			<span class="built_in">console</span>.log(newWin.document.body.style.background = <span class="string">'red'</span>);</div><div class="line"></div><div class="line">			 <span class="comment">//涉及到跨域，所以不能操作新页面的内容</span></div><div class="line">			<span class="comment">// newWin = window.open('http://www.baidu.com');			</span></div><div class="line">			<span class="comment">// console.log(newWin.document.body.style.background = 'red');</span></div><div class="line"></div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<h4 id="close-关闭指向的window"><a href="#close-关闭指向的window" class="headerlink" title="close()关闭指向的window"></a><code>close()</code>关闭指向的window</h4><ul>
<li>ff:无法关闭当前窗口</li>
<li>chrome:关闭当前窗口</li>
<li>ie:让用户确定是否关闭</li>
<li>可以关闭通过js打开的新窗口</li>
</ul>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">id</span>=<span class="string">"oBtn"</span>&gt;</span>打开页面<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">id</span>=<span class="string">"oBtn2"</span>&gt;</span>关闭页面<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	<span class="keyword">var</span> oBtn = <span class="built_in">document</span>.getElementById(<span class="string">'oBtn'</span>);</div><div class="line">	<span class="keyword">var</span> oBtn2 = <span class="built_in">document</span>.getElementById(<span class="string">'oBtn2'</span>);</div><div class="line">	<span class="keyword">var</span> newWin = <span class="string">''</span>;</div><div class="line">	oBtn.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">		 <span class="comment">//会返回新窗口的window对象</span></div><div class="line">		newWin = <span class="built_in">window</span>.open();</div><div class="line">	&#125;</div><div class="line">	oBtn2.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">		newWin.close();</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h3><table>
<thead>
<tr>
<th>事件名</th>
<th>出发时机</th>
</tr>
</thead>
<tbody>
<tr>
<td>load</td>
<td>文档和所有图片加载完成时</td>
</tr>
<tr>
<td>unload</td>
<td>当离开当前文档时</td>
</tr>
<tr>
<td>beforeunload</td>
<td>与unload类似，但它提供询问用户是否确认离开的机会</td>
</tr>
<tr>
<td>resize</td>
<td>浏览器窗口大小发生变化时</td>
</tr>
<tr>
<td>scroll</td>
<td>拖动滚动条时</td>
</tr>
</tbody>
</table>
<h4 id="onload-文档和所以图片加载完成时会触发"><a href="#onload-文档和所以图片加载完成时会触发" class="headerlink" title="onload  文档和所以图片加载完成时会触发"></a><code>onload</code>  文档和所以图片加载完成时会触发</h4><h4 id="onscroll当滚动条滚动时"><a href="#onscroll当滚动条滚动时" class="headerlink" title="onscroll当滚动条滚动时"></a><code>onscroll</code>当滚动条滚动时</h4><h4 id="onresize当窗口大小被调整时"><a href="#onresize当窗口大小被调整时" class="headerlink" title="onresize当窗口大小被调整时"></a><code>onresize</code>当窗口大小被调整时</h4><p>这两个都是按时间来算的，比如说，它们都是在5毫秒里检测一次，但在5毫秒里拖动了多次，那依然只是会出发一次<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">		<span class="keyword">var</span> i=<span class="number">0</span>;</div><div class="line">		<span class="built_in">window</span>.onscroll = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">			i++;</div><div class="line">			<span class="built_in">console</span>.log(i);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&lt;<span class="regexp">/script&gt;</span></div></pre></td></tr></table></figure></p>
<p>参考链接</p>
<ol>
<li><a href="https://github.com/pramper/Blog/issues/10" target="_blank" rel="external">一张图彻底掌握scrollTop, offsetTop, scrollLeft, offsetLeft</a></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Dom下的表单操作]]></title>
      <url>weison.org/2016/01/18/formControl/</url>
      <content type="html"><![CDATA[<p>利用name获取元素，onchange来感知表单的input[type=text],input[type=radio],input[type=checkbox]的变化，利用checked属性来判断选择框是否被选中</p>
<h3 id="form下name属性可以用来直接获取对象"><a href="#form下name属性可以用来直接获取对象" class="headerlink" title="form下name属性可以用来直接获取对象"></a>form下<code>name</code>属性可以用来直接获取对象</h3><iframe scrolling="no" width="100%" height="300" src="http://jsfiddle.net/6e6qx6oL/embedded/js,resources,html,css,result/light" frameborder="0" allowfullscreen></iframe>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">""</span> <span class="attr">id</span>=<span class="string">"form1"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"hobby"</span> <span class="attr">value</span>=<span class="string">"阅读"</span>&gt;</span>阅读</div><div class="line">	<span class="tag">&lt;/<span class="name">form</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">"result"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">	<span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">		<span class="keyword">var</span> oFrom = <span class="built_in">document</span>.getElementById(<span class="string">"form1"</span>);</div><div class="line">		<span class="keyword">var</span> oResult = <span class="built_in">document</span>.getElementById(<span class="string">"result"</span>);</div><div class="line">		oResult.innerHTML = oFrom.hobby.value;</div><div class="line">	&#125;</div><div class="line">	<span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="onchange在表单内容发生变化时响应事件"><a href="#onchange在表单内容发生变化时响应事件" class="headerlink" title="onchange在表单内容发生变化时响应事件"></a><code>onchange</code>在表单内容发生变化时响应事件</h3><ol>
<li>input[text]会在失去焦点时触发事件</li>
<li>radio/checkbox<br>1.1 标准浏览器下会在只要点击了而且值发会变化，就会触发<br>1.1 而ie8下会在失去焦点时触发</li>
</ol>
<h3 id="checked检测radio或checkbox是否被选中"><a href="#checked检测radio或checkbox是否被选中" class="headerlink" title="checked检测radio或checkbox是否被选中"></a><code>checked</code>检测radio或checkbox是否被选中</h3><iframe scrolling="no" width="100%" height="300" src="http://jsfiddle.net/mv0veLts/embedded/js,resources,html,css,result/light" frameborder="0" allowfullscreen></iframe>
<h3 id="option的value值与其下面的被selected的值绑定"><a href="#option的value值与其下面的被selected的值绑定" class="headerlink" title="option的value值与其下面的被selected的值绑定"></a>option的value值与其下面的被selected的值绑定</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">""</span> <span class="attr">id</span>=<span class="string">"iForm"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">"num"</span> <span class="attr">id</span>=<span class="string">""</span> <span class="attr">value</span>=<span class="string">"3"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"1"</span>&gt;</span>1<span class="tag">&lt;/<span class="name">option</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"2"</span> &gt;</span>2<span class="tag">&lt;/<span class="name">option</span>&gt;</span>			</div><div class="line">		<span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"3"</span> <span class="attr">selected</span>&gt;</span>3<span class="tag">&lt;/<span class="name">option</span>&gt;</span>  <span class="comment">&lt;!-- 设置为selected的选项 --&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">select</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">"result"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">		<span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">			<span class="keyword">var</span> oResult = <span class="built_in">document</span>.getElementById(<span class="string">"result"</span>);</div><div class="line">			<span class="keyword">var</span> iForm = <span class="built_in">document</span>.getElementById(<span class="string">"iForm"</span>);</div><div class="line">			oResult.innerHTML = <span class="string">"下拉菜单的value值是"</span> + iForm[<span class="string">'num'</span>].value;</div><div class="line"></div><div class="line">		&#125;</div><div class="line">	<span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="表单提交与重置"><a href="#表单提交与重置" class="headerlink" title="表单提交与重置"></a>表单提交与重置</h2><h3 id="onsubmit点击submit按钮时触发"><a href="#onsubmit点击submit按钮时触发" class="headerlink" title="onsubmit点击submit按钮时触发"></a><code>onsubmit</code>点击submit按钮时触发</h3><h3 id="submit-在不点击submit按钮时，提交表单数据的方法"><a href="#submit-在不点击submit按钮时，提交表单数据的方法" class="headerlink" title="submit()在不点击submit按钮时，提交表单数据的方法"></a><code>submit()</code>在不点击submit按钮时，提交表单数据的方法</h3><h3 id="onrest点击rest按钮时出发"><a href="#onrest点击rest按钮时出发" class="headerlink" title="onrest点击rest按钮时出发"></a><code>onrest</code>点击rest按钮时出发</h3><h3 id="confirm选择对话框，当选择确定后，会返回true，当点取消，会返回false"><a href="#confirm选择对话框，当选择确定后，会返回true，当点取消，会返回false" class="headerlink" title="confirm选择对话框，当选择确定后，会返回true，当点取消，会返回false"></a><code>confirm</code>选择对话框，当选择确定后，会返回true，当点取消，会返回false</h3><h3 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h3><h4 id="全选与反选"><a href="#全选与反选" class="headerlink" title="全选与反选"></a>全选与反选</h4><h4 id="表单的提交与重置"><a href="#表单的提交与重置" class="headerlink" title="表单的提交与重置"></a>表单的提交与重置</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"http://www.weison.org"</span> <span class="attr">id</span>=<span class="string">"oForm"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"txt"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"提交"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"reset"</span> <span class="attr">value</span>=<span class="string">"重置"</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">	<span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">		<span class="keyword">var</span> oForm= <span class="built_in">document</span>.getElementById(<span class="string">"oForm"</span>);</div><div class="line">		oForm.onsubmit = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">			<span class="keyword">if</span>(oForm.txt.value == <span class="string">''</span>)&#123;</div><div class="line">				alert(<span class="string">"提交数据不能为空"</span>);</div><div class="line">				<span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		oForm.onreset = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">			<span class="keyword">return</span> confirm(<span class="string">"确认重置数据?"</span>);</div><div class="line">			 <span class="comment">//利用当点击确定时返回true，点击取消返回false的特点来判断是否提前数据</span></div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Dom下的table操作]]></title>
      <url>weison.org/2016/01/17/dom-3Table/</url>
      <content type="html"><![CDATA[<h3 id="tHead表格头"><a href="#tHead表格头" class="headerlink" title="tHead表格头"></a><code>tHead</code>表格头</h3><h3 id="tBodies-表格正文"><a href="#tBodies-表格正文" class="headerlink" title="tBodies 表格正文"></a><code>tBodies</code> 表格正文</h3><h3 id="tFoot-表格尾"><a href="#tFoot-表格尾" class="headerlink" title="tFoot 表格尾"></a><code>tFoot</code> 表格尾</h3><h4 id="rows-行"><a href="#rows-行" class="headerlink" title="rows  行"></a><code>rows</code>  行</h4><h4 id="cells-列"><a href="#cells-列" class="headerlink" title="cells 列"></a><code>cells</code> 列</h4><h1 id="动态生成表格数据，并实现隔行变色及删除操作"><a href="#动态生成表格数据，并实现隔行变色及删除操作" class="headerlink" title="动态生成表格数据，并实现隔行变色及删除操作"></a>动态生成表格数据，并实现隔行变色及删除操作</h1><iframe scrolling="no" width="100%" height="300" src="http://jsfiddle.net/cx65k70u/embedded/js,resources,html,css,result/light" frameborder="0" allowfullscreen></iframe>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></div><div class="line">	<span class="selector-tag">table</span>&#123;</div><div class="line">		<span class="attribute">width</span>:<span class="number">100%</span>;</div><div class="line">		<span class="attribute">text-align</span>:center;</div><div class="line">		<span class="attribute">vertical-align</span>: middle;</div><div class="line">	&#125;</div><div class="line">	<span class="selector-tag">th</span>&#123;</div><div class="line">		<span class="attribute">background</span>: <span class="number">#737373</span>;</div><div class="line">		<span class="attribute">height</span>: <span class="number">40px</span>;</div><div class="line">		<span class="attribute">color</span>: <span class="number">#fff</span>;</div><div class="line">		<span class="attribute">font-weight</span>: <span class="number">400</span>;</div><div class="line">	&#125;</div><div class="line">	<span class="selector-tag">td</span>&#123;</div><div class="line">		<span class="attribute">height</span>: <span class="number">30px</span>;</div><div class="line">	&#125;</div><div class="line">	<span class="selector-tag">a</span>&#123;</div><div class="line">		<span class="attribute">text-decoration</span>: none;</div><div class="line">	&#125;</div><div class="line">	<span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">table</span> <span class="attr">id</span>=<span class="string">"oTable"</span>  <span class="attr">cellpadding</span>=<span class="string">"0"</span> <span class="attr">cellspacing</span>=<span class="string">"0"</span> &gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">thead</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">tr</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">th</span>&gt;</span>编号<span class="tag">&lt;/<span class="name">th</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">th</span>&gt;</span>姓名<span class="tag">&lt;/<span class="name">th</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">th</span>&gt;</span>类型<span class="tag">&lt;/<span class="name">th</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">th</span>&gt;</span>操作<span class="tag">&lt;/<span class="name">th</span>&gt;</span></div><div class="line">			<span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">thead</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">tbody</span>&gt;</span><span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">table</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">	<span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">		<span class="keyword">var</span> oTable = <span class="built_in">document</span>.getElementById(<span class="string">"oTable"</span>);</div><div class="line"></div><div class="line">		<span class="comment">//创建模拟数据</span></div><div class="line">		<span class="keyword">var</span> data = [</div><div class="line">			&#123;<span class="attr">id</span>:<span class="number">1</span>,<span class="attr">name</span>:<span class="string">'join'</span>,<span class="attr">type</span>:<span class="string">'method'</span>&#125;,</div><div class="line">			&#123;<span class="attr">id</span>:<span class="number">2</span>,<span class="attr">name</span>:<span class="string">'contact'</span>,<span class="attr">type</span>:<span class="string">'method'</span>&#125;,</div><div class="line">			&#123;<span class="attr">id</span>:<span class="number">3</span>,<span class="attr">name</span>:<span class="string">'length'</span>,<span class="attr">type</span>:<span class="string">'attributes'</span>&#125;</div><div class="line">		];</div><div class="line">		<span class="built_in">console</span>.log(oTable);</div><div class="line">		<span class="keyword">var</span> oBody = oTable.tBodies[<span class="number">0</span>];</div><div class="line"></div><div class="line">		<span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;data.length;i++)&#123;</div><div class="line"></div><div class="line">			<span class="comment">//插入id</span></div><div class="line">			<span class="keyword">var</span> oTr = <span class="built_in">document</span>.createElement(<span class="string">"tr"</span>);<span class="comment">//创建tr</span></div><div class="line">			<span class="keyword">var</span> oTd = <span class="built_in">document</span>.createElement(<span class="string">"td"</span>); <span class="comment">//创建td</span></div><div class="line">			oTd.innerHTML = data[i].id; <span class="comment">//将data的内容添加到td中</span></div><div class="line">			oTr.appendChild(oTd); <span class="comment">//将td插入入tr中</span></div><div class="line"></div><div class="line">			<span class="comment">//插入name</span></div><div class="line">			oTd = <span class="built_in">document</span>.createElement(<span class="string">"td"</span>); <span class="comment">//创建td</span></div><div class="line">			oTd.innerHTML = data[i].name; <span class="comment">//将data的内容添加到td中</span></div><div class="line">			oTr.appendChild(oTd); <span class="comment">//将td插入入tr中</span></div><div class="line"></div><div class="line">			<span class="comment">//插入type</span></div><div class="line">			oTd = <span class="built_in">document</span>.createElement(<span class="string">"td"</span>); <span class="comment">//创建td</span></div><div class="line">			oTd.innerHTML = data[i].type; <span class="comment">//将data的内容添加到td中</span></div><div class="line">			oTr.appendChild(oTd); <span class="comment">//将td插入入tr中</span></div><div class="line"></div><div class="line">			<span class="comment">//插入删除</span></div><div class="line">			oTd = <span class="built_in">document</span>.createElement(<span class="string">"td"</span>); <span class="comment">//创建td</span></div><div class="line">			<span class="keyword">var</span> oA = <span class="built_in">document</span>.createElement(<span class="string">"a"</span>); <span class="comment">//创建a</span></div><div class="line">			oA.href = <span class="string">"javascript:;"</span>;</div><div class="line">			oA.innerHTML = <span class="string">"删除"</span>;</div><div class="line"></div><div class="line">			<span class="comment">//删除操作</span></div><div class="line">			oA.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">				oBody.removeChild(<span class="keyword">this</span>.parentNode.parentNode);<span class="comment">//查找父级（td）的父级(tr)</span></div><div class="line">				<span class="keyword">for</span>(<span class="keyword">var</span> j=<span class="number">0</span>;j&lt;oBody.rows.length;j++)&#123;</div><div class="line">					<span class="keyword">if</span>(j%<span class="number">2</span>)&#123;</div><div class="line">						oBody.rows[j].style.background = <span class="string">"#fff"</span>;</div><div class="line">					&#125;<span class="keyword">else</span>&#123;</div><div class="line">						oBody.rows[j].style.background = <span class="string">"#F3F3F3"</span>;</div><div class="line">					&#125;</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">			oTd.appendChild(oA);</div><div class="line">			oTr.appendChild(oTd); <span class="comment">//将td插入入tr中</span></div><div class="line"></div><div class="line">			oBody.appendChild(oTr);</div><div class="line"></div><div class="line">			<span class="comment">//隔行变色</span></div><div class="line">			<span class="keyword">if</span>(i%<span class="number">2</span>)&#123;</div><div class="line">				oTr.style.background = <span class="string">"#fff"</span>;</div><div class="line">			&#125;<span class="keyword">else</span>&#123;</div><div class="line">				oTr.style.background = <span class="string">"#F3F3F3"</span>;</div><div class="line">			&#125;</div><div class="line"></div><div class="line">		&#125;</div><div class="line"></div><div class="line">	&#125;</div><div class="line">	<span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[js获取、增加、删除元素的样式名]]></title>
      <url>weison.org/2016/01/16/className/</url>
      <content type="html"><![CDATA[<h3 id="简单的利用className获取元素"><a href="#简单的利用className获取元素" class="headerlink" title="简单的利用className获取元素"></a>简单的利用className获取元素</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></div><div class="line">	<span class="selector-tag">ul</span>&#123;</div><div class="line">		<span class="attribute">list-style</span>: none;</div><div class="line">		<span class="attribute">padding</span>: <span class="number">0</span>;</div><div class="line">	&#125;</div><div class="line">	<span class="selector-tag">body</span>&#123;</div><div class="line">		<span class="attribute">margin</span>:<span class="number">0</span>;</div><div class="line">		<span class="attribute">padding</span>:<span class="number">0</span>;</div><div class="line">	&#125;</div><div class="line">	<span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">"ul1"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span>box<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"box1"</span>&gt;</span>box1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"box box1"</span>&gt;</span>bxo box1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">li</span>&gt;</span>1231<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span>p.box<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">	<span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">		<span class="keyword">var</span> oUl1 = <span class="built_in">document</span>.getElementById(<span class="string">"ul1"</span>);</div><div class="line">		<span class="keyword">var</span> aLiBox = getByClassName(oUl1,<span class="string">"li"</span>,<span class="string">"box"</span>);</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;aLiBox.length;i++)&#123;</div><div class="line">			aLiBox[i].style.cssText = <span class="string">"background:#8BC34A;color:#fff;padding:10px;"</span>;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * [getByClassName description]</div><div class="line">	 * @param  &#123;[type]&#125; parent    [查找元素的父级]</div><div class="line">	 * @param  &#123;[type]&#125; tagName   [查找的元素类型]</div><div class="line">	 * @param  &#123;[type]&#125; className [样式名]</div><div class="line">	 * @return &#123;[type]&#125;           [返回查找结果]</div><div class="line">	 * getByClassName(oUl1,"li","box"); 查找oUl1下所有样式为box的li</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">function</span> <span class="title">getByClassName</span>(<span class="params">parent,tagName,className</span>)</span>&#123;</div><div class="line">		<span class="keyword">var</span> arr = [];</div><div class="line">		<span class="keyword">var</span> ele = parent.getElementsByTagName(tagName);</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;ele.length;i++)&#123;</div><div class="line">			<span class="comment">//解决当有多个className时的问题，根据多个className时，需要用空格来分割的特点，利用split将多个样式名分割成数组，然后判断数组内的元素是否跟样式名一致</span></div><div class="line">			<span class="keyword">var</span> classArr = ele[i].className.split(<span class="string">" "</span>);</div><div class="line">			<span class="keyword">for</span>(<span class="keyword">var</span> j=<span class="number">0</span>;j&lt;classArr.length;j++)&#123;</div><div class="line">				<span class="keyword">if</span>(classArr[j] == className)&#123;</div><div class="line">					arr.push(ele[i]);</div><div class="line">					<span class="keyword">break</span>; <span class="comment">//为了避免同一个元素因失误，写了一样的样式名，如 &lt;li class="box box"&gt;&lt;/li&gt;,造成会多次推送的情况，当for内，找到符合条件元素后，利用break跳出循环</span></div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> arr; <span class="comment">//返回所有查找到的内容</span></div><div class="line">	&#125;</div><div class="line">	<span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<iframe scrolling="no" width="100%" height="300" src="http://jsfiddle.net/cbsv1r2b/embedded/js,resources,html,css,result/light" frameborder="0" allowfullscreen></iframe>
<h3 id="自制addClass为元素添加样式、removeClass为元素删除样式、arrIndoxOf判断数组是否有重复内容"><a href="#自制addClass为元素添加样式、removeClass为元素删除样式、arrIndoxOf判断数组是否有重复内容" class="headerlink" title="自制addClass为元素添加样式、removeClass为元素删除样式、arrIndoxOf判断数组是否有重复内容"></a>自制<code>addClass</code>为元素添加样式、<code>removeClass</code>为元素删除样式、<code>arrIndoxOf</code>判断数组是否有重复内容</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></div><div class="line">	<span class="selector-tag">ul</span>&#123;</div><div class="line">		<span class="attribute">list-style</span>: none;</div><div class="line">		<span class="attribute">padding</span>: <span class="number">0</span>;</div><div class="line">	&#125;</div><div class="line">	<span class="selector-tag">body</span>&#123;</div><div class="line">		<span class="attribute">margin</span>:<span class="number">0</span>;</div><div class="line">		<span class="attribute">padding</span>:<span class="number">0</span>;</div><div class="line">	&#125;</div><div class="line">	<span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">"ul1"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span>box<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"box1"</span>&gt;</span>box1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"box box1"</span>&gt;</span>bxo box1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">li</span>&gt;</span>1231<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span>p.box<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">	<span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">		<span class="keyword">var</span> oUl1 = <span class="built_in">document</span>.getElementById(<span class="string">"ul1"</span>);</div><div class="line">		<span class="keyword">var</span> aLiBox = getByClassName(oUl1,<span class="string">"li"</span>,<span class="string">"box"</span>);</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;aLiBox.length;i++)&#123;</div><div class="line">			aLiBox[i].style.cssText = <span class="string">"background:#8BC34A;color:#fff;padding:10px;"</span>;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * [getByClassName description]</div><div class="line">	 * @param  &#123;[type]&#125; parent    [查找元素的父级]</div><div class="line">	 * @param  &#123;[type]&#125; tagName   [查找的元素类型]</div><div class="line">	 * @param  &#123;[type]&#125; className [样式名]</div><div class="line">	 * @return &#123;[type]&#125;           [返回查找结果]</div><div class="line">	 * getByClassName(oUl1,"li","box"); 查找oUl1下所有样式为box的li</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">function</span> <span class="title">getByClassName</span>(<span class="params">parent,tagName,className</span>)</span>&#123;</div><div class="line">		<span class="keyword">var</span> arr = [];</div><div class="line">		<span class="keyword">var</span> ele = parent.getElementsByTagName(tagName);</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;ele.length;i++)&#123;</div><div class="line">			<span class="comment">//解决当有多个className时的问题，根据多个className时，需要用空格来分割的特点，利用split将多个样式名分割成数组，然后判断数组内的元素是否跟样式名一致</span></div><div class="line">			<span class="keyword">var</span> classArr = ele[i].className.split(<span class="string">" "</span>);</div><div class="line">			<span class="keyword">for</span>(<span class="keyword">var</span> j=<span class="number">0</span>;j&lt;classArr.length;j++)&#123;</div><div class="line">				<span class="keyword">if</span>(classArr[j] == className)&#123;</div><div class="line">					arr.push(ele[i]);</div><div class="line">					<span class="keyword">break</span>; <span class="comment">//为了避免同一个元素因失误，写了一样的样式名，如 &lt;li class="box box"&gt;&lt;/li&gt;,造成会多次推送的情况，当for内，找到符合条件元素后，利用break跳出循环</span></div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> arr; <span class="comment">//返回所有查找到的内容</span></div><div class="line">	&#125;</div><div class="line">	<span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<iframe scrolling="no" width="100%" height="300" src="http://jsfiddle.net/379e1brk/embedded/js,resources,html,css,result/light" frameborder="0" allowfullscreen></iframe>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Dom]]></title>
      <url>weison.org/2016/01/10/DomBomEvent/</url>
      <content type="html"><![CDATA[<h2 id="dom-Document-object-Model"><a href="#dom-Document-object-Model" class="headerlink" title="dom Document object Model"></a><code>dom</code> Document object Model</h2><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><ol>
<li>document:html页面</li>
<li>文档对象：页面中的元素</li>
<li>文档对象模型：是w3c为了让js能操作页面上的元素而创建出来的一套标准<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>Dom<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="DOM节点类型"><a href="#DOM节点类型" class="headerlink" title="DOM节点类型"></a>DOM节点类型</h2><ol>
<li>Element 元素节点</li>
<li>Text 文本节点(非标准类型的浏览器不支持,如ie8)<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">"oUl"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">li</span>&gt;</span>1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">li</span>&gt;</span>2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">li</span>&gt;</span>3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">li</span>&gt;</span>4<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></div><div class="line">	window.onload = function()&#123;</div><div class="line">		var oUl = document.getElementById("oUl");</div><div class="line">		console.log(oUl.childNodes.length); // 9  4个元素节点（li）,5个文本节点(1,2,3,4，回车)</div><div class="line">	&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><ol>
<li>Dom会把整个文档看成一棵树，页面上的所有元素会根据它们的层级来创建关系,例如父子节点，兄弟节点</li>
</ol>
<h2 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h2><h3 id="childNodes子节点列表集合"><a href="#childNodes子节点列表集合" class="headerlink" title="childNodes子节点列表集合"></a><code>childNodes</code>子节点列表集合</h3><ol>
<li>只读属性</li>
<li>它只包含到第一级子节点，不包含里面的节点<ul>
<li>标准下，包含了文本和属性节点，也包含非法嵌套的节点，如ul下面放直接放p</li>
<li>非标准下，只包含元素节点，ie7以下不包含非法嵌套的节点,因为ie7下，会把这个不合理的p,放到li里面</li>
</ul>
</li>
</ol>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">"oUl"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">li</span>&gt;</span>1<span class="tag">&lt;<span class="name">span</span>&gt;</span>span<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">li</span>&gt;</span>2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">li</span>&gt;</span>3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">li</span>&gt;</span>4<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></div><div class="line">	window.onload = function()&#123;</div><div class="line">		var oUl = document.getElementById("oUl");</div><div class="line">		console.log(oUl.childNodes.length); // 9  4个元素节点（li）,5个文本节点(1,2,3,4，回车)</div><div class="line">	&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="nodeType-当前元素的节点类型"><a href="#nodeType-当前元素的节点类型" class="headerlink" title="nodeType 当前元素的节点类型"></a><code>nodeType</code> 当前元素的节点类型</h3><ul>
<li>12种节点类型 <a href="http://www.w3school.com.cn/jsref/prop_node_childnodes.asp" target="_blank" rel="external">w3c  childNodes 属性</a></li>
</ul>
<ol>
<li>元素节点 1</li>
<li>属性节点 2</li>
<li>文本节点 3</li>
</ol>
<h3 id="attributes获取元素的属性集合"><a href="#attributes获取元素的属性集合" class="headerlink" title="attributes获取元素的属性集合"></a><code>attributes</code>获取元素的属性集合</h3><ol>
<li>只读的</li>
<li>因为一个元素的属性是有多个的，所以要加S</li>
</ol>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"attr"</span> <span class="attr">style</span>=<span class="string">"border:1px solid #ccc;"</span>&gt;</span>获取元素属性<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></div><div class="line">window.onload = function()&#123;</div><div class="line">	var oDiv = document.getElementById("attr");</div><div class="line">	console.log(oDiv.attributes[0].nodeType); // =&gt;2 2代表属性节点</div><div class="line">	console.log(oDiv.attributes[0].name); // =&gt; id 获取属性节点的第一个名称</div><div class="line">	console.log(oDiv.attributes[1].value); // =&gt; border:1px solid #ccc; 获取元素第2个属性节点的内容值</div><div class="line">&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<ol>
<li>为元素节点添加样式<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">"attr"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">li</span>&gt;</span>1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">li</span>&gt;</span>2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">li</span>&gt;</span>3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">li</span>&gt;</span>4<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">li</span>&gt;</span>5<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="xml"></span></div><div class="line">	window.onload = function()&#123;</div><div class="line">		var oDiv = document.getElementById("attr"); //获取元素</div><div class="line">		for(var i=0;i<span class="tag">&lt;<span class="name">oDiv.childNodes.length;i++)&#123;</span></span></div><div class="line">			<span class="attr">if</span>(<span class="attr">oDiv.childNodes</span>[<span class="attr">i</span>]<span class="attr">.nodeType</span> == <span class="string">1)&#123;</span> // 当节点类型为<span class="attr">1</span>，即代表是元素节点</div><div class="line">				<span class="attr">oDiv.childNodes</span>[<span class="attr">i</span>]<span class="attr">.style.border</span> = <span class="string">"1px solid red"</span>;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line"></div><div class="line"></div><div class="line">	&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="children获取子节点列表集合"><a href="#children获取子节点列表集合" class="headerlink" title="children获取子节点列表集合"></a><code>children</code>获取子节点列表集合</h3><ol>
<li>也是只读属性</li>
<li>只获取元素节点</li>
</ol>
<h3 id="firstChild获取第一个子节点"><a href="#firstChild获取第一个子节点" class="headerlink" title="firstChild获取第一个子节点"></a><code>firstChild</code>获取第一个子节点</h3><ol>
<li>只读</li>
<li>标准浏览器下，包含文本节点</li>
<li>非标准,只包含元素节点<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&lt;ul id="oUl"&gt;</div><div class="line">		&lt;li&gt;1&lt;/li&gt;</div><div class="line">		&lt;li&gt;2&lt;/li&gt;</div><div class="line">	&lt;/ul&gt;</div><div class="line">	&lt;script&gt;</div><div class="line">	window.onload = function()&#123;</div><div class="line">       var oUl = document.getElementById("oUl");</div><div class="line">       console.log(oUl.firstChild);</div><div class="line">	&#125;</div><div class="line">	&lt;/script&gt;</div></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="firstElementChild-获取第一个元素子节点"><a href="#firstElementChild-获取第一个元素子节点" class="headerlink" title="firstElementChild 获取第一个元素子节点"></a><code>firstElementChild</code> 获取第一个元素子节点</h3><ol>
<li><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&lt;ul id="oUl"&gt;</div><div class="line">	&lt;li&gt;1&lt;/li&gt;</div><div class="line">	&lt;li&gt;2&lt;/li&gt;</div><div class="line">&lt;/ul&gt;</div><div class="line">&lt;script&gt;</div><div class="line">window.onload = function()&#123;</div><div class="line">      var oUl = document.getElementById("oUl");</div><div class="line">      console.log(oUl.firstElementChild); // =》 &lt;li&gt;1&lt;/li&gt;</div><div class="line">&#125;</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="lastChild获取最后一个节点"><a href="#lastChild获取最后一个节点" class="headerlink" title="lastChild获取最后一个节点"></a><code>lastChild</code>获取最后一个节点</h3><h3 id="lastElementChild获取最后一个标签元素"><a href="#lastElementChild获取最后一个标签元素" class="headerlink" title="lastElementChild获取最后一个标签元素"></a><code>lastElementChild</code>获取最后一个标签元素</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">"oUl"</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">li</span>&gt;</span>1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">li</span>&gt;</span>2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">		<span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">			<span class="keyword">var</span> oUl = <span class="built_in">document</span>.getElementById(<span class="string">"oUl"</span>);</div><div class="line">			<span class="keyword">var</span> oLast = oUl.lastElementChild || oUl.lastChild; <span class="comment">//当浏览器支付lastElementChild时使用lastElementChild来获取最后一个标签元素，而当不识别时，证明那是低版本浏览器，使用lastChild来获取最后一个标签元素，因为低版本下，lastChild不会识别文字节点</span></div><div class="line">			oLast.style.border = <span class="string">"1px solid #ccc"</span>;</div><div class="line"></div><div class="line">		&#125;</div><div class="line">		<span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="nextSibling当前元素的下一个兄弟节点，nextElementSibling当前元素的下一个兄弟标签节点"><a href="#nextSibling当前元素的下一个兄弟节点，nextElementSibling当前元素的下一个兄弟标签节点" class="headerlink" title="nextSibling当前元素的下一个兄弟节点，nextElementSibling当前元素的下一个兄弟标签节点"></a><code>nextSibling</code>当前元素的下一个兄弟节点，<code>nextElementSibling</code>当前元素的下一个兄弟标签节点</h3><h3 id="previousSibling当前元素的上一个兄弟节点-previousElementSibling当前元素的上一个兄弟标签节点"><a href="#previousSibling当前元素的上一个兄弟节点-previousElementSibling当前元素的上一个兄弟标签节点" class="headerlink" title="previousSibling当前元素的上一个兄弟节点,previousElementSibling当前元素的上一个兄弟标签节点"></a><code>previousSibling</code>当前元素的上一个兄弟节点,<code>previousElementSibling</code>当前元素的上一个兄弟标签节点</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">"oUl"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">li</span>&gt;</span>1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">li</span> <span class="attr">name</span>=<span class="string">"2"</span>&gt;</span>2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">li</span>&gt;</span>3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">li</span>&gt;</span>4<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></div><div class="line">	li&#123;</div><div class="line">		height:40px;</div><div class="line">		margin-bottom:10px;</div><div class="line">		line-height:40px;</div><div class="line">		color: #fff;</div><div class="line">	&#125;</div><div class="line">	<span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">	<span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">		<span class="keyword">var</span> oUl = <span class="built_in">document</span>.getElementById(<span class="string">"oUl"</span>);</div><div class="line">		<span class="keyword">var</span> first = oUl.firstElementChild || oUl.firstChild;</div><div class="line">		<span class="keyword">var</span> last = oUl.lastElementChild || oUl.lastChild;</div><div class="line">		<span class="keyword">var</span> second	= first.nextElementSibling || first.nextSibling;</div><div class="line">		<span class="keyword">var</span> third = last.previousElementSibling || last.previousSibling;</div><div class="line">		first.style.background = <span class="string">"red"</span>; </div><div class="line">		last.style.background = <span class="string">"#4CAF50"</span>; </div><div class="line">		second.style.background = <span class="string">"#00BCD4"</span>; </div><div class="line">		third.style.background = <span class="string">"blue"</span>; </div><div class="line">	&#125;</div><div class="line">	<span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="parentNode-当前节点的父节点"><a href="#parentNode-当前节点的父节点" class="headerlink" title="parentNode 当前节点的父节点"></a><code>parentNode</code> 当前节点的父节点</h3><ol>
<li>只读<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">"oUl"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">li</span>&gt;</span>1<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>隐藏<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">li</span>&gt;</span>2<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>隐藏<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">li</span>&gt;</span>3<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>隐藏<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">	<span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">		<span class="keyword">var</span> oUl = <span class="built_in">document</span>.getElementById(<span class="string">"oUl"</span>);</div><div class="line">		<span class="keyword">var</span> aA = oUl.getElementsByTagName(<span class="string">"a"</span>);</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;aA.length;i++)&#123;</div><div class="line">			aA[i].onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">				<span class="keyword">this</span>.parentNode.style.display = <span class="string">'none'</span>;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="offsetParent距离元素最近一个被positon定义过的父节点"><a href="#offsetParent距离元素最近一个被positon定义过的父节点" class="headerlink" title="offsetParent距离元素最近一个被positon定义过的父节点"></a><code>offsetParent</code>距离元素最近一个被positon定义过的父节点</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></div><div class="line">	#son&#123;</div><div class="line">		position: relative;</div><div class="line">	&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"father"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"son"</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"child"</span>&gt;</span>offsetParent<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">	<span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">		<span class="keyword">var</span> oChild = <span class="built_in">document</span>.getElementById(<span class="string">"child"</span>);</div><div class="line">		<span class="built_in">console</span>.log(oChild.offsetParent.id); <span class="comment">// =&gt; son</span></div><div class="line">	&#125;</div><div class="line">	<span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<ol>
<li>如果没有定位父级标准浏览下，没定位父级，则为body，ie7下为html<br>1.ie7下，如果当前元素的某个父级触发了layou,那么parentNode则指向这个元素<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></div><div class="line">	#son&#123;</div><div class="line">		position: relative;</div><div class="line">	&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"father"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"son"</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"child"</span>&gt;</span>offsetParent<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">	   <span class="built_in">window</span>.onlad = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">			<span class="comment">//判断当前元素是否使用了触发hasLayout的样式</span></div><div class="line">			alert(<span class="built_in">document</span>.getElementById(<span class="string">"son"</span>).currentStyle.hasLayout);</div><div class="line"></div><div class="line">	   &#125;</div><div class="line">	<span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="offsetLeft-offsetTop获取当前元素距离父级定位元素的距离"><a href="#offsetLeft-offsetTop获取当前元素距离父级定位元素的距离" class="headerlink" title="offsetLeft,offsetTop获取当前元素距离父级定位元素的距离"></a><code>offsetLeft</code>,<code>offsetTop</code>获取当前元素距离父级定位元素的距离</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></div><div class="line">    #father&#123;</div><div class="line">    	padding:30px 20px;</div><div class="line">    	background: #F5FF71;</div><div class="line">    &#125;</div><div class="line">	#son&#123;</div><div class="line">		position: relative;</div><div class="line">		padding:40px 30px;</div><div class="line">		background: #67C367;</div><div class="line">	&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"father"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"son"</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"child"</span>&gt;</span>offsetParent1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">		<span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">			<span class="keyword">var</span> oChild = <span class="built_in">document</span>.getElementById(<span class="string">"child"</span>);</div><div class="line">			<span class="built_in">console</span>.log(oChild.offsetLeft); 			</div><div class="line">			<span class="built_in">console</span>.log(oChild.offsetTop); </div><div class="line">			<span class="comment">/**</span></div><div class="line">			 * 如果有定位父级，那么</div><div class="line">			 * 标准浏览器下是到定位父级的距离</div><div class="line">			 * ie7以下，如果自己没有设置定位，则是到body的距离，如果自己和父级都设置了定位，那么是定位到父级的距离</div><div class="line">			 * </div><div class="line">			 * 如果没有定位父级</div><div class="line">			 * 默认为body，ie7下为html</div><div class="line">			 */</div><div class="line">		&#125;</div><div class="line">	<span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="clientWidth-offsetWidth或-clientHeight-offsetHeight"><a href="#clientWidth-offsetWidth或-clientHeight-offsetHeight" class="headerlink" title="clientWidth,offsetWidth或 clientHeight,offsetHeight"></a><code>clientWidth</code>,<code>offsetWidth</code>或 <code>clientHeight</code>,<code>offsetHeight</code></h3><ol>
<li>clientWidth[height] 可视区域宽度：样式宽度+padding</li>
<li>offsetWidth[height] 占位宽：样式宽度+padding+border</li>
</ol>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">	<span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></div><div class="line">	#box&#123;</div><div class="line">		width: 100px;</div><div class="line">		    height: 100px;</div><div class="line">		    padding: 20px;</div><div class="line">		    background: #FBFF52;</div><div class="line">		    border: 10px solid #9BE629;</div><div class="line">		    color: #fff;</div><div class="line">	&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"box"</span>&gt;</span>box<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">	  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">	  <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	  	<span class="keyword">var</span> oBox = <span class="built_in">document</span>.getElementById(<span class="string">"box"</span>);</div><div class="line">	  	<span class="built_in">console</span>.log(<span class="string">'样式'</span>)</div><div class="line">	  	<span class="built_in">console</span>.log(oBox.clientWidth); <span class="comment">// =&gt;120 width+padding</span></div><div class="line">	  	<span class="built_in">console</span>.log(oBox.offsetWidth); <span class="comment">//=&gt; 140 width+padding+border</span></div><div class="line">	  &#125;</div><div class="line">	  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<ol>
<li>获取元素到页面的距离<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></div><div class="line">	#father&#123;</div><div class="line">		padding: 30px 20px;</div><div class="line">		background: #8BC34A;</div><div class="line">		position: relative;</div><div class="line">		width: 500px;</div><div class="line">		margin: 0 auto;	</div><div class="line">	&#125;</div><div class="line">	#son&#123;</div><div class="line">		padding:40px 30px;</div><div class="line">		background: #FFEB3B;</div><div class="line">		position: relative;</div><div class="line">	&#125;</div><div class="line">	#child&#123;</div><div class="line">		background: #FF5722;</div><div class="line">		position: relative;</div><div class="line">		height: 30px;</div><div class="line">		color: #fff;</div><div class="line">		text-align: center;</div><div class="line">	&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"father"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"son"</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"child"</span>&gt;</span>child<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">	<span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">		<span class="built_in">console</span>.log(getOp(<span class="string">'child'</span>,<span class="string">'offsetLeft'</span>));</div><div class="line">		<span class="keyword">var</span> oChild = <span class="built_in">document</span>.getElementById(<span class="string">"child"</span>);</div><div class="line">		<span class="built_in">console</span>.log(getPos(oChild).top);</div><div class="line"></div><div class="line">		<span class="function"><span class="keyword">function</span> <span class="title">getOp</span>(<span class="params">obj,direction</span>)</span>&#123;</div><div class="line">			<span class="keyword">var</span> ele = <span class="built_in">document</span>.getElementById(obj); <span class="comment">//获取需要求值的元素</span></div><div class="line">			<span class="keyword">var</span> oP = <span class="number">0</span>; <span class="comment">//初始化距离值</span></div><div class="line">			<span class="keyword">while</span>(ele)&#123; <span class="comment">//判断元素是否存在</span></div><div class="line">				oP += ele[direction]; <span class="comment">//获取元素对象的方向距离</span></div><div class="line">				ele = ele.offsetParent; <span class="comment">//获取完成后，把当前定位对象变成上一级设有定位的对象从而作为while的判断依据</span></div><div class="line">			&#125;</div><div class="line">			<span class="keyword">return</span> oP;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="comment">//获取使用这种方式</span></div><div class="line">		<span class="comment">/**获取元素到页面的距离</span></div><div class="line">		 * [getPos description]</div><div class="line">		 * @param  &#123;[type]&#125; obj [description]</div><div class="line">		 * 使用方法 ：getPos(oChild).top</div><div class="line">		 */</div><div class="line">		<span class="function"><span class="keyword">function</span> <span class="title">getPos</span>(<span class="params">obj</span>)</span>&#123;</div><div class="line">			<span class="keyword">var</span> pos = &#123;<span class="attr">left</span>:<span class="number">0</span>,<span class="attr">top</span>:<span class="number">0</span>&#125;;</div><div class="line"></div><div class="line">			<span class="keyword">while</span>(obj)&#123;</div><div class="line">				pos.left += obj.offsetLeft;</div><div class="line">				pos.top += obj.offsetTop;</div><div class="line">				obj = obj.offsetParent;</div><div class="line">			&#125;</div><div class="line">			<span class="keyword">return</span> pos;</div><div class="line">		&#125;</div><div class="line"></div><div class="line"></div><div class="line">	&#125;</div><div class="line">	<span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="元素的增、删、替换、移动"><a href="#元素的增、删、替换、移动" class="headerlink" title="元素的增、删、替换、移动"></a>元素的增、删、替换、移动</h2><h3 id="document-createElement-创建元素"><a href="#document-createElement-创建元素" class="headerlink" title="document.createElement 创建元素"></a><code>document.createElement</code> 创建元素</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">document</span>.createElement(<span class="string">"li"</span>); <span class="comment">//创建一个li的标签</span></div></pre></td></tr></table></figure>
<h3 id="appendChild-在父级下的内部后面增加元素"><a href="#appendChild-在父级下的内部后面增加元素" class="headerlink" title="appendChild 在父级下的内部后面增加元素"></a><code>appendChild</code> 在父级下的内部后面增加元素</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">"box"</span>&gt;</span><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">	<span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">		<span class="keyword">var</span> aLi = <span class="built_in">document</span>.createElement(<span class="string">"li"</span>);</div><div class="line">		<span class="keyword">var</span> oBox = <span class="built_in">document</span>.getElementById(<span class="string">"box"</span>);</div><div class="line">		aLi.innerHTML = <span class="string">"放入内容"</span>;</div><div class="line">		oBox.appendChild(aLi);</div><div class="line">	&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="insertBefore-在父级下，某个元素前插入元素"><a href="#insertBefore-在父级下，某个元素前插入元素" class="headerlink" title="insertBefore 在父级下，某个元素前插入元素"></a><code>insertBefore</code> 在父级下，某个元素前插入元素</h3><ol>
<li>父级.insertBefore(插入内容，放在哪个元素前);</li>
</ol>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">"box"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">li</span> <span class="attr">id</span>=<span class="string">"li1"</span>&gt;</span>li1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">	<span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">		<span class="keyword">var</span> aLi = <span class="built_in">document</span>.createElement(<span class="string">"li"</span>);</div><div class="line">		<span class="keyword">var</span> li1 = <span class="built_in">document</span>.getElementById(<span class="string">"li1"</span>);</div><div class="line">		<span class="keyword">var</span> oBox = <span class="built_in">document</span>.getElementById(<span class="string">"box"</span>);</div><div class="line">		aLi.innerHTML = <span class="string">"插播内容~~"</span>;</div><div class="line">		oBox.insertBefore(aLi,li1); <span class="comment">//将内容放在Li1前</span></div><div class="line">	&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="replaceChild-在父级下，将某个元素剪切替换旧的元素"><a href="#replaceChild-在父级下，将某个元素剪切替换旧的元素" class="headerlink" title="replaceChild 在父级下，将某个元素剪切替换旧的元素"></a><code>replaceChild</code> 在父级下，将某个元素剪切替换旧的元素</h3><ol>
<li>父节点.replaceChild(新节点，被替换的节点);</li>
</ol>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">"newNode"</span>&gt;</span>新节点<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"替换"</span> <span class="attr">id</span>=<span class="string">"btn"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"box"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span> <span class="attr">id</span>=<span class="string">"oldNode"</span>&gt;</span>oldNode<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	<span class="keyword">var</span> oBtn = <span class="built_in">document</span>.getElementById(<span class="string">"btn"</span>);</div><div class="line">	<span class="keyword">var</span> oNew = <span class="built_in">document</span>.getElementById(<span class="string">"newNode"</span>);</div><div class="line">	<span class="keyword">var</span> oOld = <span class="built_in">document</span>.getElementById(<span class="string">"oldNode"</span>);</div><div class="line">	<span class="keyword">var</span> oBox = <span class="built_in">document</span>.getElementById(<span class="string">"box"</span>);</div><div class="line">	oBtn.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">		oBox.replaceChild(oNew,oOld);</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="removeChild-删除元素"><a href="#removeChild-删除元素" class="headerlink" title="removeChild 删除元素"></a><code>removeChild</code> 删除元素</h3><ol>
<li>被删除元素的父级.removeChild(要删除的元素);</li>
</ol>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">""</span> <span class="attr">id</span>=<span class="string">"oUl"</span>&gt;</span><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"txt"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"btn1"</span> <span class="attr">type</span>=<span class="string">"button"</span>&gt;</span>在后面增加<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"btn2"</span> <span class="attr">type</span>=<span class="string">"button"</span>&gt;</span>在前面增加<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">	<span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">		<span class="keyword">var</span> oUl = <span class="built_in">document</span>.getElementById(<span class="string">"oUl"</span>);</div><div class="line">		<span class="keyword">var</span> aBtn1 = <span class="built_in">document</span>.getElementById(<span class="string">"btn1"</span>);</div><div class="line">		<span class="keyword">var</span> aBtn2 = <span class="built_in">document</span>.getElementById(<span class="string">"btn2"</span>);</div><div class="line">		<span class="keyword">var</span> oTxt = <span class="built_in">document</span>.getElementById(<span class="string">"txt"</span>);</div><div class="line">		<span class="comment">//在后面增加</span></div><div class="line">		<span class="comment">//</span></div><div class="line">		<span class="comment">//为a标签动态地添加方法 </span></div><div class="line">		aBtn1.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">			<span class="keyword">var</span> text = oTxt.value;</div><div class="line">			<span class="keyword">var</span> ele = <span class="built_in">document</span>.createElement(<span class="string">"li"</span>);</div><div class="line">			ele.innerHTML = text;</div><div class="line">			<span class="keyword">var</span> link = <span class="built_in">document</span>.createElement(<span class="string">"a"</span>);</div><div class="line">			link.href = <span class="string">"javascript:;"</span></div><div class="line">			link.innerHTML = <span class="string">"斩了"</span>;</div><div class="line"></div><div class="line">			oUl.appendChild(ele);</div><div class="line">			ele.appendChild(link);</div><div class="line">			link.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">					oUl.removeChild(<span class="keyword">this</span>.parentNode);</div><div class="line">				&#125;</div><div class="line">		&#125;</div><div class="line">		</div><div class="line">		<span class="comment">//在前面增加</span></div><div class="line">		aBtn2.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">			<span class="keyword">var</span> text = oTxt.value;</div><div class="line">			<span class="keyword">var</span> ele = <span class="built_in">document</span>.createElement(<span class="string">"li"</span>);</div><div class="line">			<span class="keyword">var</span> link = <span class="built_in">document</span>.createElement(<span class="string">"a"</span>);</div><div class="line">			link.href = <span class="string">"javascript:;"</span></div><div class="line">			link.innerHTML = <span class="string">"斩了"</span>;</div><div class="line">			ele.innerHTML = text;</div><div class="line">			<span class="keyword">if</span>(oUl.children[<span class="number">0</span>])&#123; <span class="comment">//因为ie下，如果insertBefore插入位置的元素不存在，会报错，所以要先判断，如果不存在，就调动appendChild把元素插入到父级元素内部</span></div><div class="line">				oUl.insertBefore(ele,oUl.children[<span class="number">0</span>]);</div><div class="line">				ele.appendChild(link);</div><div class="line">			&#125;<span class="keyword">else</span>&#123;</div><div class="line">				oUl.appendChild(ele);</div><div class="line">				ele.appendChild(link);</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<p>1.appendChild,insertBefore,replaceChild都可以对新增元素或者已存在元素进行操作，如果操作的元素是已存在的话，那个就相当于把已有元素剪切到新的地方</p>
<h2 id="性能优化"><a href="#性能优化" class="headerlink" title="性能优化"></a>性能优化</h2><p>因为在js中,DOM与es是属于两个不同的模块，就像两个不同的小岛，所以每次通过js来操作dom就相当于从一个岛到另外一个岛，两岛之间的桥每次通过都要收“手续费”(消耗性能)，所以我们要尽量减少过桥的次数（能够在独立完成的操作先独立完成）</p>
<h3 id="dom方法与innerHTML对比"><a href="#dom方法与innerHTML对比" class="headerlink" title="dom方法与innerHTML对比"></a>dom方法与innerHTML对比</h3><ol>
<li>webkit 浏览器下，dom方法(如 createELement)效率比innerHTML高</li>
<li><p>其它浏览器下（中firefox），innerHTML的性能要高些</p>
</li>
<li><p>使用innerHTML与直接插入数据的对比</p>
</li>
</ol>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"div1"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">  <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> oDiv  = <span class="built_in">document</span>.querySelector(<span class="string">'#div1'</span>),</div><div class="line">        str = <span class="string">''</span>;</div><div class="line">    <span class="built_in">console</span>.time(<span class="string">'test'</span>);</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;<span class="number">5000</span>;i++)&#123;</div><div class="line">      oDiv.innerHTML +=  <span class="string">'test'</span> + i;</div><div class="line">    &#125;</div><div class="line">     <span class="built_in">console</span>.timeEnd(<span class="string">'test'</span>); <span class="comment">//test: test: 2641.686ms</span></div><div class="line">    <span class="comment">//利用 console.time 来计算耗时</span></div><div class="line">    <span class="comment">// console.time('test');</span></div><div class="line">    <span class="comment">// for(var i=0;i&lt;5000;i++)&#123;</span></div><div class="line">    <span class="comment">//   str += 'test' + i;</span></div><div class="line">    <span class="comment">// &#125;</span></div><div class="line">    <span class="comment">// oDiv.innerHTML = str;</span></div><div class="line">    <span class="comment">// console.timeEnd('test'); //test: 5.402ms</span></div><div class="line">  &#125;</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="减少DOM操作的方法"><a href="#减少DOM操作的方法" class="headerlink" title="减少DOM操作的方法"></a>减少DOM操作的方法</h3><h4 id="节点克隆，复制比创建效率高"><a href="#节点克隆，复制比创建效率高" class="headerlink" title="节点克隆，复制比创建效率高"></a>节点克隆，复制比创建效率高</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"div1"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">  <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> oDiv  = <span class="built_in">document</span>.querySelector(<span class="string">'#div1'</span>),</div><div class="line">        str = <span class="string">''</span>;</div><div class="line">    <span class="comment">//利用 console.time 来计算耗时 test: 42.121ms</span></div><div class="line">    <span class="built_in">console</span>.time(<span class="string">'createElementTest'</span>);</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;<span class="number">5000</span>;i++)&#123;</div><div class="line">     <span class="keyword">var</span> oSpan = <span class="built_in">document</span>.createElement(<span class="string">'span'</span>);</div><div class="line">     oSpan.innerHTML = <span class="string">'1'</span>;</div><div class="line">     oDiv.appendChild(oSpan);</div><div class="line">    &#125;</div><div class="line">    oDiv.innerHTML = str;</div><div class="line">    <span class="built_in">console</span>.timeEnd(<span class="string">'createElementTest'</span>); </div><div class="line">    <span class="comment">//  console.time('createElement');  //createElement: 13.925ms</span></div><div class="line">    <span class="comment">// var oLi = document.createElement('li');</span></div><div class="line">    <span class="comment">// oLi.innerHTML = '1';</span></div><div class="line">    <span class="comment">//  for(var i=0;i&lt;5000;i++)&#123;</span></div><div class="line">    <span class="comment">//   var newList = oLi.cloneNode(true); //当里面的文本节点也复制</span></div><div class="line">    <span class="comment">//   oDiv.appendChild(newList);</span></div><div class="line">    <span class="comment">// &#125;</span></div><div class="line">    <span class="comment">// console.timeEnd('createElement'); </span></div><div class="line">  &#125;</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<h4 id="访问元素集合，尽量使用局部变量"><a href="#访问元素集合，尽量使用局部变量" class="headerlink" title="访问元素集合，尽量使用局部变量"></a>访问元素集合，尽量使用局部变量</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"div1"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">  <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> oDiv1 = <span class="built_in">document</span>.getElementById(<span class="string">'div1'</span>);</div><div class="line"></div><div class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;<span class="number">5000</span>;i++)&#123;</div><div class="line">      <span class="keyword">var</span> oP = <span class="built_in">document</span>.createElement(<span class="string">'p'</span>);</div><div class="line">      oDiv1.appendChild(oP);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">var</span> oPList = oDiv1.getElementsByTagName(<span class="string">'p'</span>);</div><div class="line">    <span class="keyword">var</span> len = oPList.length;</div><div class="line"></div><div class="line">     <span class="comment">//使用每次查询个数的写法，这样在每次for的时候都需查询一次dom的节点数量: 636.043ms</span></div><div class="line">    <span class="built_in">console</span>.time(<span class="string">'s1'</span>); </div><div class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;oPList.length;i++)&#123;</div><div class="line">      oPList[i].innerHTML = i;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">console</span>.timeEnd(<span class="string">'s1'</span>);</div><div class="line"></div><div class="line">    <span class="comment">//将len变成局部变量，不用每次都查询DOM节点，效率提高了3倍: 225.598ms</span></div><div class="line">   <span class="built_in">console</span>.time(<span class="string">'var'</span>); </div><div class="line">   <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;len;i++)&#123;</div><div class="line">      oPList[i].innerHTML = i;</div><div class="line">    &#125;</div><div class="line">     <span class="built_in">console</span>.timeEnd(<span class="string">'var'</span>);</div><div class="line">  &#125;</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<h4 id="尽量只获取元素的节点，而不是用既可以获取元素节点，又可以获取内面文本节点的"><a href="#尽量只获取元素的节点，而不是用既可以获取元素节点，又可以获取内面文本节点的" class="headerlink" title="尽量只获取元素的节点，而不是用既可以获取元素节点，又可以获取内面文本节点的"></a>尽量只获取元素的节点，而不是用既可以获取元素节点，又可以获取内面文本节点的</h4><ol>
<li>只获取元素节点 <code>children</code> <code>firstElementChild</code></li>
<li>同时获取元素节点和内部的文本节点 <code>childNodes</code> <code>firstChild</code></li>
</ol>
<h4 id="选择器API"><a href="#选择器API" class="headerlink" title="选择器API"></a>选择器API</h4><ol>
<li><code>querySelector</code></li>
<li><code>querySelectorAll</code></li>
</ol>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line">	<span class="comment">//类似于css选择器的写法，只需操作一次DOM就可以获取元素，但IE8及以下不支持</span></div><div class="line">	<span class="built_in">document</span>.querySelectorAll(<span class="string">'#div1 p'</span>);</div><div class="line"><span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></div></pre></td></tr></table></figure>
<h3 id="DOM与浏览器的关系"><a href="#DOM与浏览器的关系" class="headerlink" title="DOM与浏览器的关系"></a>DOM与浏览器的关系</h3><h4 id="重排"><a href="#重排" class="headerlink" title="重排"></a>重排</h4><p>我们通过js进行DOM操作来改变元素的大小，位置时，让它的形状发生改变，就相当于改变了页面的内容，这样就消耗比较多的性能</p>
<h4 id="重绘"><a href="#重绘" class="headerlink" title="重绘"></a>重绘</h4><p>当重排结束后，浏览器把重排完的元素显示出来，就产生是重绘，如果只改变背景颜色，那就只会触发重绘的过程，而不会重排</p>
<h4 id="尽量在插入元素前进行对元素内容的改变"><a href="#尽量在插入元素前进行对元素内容的改变" class="headerlink" title="尽量在插入元素前进行对元素内容的改变"></a>尽量在插入元素前进行对元素内容的改变</h4><p>假如在元素插入后再进行内容的改变，这样就会让浏览器再次进入重排重绘的过程，造成资源的消耗</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"div1"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">  <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> oDiv1 = <span class="built_in">document</span>.getElementById(<span class="string">'div1'</span>);</div><div class="line"></div><div class="line">    <span class="built_in">console</span>.time(<span class="string">'t'</span>); <span class="comment">//t: 34.023ms</span></div><div class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;<span class="number">5000</span>;i++)&#123;</div><div class="line">      <span class="keyword">var</span> oP = <span class="built_in">document</span>.createElement(<span class="string">'p'</span>);</div><div class="line">     oP.innerHTML = i; <span class="comment">//要注意把内容操作放在插入元素前，减少浏览器的重排重绘</span></div><div class="line">      oDiv1.appendChild(oP);</div><div class="line">    </div><div class="line">    &#125;</div><div class="line">    <span class="built_in">console</span>.timeEnd(<span class="string">'t'</span>);</div><div class="line">   </div><div class="line">   </div><div class="line">  &#125;</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<h4 id="利用cssText合并DOM操作"><a href="#利用cssText合并DOM操作" class="headerlink" title="利用cssText合并DOM操作"></a>利用cssText合并DOM操作</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"div1"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">  <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> oDiv1 = <span class="built_in">document</span>.getElementById(<span class="string">'div1'</span>);</div><div class="line"></div><div class="line">    <span class="built_in">console</span>.time(<span class="string">'t'</span>); <span class="comment">//t: 直接使用css的具体属性值进行添加：131.172ms  使用cssText合并操作后： 60.697ms</span></div><div class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;<span class="number">5000</span>;i++)&#123;</div><div class="line">      <span class="keyword">var</span> oP = <span class="built_in">document</span>.createElement(<span class="string">'p'</span>);</div><div class="line">      <span class="comment">// oP.style.background = '#ccc';</span></div><div class="line">      <span class="comment">// oP.style.height = '300px';</span></div><div class="line">      oP.cssText = <span class="string">'height:300px;background:#ccc'</span>;</div><div class="line">      oP.innerHTML = i; </div><div class="line">      oDiv1.appendChild(oP);</div><div class="line"></div><div class="line">    &#125;</div><div class="line">    <span class="built_in">console</span>.timeEnd(<span class="string">'t'</span>);</div><div class="line">  &#125;</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<h4 id="缓存布局信息"><a href="#缓存布局信息" class="headerlink" title="缓存布局信息"></a>缓存布局信息</h4><p>原理是操作变量比操作DOM的属性值性能更高</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></div><div class="line">#div1&#123;</div><div class="line">  position: absolute;</div><div class="line">  left:0;</div><div class="line">  top: 0;</div><div class="line">  width: 100px;</div><div class="line">  height: 100px;</div><div class="line">  background: #4CAF50;</div><div class="line">&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"div1"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">  <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> oDiv1 = <span class="built_in">document</span>.getElementById(<span class="string">'div1'</span>);</div><div class="line"></div><div class="line">    <span class="comment">//先把位置信息缓存下来</span></div><div class="line">    <span class="keyword">var</span> L = oDiv1.offsetLeft;</div><div class="line">    <span class="keyword">var</span> T = oDiv1.offsetTop;</div><div class="line"></div><div class="line">    setInterval(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">       <span class="comment">//通过改变缓存下来的值改变元素位置 </span></div><div class="line">      L++;</div><div class="line">      T++;</div><div class="line">      oDiv1.style.left = L + <span class="string">'px'</span>;</div><div class="line">      oDiv1.style.top = T + <span class="string">'px'</span>;</div><div class="line">    &#125;,<span class="number">10</span>);</div><div class="line">   </div><div class="line">  &#125;</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<h4 id="文档碎片-document-createDocumentFragment"><a href="#文档碎片-document-createDocumentFragment" class="headerlink" title="文档碎片 document.createDocumentFragment"></a>文档碎片 <code>document.createDocumentFragment</code></h4><p>相当于提供临时储存DOM元素的空间，把所有要添加的内容都放到这个临时的空间内，然后一次过添加到页面上，减少重排重绘</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></div><div class="line">#div1&#123;</div><div class="line">  position: absolute;</div><div class="line">  left:0;</div><div class="line">  top: 0;</div><div class="line">  width: 100px;</div><div class="line">  height: 100px;</div><div class="line">  background: #4CAF50;</div><div class="line">&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"div1"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">  <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> oDiv1 = <span class="built_in">document</span>.getElementById(<span class="string">'div1'</span>);</div><div class="line">    <span class="keyword">var</span> oFrag = <span class="built_in">document</span>.createDocumentFragment();</div><div class="line"></div><div class="line">    <span class="built_in">console</span>.time(<span class="string">'t'</span>); <span class="comment">//t: 5.874ms  t: 6.533ms</span></div><div class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;<span class="number">5000</span>;i++)&#123;</div><div class="line">      <span class="keyword">var</span> oP = <span class="built_in">document</span>.createElement(<span class="string">'p'</span>);</div><div class="line">      oFrag.appendChild(oP);</div><div class="line">    &#125;</div><div class="line">    oDiv1.appendChild(oFrag);</div><div class="line">    <span class="built_in">console</span>.timeEnd(<span class="string">'t'</span>);</div><div class="line">    </div><div class="line">  &#125;</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<h4 id="DOM与事件委托"><a href="#DOM与事件委托" class="headerlink" title="DOM与事件委托"></a>DOM与事件委托</h4><h4 id="使用前端模板"><a href="#使用前端模板" class="headerlink" title="使用前端模板"></a>使用前端模板</h4><ol>
<li>jquery的<code>jQuery.tmpl()</code></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[数组]]></title>
      <url>weison.org/2015/12/31/arr/</url>
      <content type="html"><![CDATA[<h1 id="数组的定义与清空"><a href="#数组的定义与清空" class="headerlink" title="数组的定义与清空"></a>数组的定义与清空</h1><ol>
<li><p><code>new Array</code>及<code>[]</code></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arr = [];</div><div class="line"><span class="keyword">var</span> arr1 = <span class="keyword">new</span> <span class="built_in">Array</span>();</div><div class="line"><span class="comment">/*</span></div><div class="line">	假如 new Array放的是一个数字如</div><div class="line">	var arr1 = new Array(4); // 这是表示arr1的长度为4(length =4)</div><div class="line">	而如果带的是一个字符内容</div><div class="line">	var arr1 = new Array("1"); //则表示arr1数组里有一个'1'的内容(length = 1)</div><div class="line"> */</div></pre></td></tr></table></figure>
</li>
<li><p>清空数组的方法 </p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arr = [<span class="number">20</span>,<span class="number">30</span>,<span class="number">40</span>];</div><div class="line">arr = []; <span class="comment">//将数组重新赋值为新数组</span></div><div class="line">arr.length = <span class="number">0</span>; <span class="comment">//将数组长度变成0</span></div></pre></td></tr></table></figure>
</li>
<li><p>利用length=0的方法清空内容，只适用于数组，不能用于字符串</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> str = <span class="string">'abcd'</span>;</div><div class="line">str.length = <span class="number">0</span>;</div><div class="line"><span class="built_in">console</span>.log(str); =&gt; <span class="string">'abcd'</span></div></pre></td></tr></table></figure>
</li>
</ol>
<h1 id="数组常用方法"><a href="#数组常用方法" class="headerlink" title="数组常用方法"></a>数组常用方法</h1><h2 id="push在数组内部的后面添加内容，并且它会返回这个数组新的长度"><a href="#push在数组内部的后面添加内容，并且它会返回这个数组新的长度" class="headerlink" title="push在数组内部的后面添加内容，并且它会返回这个数组新的长度"></a><code>push</code>在数组内部的后面添加内容，并且它会返回这个数组新的长度</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>];</div><div class="line">arr.push(<span class="string">"10"</span>);</div><div class="line"><span class="built_in">console</span>.log(arr); <span class="comment">// =&gt; [1,2,3,4,'10'];</span></div><div class="line"><span class="built_in">console</span>.log(arr.push(<span class="number">20</span>)); <span class="comment">// =&gt; 6 返回了arr这个数组的长度</span></div></pre></td></tr></table></figure>
<h2 id="unshift在数组内部的前面添加内容"><a href="#unshift在数组内部的前面添加内容" class="headerlink" title="unshift在数组内部的前面添加内容"></a><code>unshift</code>在数组内部的前面添加内容</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</div><div class="line">arr.unshift(<span class="number">0</span>);</div><div class="line"><span class="built_in">console</span>.log(arr); <span class="comment">// =&gt; [0,1,2,3];</span></div><div class="line"><span class="built_in">console</span>.log(arr.unshift(<span class="number">-1</span>)); <span class="comment">//  =&gt; 在前面添加一个-1的值，并返回数组长度5，ie6\7不支持返回值</span></div></pre></td></tr></table></figure>
<h2 id="pop删除数组中的最后一个"><a href="#pop删除数组中的最后一个" class="headerlink" title="pop删除数组中的最后一个"></a><code>pop</code>删除数组中的最后一个</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>];</div><div class="line">arr.pop();</div><div class="line"><span class="built_in">console</span>.log(arr); <span class="comment">// =&gt; [1,2,3]; 删除了4</span></div><div class="line"><span class="built_in">console</span>.log(arr.pop()); <span class="comment">// =&gt; 3  ，返回的数值是被删除的那个数组</span></div></pre></td></tr></table></figure>
<h2 id="shift删除数组中的第一个"><a href="#shift删除数组中的第一个" class="headerlink" title="shift删除数组中的第一个"></a><code>shift</code>删除数组中的第一个</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</div><div class="line">arr.shift(); <span class="comment">// =&gt; [2,3];</span></div><div class="line">alert(arr.shift()); <span class="comment">// =&gt; [3]; 删除当前数值的第一个，并返回被删除的数组</span></div></pre></td></tr></table></figure>
<h2 id="利用shift和push将最前面的内容放在最后面，利用pop和unshift将后面的内容放在最前"><a href="#利用shift和push将最前面的内容放在最后面，利用pop和unshift将后面的内容放在最前" class="headerlink" title="利用shift和push将最前面的内容放在最后面，利用pop和unshift将后面的内容放在最前"></a>利用<code>shift和push</code>将最前面的内容放在最后面，利用<code>pop和unshift</code>将后面的内容放在最前</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>];</div><div class="line">arr.push(arr.shift()); <span class="comment">// =&gt; [2,3,4,1]; 第一个变成最后</span></div><div class="line">arr.unshift(arr.pop()); <span class="comment">// =&gt; [1,2,3,4]; 最后变成第一个</span></div></pre></td></tr></table></figure>
<h2 id="splice可以删除、替换、增加数组内的内容"><a href="#splice可以删除、替换、增加数组内的内容" class="headerlink" title="splice可以删除、替换、增加数组内的内容"></a><code>splice</code>可以删除、替换、增加数组内的内容</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>];</div><div class="line">arr.splice(<span class="number">0</span>,<span class="number">1</span>); <span class="comment">// =&gt; [2,3,4]; 0表示开始的索引值，1表示需要删除的个数</span></div><div class="line">arr.splice(<span class="number">0</span>,<span class="number">1</span>,<span class="string">'替换'</span>); <span class="comment">// =&gt; ['替换',3,4]; 0表示替换开始的位置，1表示替换的个数，最后一个表示替换的内容</span></div><div class="line">arr.splice(<span class="number">0</span>,<span class="number">2</span>,<span class="number">5</span>); <span class="comment">// [5,4]; 从索引值为0的数组内容开始查找，到第2个，并将这两个内容替换成"5"</span></div><div class="line">arr.splice(<span class="number">1</span>,<span class="number">0</span>,<span class="number">2</span>,<span class="number">3</span>); <span class="comment">// =&gt; [5,2,3,4]; 1表示插入数据的索引值，0表示不删除不替换内容，2和3代表插入的数据，后面的内容是插入的内容，可同时添加多个</span></div><div class="line"><span class="built_in">console</span>.log(arr.splice(<span class="number">0</span>,<span class="number">1</span>)); <span class="comment">//=&gt; 5 返回被删除的第一个数组内容 5</span></div></pre></td></tr></table></figure>
<ol>
<li>数组去重<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">	 * 数组去重</div><div class="line">	 * @param  &#123;[type]&#125; arr [description]</div><div class="line">	 * @return &#123;[type]&#125;     [description]</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">function</span> <span class="title">unique</span>(<span class="params">arr</span>)</span>&#123;</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;arr.length;i++)&#123;</div><div class="line">			<span class="keyword">for</span>(<span class="keyword">var</span> j=i+<span class="number">1</span>;j&lt;arr.length;j++)&#123; <span class="comment">//遍历数组</span></div><div class="line">				<span class="keyword">if</span>(arr[i] == arr[j])&#123; <span class="comment">//判断当前数据的值与接下来的数据是否一致</span></div><div class="line">					arr.splice(j,<span class="number">1</span>);  <span class="comment">//如果一致，就把这个数据删除</span></div><div class="line">					j--; <span class="comment">//因为splice后，数组的长度会减少，所以要j要减少1，才会不跳过值</span></div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> arr;</div><div class="line">	&#125;</div></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="sort根据unicode编码大小进行排序"><a href="#sort根据unicode编码大小进行排序" class="headerlink" title="sort根据unicode编码大小进行排序"></a><code>sort</code>根据unicode编码大小进行排序</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arr = [<span class="string">'a'</span>,<span class="string">'e'</span>,<span class="string">'b'</span>];</div><div class="line">arr.sort();</div><div class="line"><span class="built_in">console</span>.log(arr); <span class="comment">// =&gt; ['a','b','e'];</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> arr2 = [<span class="number">9</span>,<span class="number">10</span>,<span class="number">20</span>,<span class="number">80</span>];</div><div class="line">arr2.sort();</div><div class="line"><span class="built_in">console</span>.log(arr2);  <span class="comment">// =》 [10,20,80,9]; 这是因为sort内部对比是先把内容变成字符串进行比较，而字符串比较是从第一位开始，只要第一位大，那么结果这个数不继续看后面的值</span></div><div class="line"></div><div class="line"><span class="comment">/*</span></div><div class="line">	利用对比函数进行数字排序</div><div class="line">	a和b是从数组里面随机抽取2个数字，</div><div class="line">	假如a-b是一个正数，如30-10，则把30和10的位置调换，</div><div class="line">	假如是一个负数，如10-80，则位置不变</div><div class="line"> */</div><div class="line"><span class="keyword">var</span> arr3 = [<span class="number">30</span>,<span class="number">10</span>,<span class="number">80</span>,<span class="number">9</span>];</div><div class="line">arr3.sort(<span class="function"><span class="keyword">function</span>(<span class="params">a,b</span>)</span>&#123;</div><div class="line">	<span class="keyword">return</span> a -b; <span class="comment">// 从小到大排序，return 只接收数字类型</span></div><div class="line">&#125;);</div><div class="line"><span class="built_in">console</span>.log(arr3); <span class="comment">// =&gt; [9,10,30,80];</span></div><div class="line">arr3.sort(<span class="function"><span class="keyword">function</span>(<span class="params">a,b</span>)</span>&#123;</div><div class="line">	<span class="keyword">return</span> b - a; <span class="comment">// 从大到小排序</span></div><div class="line">&#125;);</div><div class="line"><span class="built_in">console</span>.log(arr3); <span class="comment">// =&gt; [80, 30, 10, 9];</span></div><div class="line"><span class="keyword">var</span> arr4 = [<span class="string">'10px'</span>,<span class="string">'5px'</span>,<span class="string">'300px'</span>];</div><div class="line">arr4.sort(<span class="function"><span class="keyword">function</span>(<span class="params">a,b</span>)</span>&#123;</div><div class="line">	<span class="keyword">return</span> <span class="built_in">parseFloat</span>(a) - <span class="built_in">parseFloat</span>(b);</div><div class="line">&#125;)</div><div class="line"><span class="built_in">console</span>.log(arr4); <span class="comment">// =&gt;["5px", "10px", "300px"] 利用parseFloat把字符串转换成数字再进行比较，注意，这个函数只会调换位置，而不去改变这个数组内的值</span></div><div class="line"><span class="comment">/*</span></div><div class="line">	其它算法</div><div class="line">	快速排序法</div><div class="line">	希尔排序法</div><div class="line">	冒泡</div><div class="line">	归并</div><div class="line">	选择</div><div class="line">	插入</div><div class="line"> */</div></pre></td></tr></table></figure>
<ol>
<li><p>利用Math.random和sort()进行随机排序</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">7</span>,<span class="number">10</span>,<span class="number">20</span>];</div><div class="line">arr.sort(<span class="function"><span class="keyword">function</span>(<span class="params">a,b</span>)</span>&#123;</div><div class="line">	<span class="keyword">return</span> <span class="built_in">Math</span>.random() - <span class="number">0.5</span>; <span class="comment">// Math.random 是随机生成一个0到1之前的小数</span></div><div class="line">&#125;);</div><div class="line"><span class="built_in">console</span>.log(arr); <span class="comment">//=&gt;[20, 7, 2, 1, 10]，因为是随机数，所以可能下次排的结果不一致</span></div></pre></td></tr></table></figure>
</li>
<li><p>随机公式</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">Math</span>.random(); <span class="comment">// 0~1之间的数字</span></div><div class="line"><span class="built_in">Math</span>.random()*<span class="number">5</span>+<span class="number">5</span>;; <span class="comment">//5到10之间的数字</span></div><div class="line"><span class="built_in">Math</span>.round(<span class="built_in">Math</span>.random()*<span class="number">10</span>) +<span class="number">10</span>; <span class="comment">// 10~20之间的整数,Math.round()将数字转换成四舍五入的整数</span></div><div class="line"><span class="built_in">Math</span>.round(<span class="built_in">Math</span>.random()*<span class="number">50</span>)+<span class="number">50</span>;  <span class="comment">// 10~20之间的整数</span></div><div class="line"><span class="comment">//由此可见，求x~y之间的数，公式为</span></div><div class="line"><span class="built_in">Math</span>.round(<span class="built_in">Math</span>.random()*(y-x)+y);</div><div class="line"><span class="built_in">Math</span>.round(<span class="built_in">Math</span>.random()*x); <span class="comment">//0~x</span></div><div class="line"><span class="built_in">Math</span>.ceil(<span class="built_in">Math</span>.random()*x); <span class="comment">//1~x Math.ceil是向上取整</span></div></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="concat连接多个数组"><a href="#concat连接多个数组" class="headerlink" title="concat连接多个数组"></a><code>concat</code>连接多个数组</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arr1 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</div><div class="line"><span class="keyword">var</span> arr2 = [<span class="number">4</span>,<span class="number">5</span>];</div><div class="line"><span class="keyword">var</span> arr3 = [<span class="number">8</span>,<span class="number">20</span>];</div><div class="line"><span class="keyword">var</span> arr4 = arr1.concat(arr2,arr3);</div><div class="line"><span class="built_in">console</span>.log(arr4); <span class="comment">// =&gt; [1, 2, 3, 4, 5, 8, 20]</span></div></pre></td></tr></table></figure>
<h2 id="reverse将数组元素从尾到头排列"><a href="#reverse将数组元素从尾到头排列" class="headerlink" title="reverse将数组元素从尾到头排列"></a><code>reverse</code>将数组元素从尾到头排列</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arr = [<span class="string">'a'</span>,<span class="number">10</span>,<span class="string">'d'</span>];</div><div class="line"><span class="built_in">console</span>.log(arr.reverse());</div></pre></td></tr></table></figure>
<p>1.颠倒字符串<code>split</code>将字符变成数组，<code>reverse</code>反转数组，<code>join</code>将数组变成字符串<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> str = <span class="string">"weison"</span>;</div><div class="line"><span class="built_in">console</span>.log(str.split(<span class="string">""</span>).reverse().join(<span class="string">""</span>));	<span class="comment">// =&gt; nosiew</span></div></pre></td></tr></table></figure></p>
<h1 id="json存放数据的一种形式"><a href="#json存放数据的一种形式" class="headerlink" title="json存放数据的一种形式"></a><code>json</code>存放数据的一种形式</h1><h2 id="兼容性好，它是跨平台的，非常适合于服务端与javascript进行交互"><a href="#兼容性好，它是跨平台的，非常适合于服务端与javascript进行交互" class="headerlink" title="兼容性好，它是跨平台的，非常适合于服务端与javascript进行交互"></a>兼容性好，它是跨平台的，非常适合于服务端与javascript进行交互</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> json = &#123;<span class="attr">name</span>:<span class="string">"weison"</span>,<span class="attr">job</span>:<span class="string">"developer"</span>&#125;;</div></pre></td></tr></table></figure>
<ol>
<li><p>将数组形式写成json格式</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//将数组</span></div><div class="line"><span class="keyword">var</span> imgSrc = [<span class="string">"img/1.jpg"</span>,<span class="string">"img/2.jpg"</span>,<span class="string">"img/3.jpg"</span>,<span class="string">"img/4.jpg"</span>];</div><div class="line"><span class="keyword">var</span> imgTxt = [<span class="string">'图片1'</span>,<span class="string">'图片2'</span>,<span class="string">'图片3'</span>,<span class="string">'图片4'</span>];</div><div class="line"><span class="comment">//变成json格式</span></div><div class="line"><span class="keyword">var</span> imgData = &#123;</div><div class="line">	<span class="attr">src</span>:[<span class="string">"img/1.jpg"</span>,<span class="string">"img/2.jpg"</span>,<span class="string">"img/3.jpg"</span>,<span class="string">"img/4.jpg"</span>],</div><div class="line">	<span class="attr">txt</span>:[<span class="string">'图片1'</span>,<span class="string">'图片2'</span>,<span class="string">'图片3'</span>,<span class="string">'图片4'</span>]</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
</li>
<li><p>生成、访问、写入数据的方式</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//生成json</span></div><div class="line"><span class="keyword">var</span> weison = &#123;<span class="attr">name</span>:<span class="string">"weison"</span>,<span class="attr">job</span>:<span class="string">"developer"</span>&#125;; <span class="comment">//键名可以不使用引号包含</span></div><div class="line"><span class="keyword">var</span> json = &#123;<span class="string">"name"</span>:<span class="string">"weison"</span>,<span class="string">"job"</span>:<span class="string">"developer"</span>&#125;; <span class="comment">//也可以包含，在使用上无区别，不过相对来说比较推荐使用这个，因为相对稳定和安全</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> json = &#123;<span class="string">"team1"</span>:[<span class="string">'join'</span>,<span class="string">'lily'</span>],<span class="string">"time"</span>:<span class="number">2015</span>&#125;;<span class="comment">//json里面可以包含多种数据类型</span></div><div class="line"><span class="comment">//访问属性</span></div><div class="line">json.name <span class="comment">// =&gt; weison</span></div><div class="line">json[<span class="string">'name'</span>] <span class="comment">// =&gt; weison 注意中括号里面的要加引号，不然会认为里面的内容是一个变量</span></div><div class="line"><span class="comment">//改写数字</span></div><div class="line">json.job = <span class="string">"designer"</span>;</div></pre></td></tr></table></figure>
</li>
<li><p>利用<code>for in</code>遍历json内的键名和键值</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> json = &#123;<span class="attr">name</span>:<span class="string">"weison"</span>,<span class="attr">job</span>:<span class="string">"developer"</span>,<span class="string">"attr"</span>:<span class="string">"json"</span>&#125;;</div><div class="line"><span class="keyword">for</span>(<span class="keyword">var</span> attr <span class="keyword">in</span> json)&#123;</div><div class="line">	<span class="built_in">console</span>.log(attr);<span class="comment">//attr即是json的键名</span></div><div class="line">	<span class="built_in">console</span>.log(json[attr]);<span class="comment">//json[attr]即是访问json下每个键名对应的键值,注意这里的attr不要加引号，加后会变成查找json下键名为attr的键值</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p><code>for in</code>也可以用来遍历对象的属性</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//获取document下的属性</span></div><div class="line"><span class="keyword">var</span> num = <span class="number">0</span>;</div><div class="line"><span class="keyword">var</span> str = <span class="literal">null</span>;</div><div class="line"><span class="keyword">for</span>(<span class="keyword">var</span> attr <span class="keyword">in</span> <span class="built_in">document</span>)&#123;</div><div class="line">	str += num + <span class="string">'.'</span> +attr + <span class="string">':'</span>+ <span class="built_in">document</span>[attr] + <span class="string">'&lt;br /&gt;'</span>;</div><div class="line">	num ++;</div><div class="line">&#125;</div><div class="line"><span class="built_in">document</span>.body.innerHTML = str;</div></pre></td></tr></table></figure>
</li>
<li><p><code>for in</code>及<code>for</code>的使用</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> json = &#123;</div><div class="line">	<span class="string">'name'</span> : <span class="string">'wesion'</span>,</div><div class="line">	<span class="string">'job'</span> : <span class="string">'develop'</span></div><div class="line">&#125;;</div><div class="line">json.length <span class="comment">// =&gt; undefinder 因为json是没有长度这个概念的,所以不能用for方法</span></div><div class="line"><span class="keyword">var</span> arr = [<span class="string">'lisa'</span>,<span class="string">'lilei'</span>]; <span class="comment">//数组的默认键名是索引值</span></div><div class="line"><span class="keyword">for</span>(<span class="keyword">var</span> attr <span class="keyword">in</span> arr)&#123;</div><div class="line">	<span class="built_in">console</span>.log(attr + <span class="string">':'</span> + arr[attr]);</div><div class="line">&#125;</div><div class="line"><span class="comment">//结果</span></div><div class="line"><span class="comment">/*</span></div><div class="line">	0:lisa</div><div class="line">	1:lilei</div><div class="line"> */</div></pre></td></tr></table></figure>
</li>
</ol>
<h1 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h1><ol>
<li><p>随机生成5个5~10的不重复整数</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arr = []; <span class="comment">//创建数组</span></div><div class="line"><span class="keyword">while</span>(arr.length&lt;<span class="number">5</span>)&#123; </div><div class="line"><span class="comment">//利用while循环，当数组不足够5个时，循环运行生成随机数的函数</span></div><div class="line">		randomNum();</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">randomNum</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	<span class="keyword">var</span> num = <span class="built_in">Math</span>.round(<span class="built_in">Math</span>.random()*<span class="number">5</span>) + <span class="number">5</span>; <span class="comment">//创建num.Math.random生成随机0~1之间的小数，Math.round用于四舍五入取整数</span></div><div class="line">	<span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;arr.length;i++)&#123; <span class="comment">//判断否有重复</span></div><div class="line">		<span class="keyword">if</span>(num == arr[i])&#123;</div><div class="line">			<span class="keyword">return</span>; <span class="comment">//如果有重复，则中断函数运行</span></div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	arr.push(num);  <span class="comment">//将不重复的数组内容推送到数组后</span></div><div class="line">&#125;</div><div class="line"><span class="built_in">console</span>.log(arr);</div></pre></td></tr></table></figure>
</li>
<li><p>返回数组内某一项第一次出现的位置，类似于字符串的indexOf()</p>
</li>
</ol>
<h1 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h1><ol>
<li><a href="http://javascript.ruanyifeng.com/stdlib/object.html#toc6" target="_blank" rel="external">toString()的应用：判断数据类型</a></li>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/call" target="_blank" rel="external">mozilla-Function.prototype.call()</a></li>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/toString" target="_blank" rel="external">Object.prototype.toString()</a></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[ajax]]></title>
      <url>weison.org/2015/12/12/ajax/</url>
      <content type="html"><![CDATA[<p>ajax（Asynchronous Javascript And XML,异步的javascript和xml），无刷新的情况下进行跟后台数据交互的，可应用于注册表单验证，在线聊天等场景。</p>
<ol>
<li>通过标准下的<code>new XMLHttpRequest</code>，ie下的<code>new ActiveXObject()</code>来实例XHR对象</li>
<li>通过<code>open</code>(‘请求方法’.’请求地址’,是否异步请求)来建议一个数据请求内容，然后通过send方法来与服务器建立链接，假如是POST请求，则可以打请求的内容写到require.send(请求内容)中去。</li>
<li>当发送请求后，我们可以通过，<code>require.onreadystates</code>为监听请求进度（0.初始化，1.open方法民被调用，2.接收请求头信息，3处理中响应主体，4处理完成）及require.status(200请求成功)</li>
<li>当这些都成功后，我们通过服务器返回的<code>responseText</code>，利用js的DOM操作动态更新数据</li>
<li>假如遇到跨域问题（协议，子域名，主域名，端口号不同），需要不同域名之间访问数据，可以通过服务器代理，get情况下考虑使用JSONP（script标签可以请求数据），无需兼容ie10以下版本的XHR2方法来解决跨域。</li>
</ol>
<a id="more"></a>
<h3 id="同步与异步"><a href="#同步与异步" class="headerlink" title="同步与异步"></a>同步与异步</h3><ul>
<li>同步是做完一件事再做另外一件事</li>
<li>异步是同时做多件事，服务器操作与本地操作之间不同互相阻塞</li>
</ul>
<h3 id="一个完整的HTTP请求过程，通常有7个步骤："><a href="#一个完整的HTTP请求过程，通常有7个步骤：" class="headerlink" title="一个完整的HTTP请求过程，通常有7个步骤："></a>一个完整的HTTP请求过程，通常有7个步骤：</h3><ol>
<li>建立TCP链接；</li>
<li>Web浏览器向Web服务器发送请求命令；</li>
<li>Web浏览器发送请求头信息</li>
<li>Web服务器应答；</li>
<li>Web服务器发送应答头信息</li>
<li>Web服务器向浏览器发送数据</li>
<li>Web服务器关闭TCP链接</li>
</ol>
<ul>
<li>http是计算机通过网络进行通信的规则</li>
<li>它无状态的服务协议，不建立持久链接，不会保存之前的数据</li>
</ul>
<h3 id="一个HTTP请求一般由四部分组成"><a href="#一个HTTP请求一般由四部分组成" class="headerlink" title="一个HTTP请求一般由四部分组成"></a>一个HTTP请求一般由四部分组成</h3><p>（get：http:www.baidu.com/?a.html/username=weison）</p>
<ol>
<li>HTTP请求的方法或动作，比如是GET还是POST请求<ul>
<li><code>get</code> 一般用于信息获取（查询），使用URL传递参数，获取的信息对任何人可见，对所发送信息的数量也有限制，一般在2000个字符。（GET方法是幂等的,无论查询多少次，获取的信息都是一样的）</li>
<li><code>post</code> 一般用于修改服务器上的资源，对所发信息的数量无限制。</li>
</ul>
</li>
<li>正在请求的URL，总得知道请求的地址是什么吧</li>
<li>请求头，包含一些客户端环境信息，身份验证信息等</li>
<li>请求体，也就是请求正文，请求正文中可以包含客户提交的查询字符串信息，表单信息等等</li>
</ol>
<h3 id="HTTP响应，由三部分组成"><a href="#HTTP响应，由三部分组成" class="headerlink" title="HTTP响应，由三部分组成"></a>HTTP响应，由三部分组成</h3><ol>
<li>一个数字和文字组成的状态码;</li>
</ol>
<ul>
<li>信息类(1xx)，表示收到Web浏览器请求，正在进一步的处理中</li>
<li>成功(2xx)，表示用户请求呗正确接收，理解和处理。例如：200 OK</li>
<li>重定向(3xx)，表示请求没有成功，客户必须采取进一步的动作</li>
<li>客户端错误(4xx)，表示客户端提交的请求有错误，例如：404 Not Found，意味着请求中所引用的文档不存在</li>
<li>服务器错误(5xx)，表示服务器不能完成对请求的处理。例如500</li>
</ul>
<ol>
<li>响应头（服务器信息），响应头也和请求头一样包含许多有用的信息，例如服务器类型、日期时间、内容类型和长度等；</li>
<li>响应体，也就是响应正文，根据用户的请求内容返回的响应数据。</li>
</ol>
<h3 id="XMLHttpRequest-实例化"><a href="#XMLHttpRequest-实例化" class="headerlink" title="XMLHttpRequest 实例化"></a>XMLHttpRequest 实例化</h3><ul>
<li>标准浏览器下,new XMLHttpRequest();</li>
<li>ie6及以下,new ActiveXObject()<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> request;</div><div class="line"><span class="keyword">if</span>(<span class="built_in">window</span>.XMLHttpRequest)&#123;</div><div class="line">  request = <span class="keyword">new</span> XMLHttpRequest(); <span class="comment">//ie7+,fixrefox,chrome</span></div><div class="line">&#125;<span class="keyword">else</span>&#123;</div><div class="line">  request = <span class="keyword">new</span> ActiveXObejct(<span class="string">"Microsoft.XMLHTTP"</span>); <span class="comment">//IE6,IE5</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="发送请求XMLHttpRequre"><a href="#发送请求XMLHttpRequre" class="headerlink" title="发送请求XMLHttpRequre"></a>发送请求XMLHttpRequre</h3><h4 id="open-method-url-async-调用http请求"><a href="#open-method-url-async-调用http请求" class="headerlink" title="open(method,url,async) 调用http请求"></a><code>open(method,url,async)</code> 调用http请求</h4><h4 id="method-代表是发送请求的方式，是使用get还是post-不区分大小写，一般用大写"><a href="#method-代表是发送请求的方式，是使用get还是post-不区分大小写，一般用大写" class="headerlink" title="method 代表是发送请求的方式，是使用get还是post,不区分大小写，一般用大写"></a><code>method</code> 代表是发送请求的方式，是使用<code>get</code>还是<code>post</code>,不区分大小写，一般用大写</h4><h4 id="url-请求地址，可以是相对地址或绝对地址"><a href="#url-请求地址，可以是相对地址或绝对地址" class="headerlink" title="url 请求地址，可以是相对地址或绝对地址"></a><code>url</code> 请求地址，可以是相对地址或绝对地址</h4><h4 id="async-请求是同步还是异步的，ajax一般同步true值，而采用同步就把这个值设为false-此值默认就为true，所以一般不用填写"><a href="#async-请求是同步还是异步的，ajax一般同步true值，而采用同步就把这个值设为false-此值默认就为true，所以一般不用填写" class="headerlink" title="async 请求是同步还是异步的，ajax一般同步true值，而采用同步就把这个值设为false,此值默认就为true，所以一般不用填写"></a><code>async</code> 请求是同步还是异步的，ajax一般同步<code>true</code>值，而采用同步就把这个值设为<code>false</code>,此值默认就为<code>true</code>，所以一般不用填写</h4><h4 id="send-string-把请求发送到服务器"><a href="#send-string-把请求发送到服务器" class="headerlink" title="send(string) 把请求发送到服务器"></a><code>send(string)</code> 把请求发送到服务器</h4><ul>
<li>使用<code>get</code>方法是没有主体的，所以会把所有参数都拼在<code>url</code>里面，所以可以不填写或者写为<code>sent(none)</code><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//get</span></div><div class="line">request.open(<span class="string">"GET"</span>,<span class="string">"get.php"</span>,<span class="literal">true</span>);</div><div class="line">request.sent();</div><div class="line"></div><div class="line"><span class="comment">//post</span></div><div class="line">request.open(<span class="string">"POST"</span>,<span class="string">"create.php"</span>,<span class="literal">true</span>);</div><div class="line"><span class="comment">//告诉浏览器我们以键值对的方式来发送一个表单</span></div><div class="line">request.setRequestHeader(<span class="string">"Content-type"</span>,<span class="string">"application/x-www-form-urlencoded"</span>);</div><div class="line">request.sent(<span class="string">"name=注册者&amp;sex=男"</span>)</div><div class="line"><span class="string">`</span></div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="获取服务器响应数据-XMLHttpRequest"><a href="#获取服务器响应数据-XMLHttpRequest" class="headerlink" title="获取服务器响应数据 XMLHttpRequest"></a>获取服务器响应数据 <code>XMLHttpRequest</code></h3><h4 id="responseText-获取字符串形式的响应数据"><a href="#responseText-获取字符串形式的响应数据" class="headerlink" title="responseText 获取字符串形式的响应数据"></a><code>responseText</code> 获取字符串形式的响应数据</h4><h4 id="responseXML-获取xml形式的响应数据（现在比较小用，较常用的是json）"><a href="#responseXML-获取xml形式的响应数据（现在比较小用，较常用的是json）" class="headerlink" title="responseXML 获取xml形式的响应数据（现在比较小用，较常用的是json）"></a><code>responseXML</code> 获取xml形式的响应数据（现在比较小用，较常用的是json）</h4><h4 id="status和statusText-以数字和文本形式返回HTTP状态码"><a href="#status和statusText-以数字和文本形式返回HTTP状态码" class="headerlink" title="status和statusText 以数字和文本形式返回HTTP状态码"></a><code>status</code>和<code>statusText</code> 以数字和文本形式返回HTTP状态码</h4><h4 id="getAllResponeHeader-获取所有响应的报头"><a href="#getAllResponeHeader-获取所有响应的报头" class="headerlink" title="getAllResponeHeader() 获取所有响应的报头"></a><code>getAllResponeHeader()</code> 获取所有响应的报头</h4><h4 id="getResponeseHeader-响应中某个字段的值"><a href="#getResponeseHeader-响应中某个字段的值" class="headerlink" title="getResponeseHeader() 响应中某个字段的值"></a><code>getResponeseHeader()</code> 响应中某个字段的值</h4><h4 id="readyStatus-获取服务器的响应变化"><a href="#readyStatus-获取服务器的响应变化" class="headerlink" title="readyStatus 获取服务器的响应变化"></a><code>readyStatus</code> 获取服务器的响应变化</h4><ul>
<li>0：请求初始化，open还没有调用</li>
<li>1：服务器连接已建立，open已经调用了</li>
<li>2：请求已接收，也就是接收到头信息了</li>
<li>3：请求处理中，也就是接收到响应主体了</li>
<li>4：请求已完成，且响应已就绪，也就是响应完成了</li>
</ul>
<h4 id="onreadystatuschange来监听服务器的服务器的响应变化"><a href="#onreadystatuschange来监听服务器的服务器的响应变化" class="headerlink" title="onreadystatuschange来监听服务器的服务器的响应变化"></a><code>onreadystatuschange</code>来监听服务器的服务器的响应变化</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="string">``</span><span class="string">``</span>javascript</div><div class="line">  <span class="comment">//实例化对象</span></div><div class="line">  <span class="keyword">var</span> request;</div><div class="line">  <span class="keyword">if</span>(<span class="built_in">window</span>.XMLHttpRequest)&#123;</div><div class="line">     request = <span class="keyword">new</span> XMLHttpRequest();</div><div class="line">  &#125;<span class="keyword">else</span>&#123;</div><div class="line">     request = <span class="keyword">new</span> ActiveXObject();</div><div class="line">  &#125;</div><div class="line">  <span class="comment">//调用http请求</span></div><div class="line">  request.open(<span class="string">'get'</span>.<span class="string">'http://www.baidu.com'</span>+<span class="built_in">document</span>.getElementById(<span class="string">'ipt'</span>).value(),<span class="literal">true</span>);</div><div class="line">  <span class="comment">//发送http请求</span></div><div class="line">  request.send();</div><div class="line">  <span class="comment">//监听服务器响应变化</span></div><div class="line">  reqest.onreadystatechange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">      <span class="comment">//假如响应完成了，而且请求成功了</span></div><div class="line">      <span class="keyword">if</span>(request.readyStatus == <span class="number">4</span> &amp;&amp; request.status == <span class="number">200</span>)&#123;</div><div class="line">        <span class="comment">//响应的正文内容</span></div><div class="line">         request.responseText </div><div class="line">    &#125;</div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<h3 id="JSON"><a href="#JSON" class="headerlink" title="JSON"></a>JSON</h3><ol>
<li>javascript对象表示法(javascript object Notation)<ul>
<li>采用键值对的方式来组织</li>
<li>独立于语言，不管什么语言，都可以解释JSON</li>
</ul>
</li>
<li>JSON的长度比XML的格式短小<ul>
<li>读写速度快</li>
<li>可使用js内建方法直接解释，转换成js对象 </li>
</ul>
</li>
<li>Json的键名需要加上“”，如 “name”:”weison”;</li>
<li>Json模板<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> data = &#123;</div><div class="line">  <span class="comment">//是否正确的执行，例如参数是否传输完整</span></div><div class="line">  <span class="string">"success"</span> : <span class="literal">true</span>, </div><div class="line">  <span class="string">"msg"</span> : <span class="string">"请求反馈的信息"</span>,</div><div class="line">  <span class="comment">//返回的数据</span></div><div class="line">  <span class="string">"data"</span> : &#123;[],[]&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ol>
<h4 id="Json的解释"><a href="#Json的解释" class="headerlink" title="Json的解释"></a>Json的解释</h4><h5 id="eval"><a href="#eval" class="headerlink" title="eval"></a>eval</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> json = <span class="string">"&#123;'team':[&#123;'name':'joke'&#125;,&#123;'name':'lily'&#125;]&#125;"</span>;</div><div class="line"><span class="keyword">var</span> jsonData = <span class="built_in">eval</span>(<span class="string">'('</span>+json+<span class="string">')'</span>);</div><div class="line"><span class="built_in">console</span>.log(jsonData.team[<span class="number">0</span>].name); <span class="comment">//=&gt;joke</span></div></pre></td></tr></table></figure>
<h5 id="JSON-parse"><a href="#JSON-parse" class="headerlink" title="JSON.parse"></a>JSON.parse</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> data = <span class="string">'&#123;"team":[&#123;"name":"lily","age":20&#125;,&#123;"name":"joke","age":10&#125;]&#125;'</span>;</div><div class="line"><span class="keyword">var</span> jsonData = <span class="built_in">JSON</span>.parse(data);</div><div class="line"><span class="built_in">console</span>.log(jsonData.team[<span class="number">1</span>].name); <span class="comment">// =&gt;joke</span></div></pre></td></tr></table></figure>
<p>eval不会校验数据是否合法，而且如果json里面写了命名，它也会执行，这是不安全的，所以为了安全起建，还是使用JSON.parse比较好</p>
<h5 id="检验工具"><a href="#检验工具" class="headerlink" title="检验工具"></a>检验工具</h5><p><a href="https://www.baidu.com/link?url=lR-jrWj-hOhg1U8WtU6xKOipsBg_6H3wPj1T7Poxxou&amp;wd=&amp;eqid=cdc4de63001ebe460000000656f755a2" target="_blank" rel="external">jsonlint</a></p>
<h3 id="jquery-ajax实现ajax请求"><a href="#jquery-ajax实现ajax请求" class="headerlink" title="jquery.ajax实现ajax请求"></a>jquery.ajax实现ajax请求</h3><h4 id="type请求方式，默认为get"><a href="#type请求方式，默认为get" class="headerlink" title="type请求方式，默认为get"></a><code>type</code>请求方式，默认为<code>get</code></h4><h4 id="url请求地址"><a href="#url请求地址" class="headerlink" title="url请求地址"></a><code>url</code>请求地址</h4><h4 id="data连同请求发送到服务器的数据"><a href="#data连同请求发送到服务器的数据" class="headerlink" title="data连同请求发送到服务器的数据"></a><code>data</code>连同请求发送到服务器的数据</h4><h4 id="dataType-预期服务器返回的数据类型"><a href="#dataType-预期服务器返回的数据类型" class="headerlink" title="dataType:预期服务器返回的数据类型"></a><code>dataType</code>:预期服务器返回的数据类型</h4><p>如果不指定，会根据http包的MIME信息来智能判断，我们一般会采用json，可以设置为<code>json</code></p>
<h4 id="success是一个方法，请求成功后的返回数据"><a href="#success是一个方法，请求成功后的返回数据" class="headerlink" title="success是一个方法，请求成功后的返回数据"></a><code>success</code>是一个方法，请求成功后的返回数据</h4><h4 id="error是一个方法，请求失败时调用此函数，传入XMLHttpRequest对象"><a href="#error是一个方法，请求失败时调用此函数，传入XMLHttpRequest对象" class="headerlink" title="error是一个方法，请求失败时调用此函数，传入XMLHttpRequest对象"></a><code>error</code>是一个方法，请求失败时调用此函数，传入XMLHttpRequest对象</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//jquery的ajax请求</span></div><div class="line">$.ajax(&#123;</div><div class="line">    <span class="attr">type</span> :<span class="string">'POST'</span>,</div><div class="line">    <span class="attr">url</span> : <span class="string">'servvice.php'</span>,</div><div class="line">    <span class="attr">datatype</span> : <span class="string">'json'</span>,</div><div class="line">    <span class="attr">data</span> : &#123;</div><div class="line">      <span class="string">'name'</span> : $(<span class="string">"#iptName"</span>).val(),</div><div class="line">      <span class="string">'sex'</span> : $(<span class="string">'#iptSex'</span>).val()</div><div class="line">  &#125;</div><div class="line">  success: <span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</div><div class="line">      <span class="keyword">if</span>(data.success)&#123;</div><div class="line">          <span class="comment">// do some thing</span></div><div class="line">    &#125;<span class="keyword">else</span>&#123;</div><div class="line">      <span class="built_in">console</span>.log(data.msg);</div><div class="line">  &#125;</div><div class="line">  &#125;,</div><div class="line">  <span class="attr">error</span> : <span class="function"><span class="keyword">function</span>(<span class="params">jqXHR</span>)</span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'错误信息'</span>+jqxXHR.status);</div><div class="line">&#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<h3 id="跨域"><a href="#跨域" class="headerlink" title="跨域"></a>跨域</h3><h4 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h4><p><img src="http://7xovt0.com1.z0.glb.clouddn.com/blog%E8%B7%A8%E5%9F%9F.jpg" alt="跨域"><br>不同的域名不间请求数据，就叫跨域<br>因为js不允许跨域来操作DOM（同源策略），所以a.html的js文件不能操作b.html下的DOM</p>
<h4 id="解决跨域问题方案"><a href="#解决跨域问题方案" class="headerlink" title="解决跨域问题方案"></a>解决跨域问题方案</h4><h5 id="jsonp"><a href="#jsonp" class="headerlink" title="jsonp"></a>jsonp</h5><ul>
<li>json+padding</li>
<li>可以解决主流浏览器下的get请求跨域问题</li>
<li>它是把script的src标签当成的请求的地址，它可以接受任意类型的文件（如baidu.com/php?name=weison&amp;&amp;age=20），只要最后返回的数据是json或者是js，它就不会有问题。</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line">  $(<span class="string">"#submit"</span>).on(<span class="string">'click'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">       $.ajax(&#123;</div><div class="line">          <span class="attr">type</span> : <span class="string">'GET'</span>,</div><div class="line">          <span class="attr">url</span> : <span class="string">'service.php?'</span> + $(<span class="string">"#ipt"</span>).val().</div><div class="line">          dataType : <span class="string">'jsonp'</span>,</div><div class="line">          <span class="attr">jsonp</span> : <span class="string">'callBack'</span>,</div><div class="line">          <span class="attr">success</span> : <span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</div><div class="line">            <span class="keyword">if</span>(data.success)&#123;</div><div class="line">              <span class="comment">//执行对接</span></div><div class="line">          &#125;<span class="keyword">else</span>&#123;</div><div class="line">            <span class="built_in">console</span>.log(data.msg);</div><div class="line">        &#125;</div><div class="line">        &#125;,</div><div class="line">        <span class="attr">error</span> :<span class="function"><span class="keyword">function</span>(<span class="params">jqXHR</span>)</span>&#123;</div><div class="line">           <span class="built_in">console</span>.log(<span class="string">'错误信息'</span>+jqXHR.status);</div><div class="line">      &#125;</div><div class="line">       &#125;)</div><div class="line">  &#125;)</div><div class="line">&lt;<span class="regexp">/script&gt;</span></div></pre></td></tr></table></figure>
<h5 id="CORS跨域资源共享-XHR2"><a href="#CORS跨域资源共享-XHR2" class="headerlink" title="CORS跨域资源共享\XHR2"></a><code>CORS</code>跨域资源共享\XHR2</h5><p>Cross-origin resource sharing,利用html5下的XMLHttpRequest level2 实现跨域（ie10以下不支持）。当页面发起异步的AJAX请求时，浏览器会带上<code>origin</code>头，然后由后台的<code>Access-Control-Allow-Origin</code>来决定是否允许请求数据,如果允许，则浏览器可以拿到响应数据，否则请求会被驳回。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line">  <span class="comment">//在服务端增加访问控制允许的域，*代表允许任意来源的请求</span></div><div class="line">  res.header(<span class="string">"Access-Control-Allow-Origin"</span>,<span class="string">"*"</span>);</div><div class="line">  <span class="comment">//指定允许请求的域名</span></div><div class="line">  res.header(<span class="string">"Access-Control-Allow-Origin"</span>,<span class="string">"www.weison.org"</span>);</div><div class="line"><span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></div></pre></td></tr></table></figure>
<h5 id="XHR2"><a href="#XHR2" class="headerlink" title="XHR2"></a>XHR2</h5><p>利用html5下的XMLHttpRequest level2 实现跨域（ie10以下不支持）<br>在ie10及以上，在服务器上增加<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">head(<span class="string">"Access-Control-Allow-Origin:*"</span>)</div><div class="line">head(<span class="string">'Access-Control-Allow-Method:POST,GET'</span>);</div></pre></td></tr></table></figure></p>
<h5 id="设置document-domain来实现降域"><a href="#设置document-domain来实现降域" class="headerlink" title="设置document.domain来实现降域"></a>设置<code>document.domain</code>来实现降域</h5><p>document.domain = ‘a.com’ 在主域名和子域名中都设计<br>eg: www.a.weison.org 内设置 <code>document.domain = &quot;weison.org&quot;</code><br>    www.b.weison.org 内设置 <code>document.domain = &quot;weison.org&quot;</code></p>
<h5 id="html5下的postMessage"><a href="#html5下的postMessage" class="headerlink" title="html5下的postMessage"></a>html5下的<code>postMessage</code></h5><p>一般用于页面的相互嵌套，进行数据之间的交互或操作元素</p>
<h5 id="服务器代理-XMLHttpRequest-不同域名下服务器代理"><a href="#服务器代理-XMLHttpRequest-不同域名下服务器代理" class="headerlink" title="服务器代理:XMLHttpRequest 不同域名下服务器代理"></a>服务器代理:XMLHttpRequest 不同域名下服务器代理</h5><h4 id="localhost-hash"><a href="#localhost-hash" class="headerlink" title="localhost.hash"></a><code>localhost.hash</code></h4><h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><p><a href="http://www.imooc.com/learn/250" target="_blank" rel="external">慕课网-WayneJ-Ajax全接触</a><br><a href="http://www.jirengu.com/app/watch/1213/1?vsum=1" target="_blank" rel="external">饥人谷 若愚 跨域-jsonp</a><br><a href="http://www.ruanyifeng.com/blog/2016/04/cors.html" target="_blank" rel="external">阮一峰 - 跨域资源共享 CORS 详解</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Hello World]]></title>
      <url>weison.org/2015/12/11/markdown/</url>
      <content type="html"><![CDATA[<h1 id="h1"><a href="#h1" class="headerlink" title="h1"></a>h1</h1><h2 id="h2"><a href="#h2" class="headerlink" title="h2"></a>h2</h2><h3 id="h3"><a href="#h3" class="headerlink" title="h3"></a>h3</h3><h4 id="h4"><a href="#h4" class="headerlink" title="h4"></a>h4</h4><h5 id="h5"><a href="#h5" class="headerlink" title="h5"></a>h5</h5><h6 id="h6"><a href="#h6" class="headerlink" title="h6"></a>h6</h6><p>正文内容不加任何东西</p>
<p>换行要空一行</p>
<ul>
<li>无序列表</li>
<li>1231</li>
<li>23131</li>
</ul>
<ol>
<li>有序列表，在前面添加任意数字和点号</li>
<li>2</li>
<li>3</li>
<li>4</li>
</ol>
<p><a href="http://baidu.com" target="_blank" rel="external">超链接</a></p>
<p><img src="http://img.hb.aicdn.com/aba075f8cc4b901445b715eb65830b9361bf7a2fbb18-Zd82GA_sq320" alt=""></p>
<p>使用4个空格或一个tab键盘在前面即可生成代码块</p>
<pre><code>var a=10;
function(){ console.log(a);}
</code></pre>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[new poster]]></title>
      <url>weison.org/2015/12/04/new-poster/</url>
      <content type="html"><![CDATA[<p><img src="http://7xovt0.com1.z0.glb.clouddn.com/blog9e9ea8e094f3c746f86f56f11b3342bbd4bf01875b68-vDjgnW_fw658.jpg" alt=""></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[hexo安装过程]]></title>
      <url>weison.org/2015/11/10/hexo/</url>
      <content type="html"><![CDATA[<ol>
<li>npm install hexo-deployer-git 一键推送到远端的插件</li>
<li>hexo g -d 生成并推送到仓库</li>
<li>ssh-keygen -t rsa  -c “1192619694@qq.com”</li>
<li>IM.</li>
</ol>
<p>添加jsfiddle代码<br><iframe scrolling="no" width="100%" height="300" src="http://jsfiddle.net/cx65k70u/embedded/js,resources,html,css,result/light" frameborder="0" allowfullscreen></iframe></p>
]]></content>
    </entry>
    
  
  
</search>
